<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xen.Graphics.ShaderSystem</name>
    </assembly>
    <members>
        <member name="T:Xen.Graphics.IShader">
            <summary>
            Allows for dynamic use of the shader
            </summary>
        </member>
        <member name="M:Xen.Graphics.IShader.Bind(Xen.Graphics.ShaderSystem.IShaderSystem)">
            <summary>
            Bind the shader - (this method is called by the application)
            </summary>
            <param name="state">Must not be null</param>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,System.Single)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,System.Single[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture3D)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Xen.Graphics.State.TextureSamplerState)">
            <summary>
            Set a shader texture sampler state
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the sampler state name</param>
            <param name="sampler">sampler state to set</param>
            <returns>true if the sampler state was set</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.GetVertexInputCount">
            <summary>
            Get the number of vertex inputs required by the shader
            </summary>
            <returns>Returns the number of vertex inputs required by the shader</returns>
        </member>
        <member name="M:Xen.Graphics.IShader.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>
            Gets a vertex input required by the shader, by index. <see cref="M:Xen.Graphics.IShader.GetVertexInputCount"/> to get the number of inputs required.
            </summary>
            <param name="index">Index of the element</param>
            <param name="elementUsage">Gets the usage type of the vertex element (eg, <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position"/>)</param>
            <param name="elementIndex">Gets the index of the vertex element (eg, there may be more than one <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate"/>)</param>
            <remarks><para>Implementations should return elements in logical order, first all Position (0) elements in elementIndex order, all BlendWeights (1), etc.</para></remarks>
        </member>
        <member name="P:Xen.Graphics.IShader.HasChanged">
            <summary>
            True if a non-global has changed since this shader was last bound
            </summary>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.BaseShader">
            <summary>
            Base shader class, provides empty implementations of the IShader methods, to reduce generated code
            </summary>
        </member>
        <member name="F:Xen.Graphics.ShaderSystem.BaseShader.owner">
            <summary>
            True if this shader instance owns it's own vertex and pixel shaders
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Bind(Xen.Graphics.ShaderSystem.IShaderSystem)">
            <summary>
            Bind the shader - (this method is called by the application)
            </summary>
            <param name="state">Must not be null</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Changed">
            <summary>
            True if a non-global has changed since this shader was last bound
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,System.Single)">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,System.Single[])">
            <summary>
            Set a shader attribute
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the attribute name</param>
            <param name="value">value to set</param>
            <returns>true if the value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.Texture3D)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCube)">
            <summary>
            Set a shader texture
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the texture name</param>
            <param name="texture">texture to set</param>
            <returns>true if the texture was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem,System.Int32,Xen.Graphics.State.TextureSamplerState)">
            <summary>
            Set a shader texture sampler state
            </summary>
            <param name="state"></param>
            <param name="name_uid">unique id of the sampler state name</param>
            <param name="sampler">sampler state to set</param>
            <returns>true if the sampler state was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.GetVertexInputCount">
            <summary>
            Get the number of vertex inputs required by the shader
            </summary>
            <returns>Returns the number of vertex inputs required by the shader</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>
            Gets a vertex input required by the shader, by index. <see cref="M:Xen.Graphics.ShaderSystem.BaseShader.GetVertexInputCount"/> to get the number of inputs required.
            </summary>
            <param name="index">Index of the element</param>
            <param name="elementUsage">Gets the usage type of the vertex element (eg, <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position"/>)</param>
            <param name="elementIndex">Gets the index of the vertex element (eg, there may be more than one <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate"/>)</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Xen#Graphics#IShader#GetVertexInputCount">
            <summary>
            Get the number of vertex inputs required by the shader
            </summary>
            <returns>Returns the number of vertex inputs required by the shader</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Xen#Graphics#IShader#GetVertexInput(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementUsage@,System.Int32@)">
            <summary>
            Gets a vertex input required by the shader, by index. <see cref="M:Xen.Graphics.ShaderSystem.BaseShader.GetVertexInputCount"/> to get the number of inputs required.
            </summary>
            <param name="index">Index of the element</param>
            <param name="elementUsage">Gets the usage type of the vertex element (eg, <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position"/>)</param>
            <param name="elementIndex">Gets the index of the vertex element (eg, there may be more than one <see cref="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate"/>)</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Warm(Xen.Graphics.ShaderSystem.IShaderSystem)">
            <summary>
            Preload shader resources
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem)">
            <summary>
            Warm shader implementation
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.GetShaderConstantHash(System.Boolean)">
            <summary>
            Gets an array of integer values that give an approximate identification hash for the shader constants and their use by this shader
            </summary>
            <param name="ps">return pixel shader indices</param>
            <returns></returns>
            <remarks>Returned values can only be used to compare constant usage between shaders. It is possible to get the same values between shaders, however unlikely</remarks>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.BaseShader.Merge(Xen.Graphics.ShaderSystem.BaseShader,Xen.Graphics.ShaderSystem.BaseShader)">
            <summary>
            Attempts to merge two shader instances, sharing their vertex and pixel shaders into a single shader instance. This method requires that both shaders implement compatible shader constant logic (This requirement is only partially validated)
            </summary>
            <param name="vsSource"></param>
            <param name="psSource"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.IShaderSystem">
            <summary>
            Interface for setting shader constants with common semantic such as 'WORLDVIEWPROJECTION' and the special 'GLOBAL' semantic. All methods are called back by the shader
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.Begin(Xen.Graphics.IShader,System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>Will be called before calls to SetXXX()</summary>
            <returns>System-wide unique non-zero index for the current application graphics device (if this index changes, the shader will recreate itself automatically)</returns>
            <param name="pixelShaderSamplersUsed"></param>
            <param name="vertexShaderSamplersUsed"></param>
            <param name="instanceChanged"></param>
            <param name="shader"></param>
            <param name="typeChanged"></param>
            <remarks><para>if typeChanged is set to true, instanceChanged must also be true</para>
            <para>Implementation may always set true to both values if state tracking isn't supported</para></remarks>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.CreateShaders(Microsoft.Xna.Framework.Graphics.VertexShader@,Microsoft.Xna.Framework.Graphics.PixelShader@,System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create vertex and pixel shaders
            </summary>
            <param name="vertexShader"></param>
            <param name="pixelShader"></param>
            <param name="vShaderBytes"></param>
            <param name="pShaderBytes"></param>
            <param name="psInstructionCount">approximate</param>
            <param name="psPreShaderInstructionCount">approximate</param>
            <param name="vsInstructionCount">approximate</param>
            <param name="vsPreShaderInstructionCount">approximate</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetShaders(Microsoft.Xna.Framework.Graphics.VertexShader,Microsoft.Xna.Framework.Graphics.PixelShader)">
            <summary>
            Set the vertex and pixel shaders
            </summary>
            <param name="vertexShader"></param>
            <param name="pixelShader"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetShaderConstants(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Set shader constants
            </summary>
            <param name="vertexShaderConstants">may be null</param>
            <param name="pixelShaderConstants">may be null</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewProjectionMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewProjectionInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewProjectionTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldProjectionMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldProjectionInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldProjectionTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewProjectionMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewProjectionInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewProjectionTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldViewTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWorldTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetProjectionMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetProjectionInverseMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetProjectionTransposeMatrix(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetCameraNearFarVector2(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector2},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetCameraFovVector2(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector2},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetCameraFovTangentVector2(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector2},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewDirectionVector3(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector3},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewDirectionVector4(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector4},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewPointVector3(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector3},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetViewPointVector4(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector4},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetWindowSizeVector2(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector2},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetVertexCountSingle(Xen.Graphics.ShaderSystem.Constants.IValue{System.Single},System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetGlobalUniqueID``1(System.String)">
            <summary>
            Get the unique id for the name of a global type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetNameUniqueID(System.String)">
            <summary>
            Get the unique id for the name of an attibute, texture or sampler
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector4},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IValue{System.Single},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IValue{Microsoft.Xna.Framework.Matrix},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IArray{Microsoft.Xna.Framework.Vector4},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IArray{Microsoft.Xna.Framework.Vector3},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IArray{Microsoft.Xna.Framework.Vector2},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IArray{System.Single},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetGlobal(Xen.Graphics.ShaderSystem.Constants.IArray{Microsoft.Xna.Framework.Matrix},System.Int32,System.Int32@)">
            <summary>Method used by a generated shader</summary><param name="value"></param><param name="gloabl_uid"></param><param name="changeIndex"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetGlobalTexture(System.Int32)">
            <summary>Method used by a generated shader</summary><param name="gloabl_uid"></param><returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetGlobalTexture2D(System.Int32)">
            <summary>Method used by a generated shader</summary><param name="gloabl_uid"></param><returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetGlobalTexture3D(System.Int32)">
            <summary>Method used by a generated shader</summary><param name="gloabl_uid"></param><returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.GetGlobalTextureCube(System.Int32)">
            <summary>Method used by a generated shader</summary><param name="gloabl_uid"></param><returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetPixelShaderSampler(System.Int32,Microsoft.Xna.Framework.Graphics.Texture,Xen.Graphics.State.TextureSamplerState)">
            <summary>Method used by a generated shader</summary><param name="index"></param><param name="texture"></param><param name="state"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.IShaderSystem.SetVertexShaderSampler(System.Int32,Microsoft.Xna.Framework.Graphics.Texture,Xen.Graphics.State.TextureSamplerState)">
            <summary>Method used by a generated shader</summary><param name="index"></param><param name="texture"></param><param name="state"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.IShaderSystem.DeviceUniqueIndex">
            <summary>System-wide unique non-zero index for the current application graphics device (if this index changes, the shader will recreate itself automatically)</summary>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.ConstantArray">
            <summary>
            Simple wrapper class for a constant vector array
            </summary>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.IValue`1">
            <summary>
            Interface for setting a shader value by ref
            </summary>
            <typeparam name="T"><see cref="T:System.Single"/>, <see cref="T:Microsoft.Xna.Framework.Vector2"/>, <see cref="T:Microsoft.Xna.Framework.Vector3"/>, <see cref="T:Microsoft.Xna.Framework.Vector4"/> and <see cref="T:Microsoft.Xna.Framework.Matrix"/></typeparam>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.IValue`1.Set(`0@)">
            <summary></summary><param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix4Transpose(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix4(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix3Transpose(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix3(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix2Transpose(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix2(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix1Transpose(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Matrix1(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Vector4(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Vector3(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Vector2(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Single(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Xen#Graphics#ShaderSystem#Constants#IValue{Microsoft#Xna#Framework#Matrix}#Set(Microsoft.Xna.Framework.Matrix@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Xen#Graphics#ShaderSystem#Constants#IValue{Microsoft#Xna#Framework#Vector4}#Set(Microsoft.Xna.Framework.Vector4@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Xen#Graphics#ShaderSystem#Constants#IValue{Microsoft#Xna#Framework#Vector3}#Set(Microsoft.Xna.Framework.Vector3@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Xen#Graphics#ShaderSystem#Constants#IValue{Microsoft#Xna#Framework#Vector2}#Set(Microsoft.Xna.Framework.Vector2@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Xen#Graphics#ShaderSystem#Constants#IValue{System#Single}#Set(System.Single@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix4(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix4Transpose(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix3(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix3Transpose(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix2(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix2Transpose(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix1(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetMatrix1Transpose(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary></summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetVector4(System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>Method used by a generated shader</summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetVector3(System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>Method used by a generated shader</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetVector2(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>Method used by a generated shader</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.SetSingle(System.Int32,System.Single@)">
            <summary>Method used by a generated shader</summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="F:Xen.Graphics.ShaderSystem.Constants.ConstantArray.array">
            <summary>Main array of values</summary>
        </member>
        <member name="F:Xen.Graphics.ShaderSystem.Constants.ConstantArray.changed">
            <summary>Array to indicate changes to registers</summary>
        </member>
        <member name="F:Xen.Graphics.ShaderSystem.Constants.ConstantArray.change">
            <summary>True if a change has been written</summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.#ctor(System.Int32)">
            <summary></summary>
            <param name="length">number of constants</param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.Set(System.Int32,System.Single[])">
            <summary></summary>
            <param name="value"></param>
            <param name="reg"></param>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils">
            <summary>
            Common utilitiy methods used by shaders, including very simple runlength compression to help compiled shaders a tad.
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(System.Byte[])">
            <summary>
            Decompress a byte array with very simple compression
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleCompress(System.Byte[])">
            <summary>
            Compress a byte array with very simple compression
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.IArray`1">
            <summary>
            Interface to an array of shader values
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.IArray`1.SetValue(System.Int32,`0@)">
            <summary>
            Set an element in the array. Returns false if no value was set
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns>Returns false if no value was set</returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.IArray`1.SetArray(`0[])">
            <summary>
            Sets all values in the array
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.IArray`1.SetArray(`0[],System.Int32)">
            <summary>
            Sets all values in the array, from the given start index
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.IArray`1.Item(System.Int32)">
            <summary>Gets/Sets an element in the array
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.IArray`1.Length">
            <summary>
            Gets the length of the array
            </summary>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.DualArray`1">
            <summary>
            Class used by a generated shader
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.DualArray`1.#ctor(Xen.Graphics.ShaderSystem.Constants.IArray{`0},Xen.Graphics.ShaderSystem.Constants.IArray{`0})">
            <summary></summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.DualArray`1.SetValue(System.Int32,`0@)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.DualArray`1.SetArray(`0[])">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.DualArray`1.SetArray(`0[],System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.DualArray`1.Length">
            <summary>Method used by a generated shader</summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.DualArray`1.Item(System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Vector4Array">
            <summary>
            Array of Vector4 values
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector4Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector4Array.SetValue(System.Int32,Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Set an element in the array
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector4Array.SetArray(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Set values in the array
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector4Array.SetArray(Microsoft.Xna.Framework.Vector4[],System.Int32)">
            <summary>
            Set values in the array
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector4Array.Length">
            <summary>
            Gets the length of the array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector4Array.Item(System.Int32)">
            <summary>
            Gets/Sets elements of the array
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Vector3Array">
            <summary>
            Vector3 array
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector3Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector3Array.SetValue(System.Int32,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Set an element in the array
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector3Array.SetArray(Microsoft.Xna.Framework.Vector3[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector3Array.SetArray(Microsoft.Xna.Framework.Vector3[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector3Array.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector3Array.Item(System.Int32)">
            <summary>
            Gets/Sets elements in the array
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Vector2Array">
            <summary>
            Array of vector2s
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector2Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector2Array.SetValue(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Set elements of the array
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector2Array.SetArray(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Vector2Array.SetArray(Microsoft.Xna.Framework.Vector2[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector2Array.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Vector2Array.Item(System.Int32)">
            <summary>
            Gets/Sets elements of the array
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.SingleArray">
            <summary>
            Float array
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.SingleArray.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.SingleArray.SetValue(System.Int32,System.Single)">
            <summary>
            Set array values
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.SingleArray.SetValue(System.Int32,System.Single@)">
            <summary>
            Set array values
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.SingleArray.SetArray(System.Single[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.SingleArray.SetArray(System.Single[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.SingleArray.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.SingleArray.Item(System.Int32)">
            <summary>
            Gets/Sets elements in the array
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Matrix4Array">
            <summary>
            Array of matrix4
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="transpose"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.SetValue(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set array element
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.SetArray(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.SetArray(Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.Length">
            <summary>
            Length of the array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix4Array.Item(System.Int32)">
            <summary>
            Gets/Sets array elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Matrix3Array">
            <summary>
            Array of matrix4x3
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="transpose"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.SetValue(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set array element
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.SetArray(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.SetArray(Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.Length">
            <summary>
            Lenght of array
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix3Array.Item(System.Int32)">
            <summary>
            Gets/Sets array element
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Matrix2Array">
            <summary>
            Array of matrix4x2
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="transpose"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.SetValue(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set array element
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.SetArray(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.SetArray(Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.Length">
            <summary>
            Array length
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix2Array.Item(System.Int32)">
            <summary>
            Gets/Sets array elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.Matrix1Array">
            <summary>
            Array of matrix4x1
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.#ctor(Xen.Graphics.ShaderSystem.Constants.ConstantArray,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Method used by a generated shader
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="transpose"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.SetValue(System.Int32,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Set array element
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.SetArray(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.SetArray(Microsoft.Xna.Framework.Matrix[],System.Int32)">
            <summary>
            Set array values
            </summary>
            <param name="values"></param>
            <param name="startIndex"></param>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.Length">
            <summary>
            Array length
            </summary>
        </member>
        <member name="P:Xen.Graphics.ShaderSystem.Constants.Matrix1Array.Item(System.Int32)">
            <summary>
            Gets/Sets array elements
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Xen.Graphics.ShaderSystem.Constants.IValueArray">
            <summary>
            Interface for setting an array of shader value registers
            </summary>
        </member>
        <member name="M:Xen.Graphics.ShaderSystem.Constants.IValueArray.Set(System.Single[])">
            <summary></summary><param name="values"></param>
            <remarks><para>It is recommended to not pass a copy of the register data into this method, but to simply pass the member reference.</para><para>The array data will not be modified.</para></remarks>
        </member>
        <member name="T:Xen.Graphics.State.TextureSamplerState">
            <summary>
            Packed representation of common Texture Sampler states. 4 bytes
            </summary>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.op_Equality(Xen.Graphics.State.TextureSamplerState,Xen.Graphics.State.TextureSamplerState)">
            <summary></summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.op_Inequality(Xen.Graphics.State.TextureSamplerState,Xen.Graphics.State.TextureSamplerState)">
            <summary></summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.Equals(System.Object)">
            <summary></summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.GetHashCode">
            <summary>
            Gets the hash code for this sampler state. Returns the internal bitfield value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.op_Implicit(Xen.Graphics.State.TextureSamplerState)~System.Int32">
            <summary>
            Cast this sampler to it's internal bitfield representation
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Xen.Graphics.State.TextureSamplerState.op_Explicit(System.Int32)~Xen.Graphics.State.TextureSamplerState">
            <summary>
            Explicit case from an integer bitfield representation
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.PointFiltering">
            <summary>
            Gets a texture sampler that applies simple pointer filtering
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.BilinearFiltering">
            <summary>
            Gets a texture sampler that applies bilinear filtering (linear UV filtering with point mipmap filtering)
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.TrilinearFiltering">
            <summary>
            Gets a texture sampler that applies trilinear filtering (linear UV filtering mipmap filtering)
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AnisotropicLowFiltering">
            <summary>
            Gets a texture sampler that applies anisotropic filtering with a low max anisotropic value
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AnisotropicMediumFiltering">
            <summary>
            Gets a texture sampler that applies anisotropic filtering with a medium max anisotropic value
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AnisotropicHighFiltering">
            <summary>
            Gets a texture sampler that applies anisotropic filtering with a high max anisotropic value
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AddressUV">
            <summary>
            Allows setting of both the <see cref="P:Xen.Graphics.State.TextureSamplerState.AddressU"/> and <see cref="P:Xen.Graphics.State.TextureSamplerState.AddressV"/> coordinate address modes at the same time
            </summary>
            <remarks>The safest values to use are <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap"/> for repeating textures, and <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp"/>. Other options such as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border"/> may not be supported on all hardware.</remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AddressU">
            <summary>
            Controls texture address behaviour for the U coordinate (The U coordinate is the x-axis in texture coordinate space)
            </summary>
            <remarks>The safest values to use are <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap"/> for repeating textures, and <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp"/>. Other options such as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border"/> may not be supported on all hardware.</remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AddressV">
            <summary>
            Controls texture address behaviour for the V coordinate (The V coordinate is the y-axis in texture coordinate space)
            </summary>
            <remarks>The safest values to use are <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap"/> for repeating textures, and <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp"/>. Other options such as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border"/> may not be supported on all hardware.</remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.AddressW">
            <summary>
            Controls texture address behaviour for the W coordinate (The W coordinate is the z-axis in texture coordinate space). This filtering mode only applies to 3D textures.
            </summary>
            <remarks>The safest values to use are <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap"/> for repeating textures, and <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp"/>. Other options such as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border"/> may not be supported on all hardware.</remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.MinFilter">
            <summary>
            Controls texture filtering when the texture is displayed over a smaller area than itself (the texture is minified, or reduced in size)
            </summary>
            <remarks><para>TextureFilter.None, TextureFilter.Point, TextureFilter.Linear and TextureFilter.Anisotropic are supported.</para>
            <para>This filter would apply when a 512x512 texture is being displayed as 400x400 pixels in size</para></remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.MagFilter">
            <summary>
            Controls texture filtering when the texture is displayed over a larger area than itself (the texture is magnified, or enlarged)
            </summary>
            <remarks><para>TextureFilter.None, TextureFilter.Point, TextureFilter.Linear are supported.</para>
            <para>This filter would apply when a 512x512 texture is being displayed as 600x600 pixels in size</para>
            </remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.MipFilter">
            <summary>
            <para>Controls texture filtering that takes place between different mipmap levels.</para>
            <para>Set <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilter.None"/> to disable mipmapping</para>
            <para>Set <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Point"/> in combination with MinFilter as TextureFilter.Linear for bilinear filtering (2 axis filtering). Samples in nearest miplevel will be displayed.</para>
            <para>Set <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Linear"/> in combination with MinFilter as TextureFilter.Linear for trilinear filtering (3 axis filtering). Samples in the two nearest mipmap levels will be interpolated between.</para>
            </summary>
            <remarks>Valid inputs are TextureFilter.None, TextureFilter.Point and TextureFilter.Linear</remarks>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.MaxAnisotropy">
            <summary>
            Set the maximum number of samples used when <see cref="P:Xen.Graphics.State.TextureSamplerState.MinFilter"/> is set to <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Anisotropic"/> filtering. Range of [1-16], usually limited to values that are a power of two.
            </summary>
        </member>
        <member name="P:Xen.Graphics.State.TextureSamplerState.MaxMipmapLevel">
            <summary>
            Set the maximum mipmap level the video card will sample, where 0 is the largest map (and the default value). Set to 1 to prevent the highest mipmap level being sampled (this will effectivly half the resolution of the texture displayed).
            </summary>
        </member>
    </members>
</doc>
