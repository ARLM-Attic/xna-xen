#if !XBOX360
namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 3 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0.init_gd = state.DeviceUniqueIndex;
			vs0ps0.id_0 = state.GetNameUniqueID("ambient");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b0);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0.gd))
			{
				return;
			}
			vs0ps0.gd = devIndex;
			if ((vs0ps0.vs != null))
			{
				vs0ps0.vs.Dispose();
				vs0ps0.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0.vs, out vs0ps0.ps, vs0ps0.vsb, vs0ps0.psb, 14, 3, 0, 0);
			if ((vs0ps0.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0ps0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0.vs, vs0ps0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0._init(state);
			}
			if ((name_uid == vs0ps0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0};
		
readonly 
		
		private static int[] _vusage = new int[] {0};
		
		protected override int GetVertexInputCount()
		{
			return 1;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 4 instruction slots used (1 texture, 3 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0t.init_gd = state.DeviceUniqueIndex;
			vs0ps0t.id_0 = state.GetNameUniqueID("ambient");
			vs0ps0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ps0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b2);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0t.gd))
			{
				return;
			}
			vs0ps0t.gd = devIndex;
			if ((vs0ps0t.vs != null))
			{
				vs0ps0t.vs.Dispose();
				vs0ps0t.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0t.vs, out vs0ps0t.ps, vs0ps0t.vsb, vs0ps0t.psb, 14, 4, 0, 0);
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((vs0ps0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0t.vs, vs0ps0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,5};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 3 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0c.init_gd = state.DeviceUniqueIndex;
			vs0ps0c.id_0 = state.GetNameUniqueID("ambient");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b4);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0c.gd))
			{
				return;
			}
			vs0ps0c.gd = devIndex;
			if ((vs0ps0c.vs != null))
			{
				vs0ps0c.vs.Dispose();
				vs0ps0c.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0c.vs, out vs0ps0c.ps, vs0ps0c.vsb, vs0ps0c.psb, 14, 3, 0, 0);
			if ((vs0ps0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0ps0c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0c.vs, vs0ps0c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0c._init(state);
			}
			if ((name_uid == vs0ps0c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,10};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 4 instruction slots used (1 texture, 3 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0tc.init_gd = state.DeviceUniqueIndex;
			vs0ps0tc.id_0 = state.GetNameUniqueID("ambient");
			vs0ps0tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ps0tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b5);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0tc.gd))
			{
				return;
			}
			vs0ps0tc.gd = devIndex;
			if ((vs0ps0tc.vs != null))
			{
				vs0ps0tc.vs.Dispose();
				vs0ps0tc.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0tc.vs, out vs0ps0tc.ps, vs0ps0tc.vsb, vs0ps0tc.psb, 14, 4, 0, 0);
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((vs0ps0tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0tc.vs, vs0ps0tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 20 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0.init_gd = state.DeviceUniqueIndex;
			vs0.id_0 = state.GetNameUniqueID("ambient");
			vs0.id_1 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b6);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0.gd))
			{
				return;
			}
			vs0.gd = devIndex;
			if ((vs0.vs != null))
			{
				vs0.vs.Dispose();
				vs0.ps.Dispose();
			}
			state.CreateShaders(out vs0.vs, out vs0.ps, vs0.vsb, vs0.psb, 19, 1, 0, 0);
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0.vs, vs0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
			if ((name_uid == vs0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
			if ((name_uid == vs0.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 50 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1.init_gd = state.DeviceUniqueIndex;
			vs1.id_0 = state.GetNameUniqueID("ambient");
			vs1.id_1 = state.GetNameUniqueID("v_lights");
			vs1.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b8);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1.gd))
			{
				return;
			}
			vs1.gd = devIndex;
			if ((vs1.vs != null))
			{
				vs1.vs.Dispose();
				vs1.ps.Dispose();
			}
			state.CreateShaders(out vs1.vs, out vs1.ps, vs1.vsb, vs1.psb, 45, 1, 0, 0);
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1.vs, vs1.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
			if ((name_uid == vs1.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
			if ((name_uid == vs1.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 103 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3.init_gd = state.DeviceUniqueIndex;
			vs3.id_0 = state.GetNameUniqueID("ambient");
			vs3.id_1 = state.GetNameUniqueID("v_lights");
			vs3.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b9);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3.gd))
			{
				return;
			}
			vs3.gd = devIndex;
			if ((vs3.vs != null))
			{
				vs3.vs.Dispose();
				vs3.ps.Dispose();
			}
			state.CreateShaders(out vs3.vs, out vs3.ps, vs3.vsb, vs3.psb, 88, 1, 0, 0);
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3.vs, vs3.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
			if ((name_uid == vs3.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
			if ((name_uid == vs3.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 181 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6.init_gd = state.DeviceUniqueIndex;
			vs6.id_0 = state.GetNameUniqueID("ambient");
			vs6.id_1 = state.GetNameUniqueID("v_lights");
			vs6.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b10);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6.gd))
			{
				return;
			}
			vs6.gd = devIndex;
			if ((vs6.vs != null))
			{
				vs6.vs.Dispose();
				vs6.ps.Dispose();
			}
			state.CreateShaders(out vs6.vs, out vs6.ps, vs6.vsb, vs6.psb, 154, 1, 0, 0);
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6.vs, vs6.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
			if ((name_uid == vs6.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
			if ((name_uid == vs6.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 20 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0t.init_gd = state.DeviceUniqueIndex;
			vs0t.id_0 = state.GetNameUniqueID("ambient");
			vs0t.id_1 = state.GetNameUniqueID("p_lights");
			vs0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b11);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0t.gd))
			{
				return;
			}
			vs0t.gd = devIndex;
			if ((vs0t.vs != null))
			{
				vs0t.vs.Dispose();
				vs0t.ps.Dispose();
			}
			state.CreateShaders(out vs0t.vs, out vs0t.ps, vs0t.vsb, vs0t.psb, 19, 7, 0, 0);
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0t.vs, vs0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 50 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1t.init_gd = state.DeviceUniqueIndex;
			vs1t.id_0 = state.GetNameUniqueID("ambient");
			vs1t.id_1 = state.GetNameUniqueID("v_lights");
			vs1t.id_2 = state.GetNameUniqueID("p_lights");
			vs1t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b13);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1t.gd))
			{
				return;
			}
			vs1t.gd = devIndex;
			if ((vs1t.vs != null))
			{
				vs1t.vs.Dispose();
				vs1t.ps.Dispose();
			}
			state.CreateShaders(out vs1t.vs, out vs1t.ps, vs1t.vsb, vs1t.psb, 45, 7, 0, 0);
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1t.vs, vs1t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 103 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3t.init_gd = state.DeviceUniqueIndex;
			vs3t.id_0 = state.GetNameUniqueID("ambient");
			vs3t.id_1 = state.GetNameUniqueID("v_lights");
			vs3t.id_2 = state.GetNameUniqueID("p_lights");
			vs3t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b14);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3t.gd))
			{
				return;
			}
			vs3t.gd = devIndex;
			if ((vs3t.vs != null))
			{
				vs3t.vs.Dispose();
				vs3t.ps.Dispose();
			}
			state.CreateShaders(out vs3t.vs, out vs3t.ps, vs3t.vsb, vs3t.psb, 88, 7, 0, 0);
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3t.vs, vs3t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 181 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6t.init_gd = state.DeviceUniqueIndex;
			vs6t.id_0 = state.GetNameUniqueID("ambient");
			vs6t.id_1 = state.GetNameUniqueID("v_lights");
			vs6t.id_2 = state.GetNameUniqueID("p_lights");
			vs6t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b15);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6t.gd))
			{
				return;
			}
			vs6t.gd = devIndex;
			if ((vs6t.vs != null))
			{
				vs6t.vs.Dispose();
				vs6t.ps.Dispose();
			}
			state.CreateShaders(out vs6t.vs, out vs6t.ps, vs6t.vsb, vs6t.psb, 154, 7, 0, 0);
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6t.vs, vs6t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 20 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0c.init_gd = state.DeviceUniqueIndex;
			vs0c.id_0 = state.GetNameUniqueID("ambient");
			vs0c.id_1 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b16);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0c.gd))
			{
				return;
			}
			vs0c.gd = devIndex;
			if ((vs0c.vs != null))
			{
				vs0c.vs.Dispose();
				vs0c.ps.Dispose();
			}
			state.CreateShaders(out vs0c.vs, out vs0c.ps, vs0c.vsb, vs0c.psb, 19, 1, 0, 0);
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0c.vs, vs0c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
			if ((name_uid == vs0c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
			if ((name_uid == vs0c.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 50 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1c.init_gd = state.DeviceUniqueIndex;
			vs1c.id_0 = state.GetNameUniqueID("ambient");
			vs1c.id_1 = state.GetNameUniqueID("v_lights");
			vs1c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b17);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1c.gd))
			{
				return;
			}
			vs1c.gd = devIndex;
			if ((vs1c.vs != null))
			{
				vs1c.vs.Dispose();
				vs1c.ps.Dispose();
			}
			state.CreateShaders(out vs1c.vs, out vs1c.ps, vs1c.vsb, vs1c.psb, 45, 1, 0, 0);
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1c.vs, vs1c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
			if ((name_uid == vs1c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
			if ((name_uid == vs1c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 103 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3c.init_gd = state.DeviceUniqueIndex;
			vs3c.id_0 = state.GetNameUniqueID("ambient");
			vs3c.id_1 = state.GetNameUniqueID("v_lights");
			vs3c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b18);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3c.gd))
			{
				return;
			}
			vs3c.gd = devIndex;
			if ((vs3c.vs != null))
			{
				vs3c.vs.Dispose();
				vs3c.ps.Dispose();
			}
			state.CreateShaders(out vs3c.vs, out vs3c.ps, vs3c.vsb, vs3c.psb, 88, 1, 0, 0);
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3c.vs, vs3c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
			if ((name_uid == vs3c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
			if ((name_uid == vs3c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 181 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6c.init_gd = state.DeviceUniqueIndex;
			vs6c.id_0 = state.GetNameUniqueID("ambient");
			vs6c.id_1 = state.GetNameUniqueID("v_lights");
			vs6c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b19);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6c.gd))
			{
				return;
			}
			vs6c.gd = devIndex;
			if ((vs6c.vs != null))
			{
				vs6c.vs.Dispose();
				vs6c.ps.Dispose();
			}
			state.CreateShaders(out vs6c.vs, out vs6c.ps, vs6c.vsb, vs6c.psb, 154, 1, 0, 0);
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6c.vs, vs6c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
			if ((name_uid == vs6c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
			if ((name_uid == vs6c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 20 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tc.init_gd = state.DeviceUniqueIndex;
			vs0tc.id_0 = state.GetNameUniqueID("ambient");
			vs0tc.id_1 = state.GetNameUniqueID("p_lights");
			vs0tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b20);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tc.gd))
			{
				return;
			}
			vs0tc.gd = devIndex;
			if ((vs0tc.vs != null))
			{
				vs0tc.vs.Dispose();
				vs0tc.ps.Dispose();
			}
			state.CreateShaders(out vs0tc.vs, out vs0tc.ps, vs0tc.vsb, vs0tc.psb, 19, 7, 0, 0);
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tc.vs, vs0tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 50 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tc.init_gd = state.DeviceUniqueIndex;
			vs1tc.id_0 = state.GetNameUniqueID("ambient");
			vs1tc.id_1 = state.GetNameUniqueID("v_lights");
			vs1tc.id_2 = state.GetNameUniqueID("p_lights");
			vs1tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b21);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tc.gd))
			{
				return;
			}
			vs1tc.gd = devIndex;
			if ((vs1tc.vs != null))
			{
				vs1tc.vs.Dispose();
				vs1tc.ps.Dispose();
			}
			state.CreateShaders(out vs1tc.vs, out vs1tc.ps, vs1tc.vsb, vs1tc.psb, 45, 7, 0, 0);
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tc.vs, vs1tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 103 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tc.init_gd = state.DeviceUniqueIndex;
			vs3tc.id_0 = state.GetNameUniqueID("ambient");
			vs3tc.id_1 = state.GetNameUniqueID("v_lights");
			vs3tc.id_2 = state.GetNameUniqueID("p_lights");
			vs3tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b22);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tc.gd))
			{
				return;
			}
			vs3tc.gd = devIndex;
			if ((vs3tc.vs != null))
			{
				vs3tc.vs.Dispose();
				vs3tc.ps.Dispose();
			}
			state.CreateShaders(out vs3tc.vs, out vs3tc.ps, vs3tc.vsb, vs3tc.psb, 88, 7, 0, 0);
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tc.vs, vs3tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 181 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tc.init_gd = state.DeviceUniqueIndex;
			vs6tc.id_0 = state.GetNameUniqueID("ambient");
			vs6tc.id_1 = state.GetNameUniqueID("v_lights");
			vs6tc.id_2 = state.GetNameUniqueID("p_lights");
			vs6tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b23);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tc.gd))
			{
				return;
			}
			vs6tc.gd = devIndex;
			if ((vs6tc.vs != null))
			{
				vs6tc.vs.Dispose();
				vs6tc.ps.Dispose();
			}
			state.CreateShaders(out vs6tc.vs, out vs6tc.ps, vs6tc.vsb, vs6tc.psb, 154, 7, 0, 0);
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tc.vs, vs6tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 35 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0nc.init_gd = state.DeviceUniqueIndex;
			vs0nc.id_0 = state.GetNameUniqueID("ambient");
			vs0nc.id_1 = state.GetNameUniqueID("p_lights");
			vs0nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b24);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0nc.gd))
			{
				return;
			}
			vs0nc.gd = devIndex;
			if ((vs0nc.vs != null))
			{
				vs0nc.vs.Dispose();
				vs0nc.ps.Dispose();
			}
			state.CreateShaders(out vs0nc.vs, out vs0nc.ps, vs0nc.vsb, vs0nc.psb, 32, 7, 0, 0);
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0nc.vs, vs0nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 65 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1nc.init_gd = state.DeviceUniqueIndex;
			vs1nc.id_0 = state.GetNameUniqueID("ambient");
			vs1nc.id_1 = state.GetNameUniqueID("v_lights");
			vs1nc.id_2 = state.GetNameUniqueID("p_lights");
			vs1nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b25);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1nc.gd))
			{
				return;
			}
			vs1nc.gd = devIndex;
			if ((vs1nc.vs != null))
			{
				vs1nc.vs.Dispose();
				vs1nc.ps.Dispose();
			}
			state.CreateShaders(out vs1nc.vs, out vs1nc.ps, vs1nc.vsb, vs1nc.psb, 58, 7, 0, 0);
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1nc.vs, vs1nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 118 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3nc.init_gd = state.DeviceUniqueIndex;
			vs3nc.id_0 = state.GetNameUniqueID("ambient");
			vs3nc.id_1 = state.GetNameUniqueID("v_lights");
			vs3nc.id_2 = state.GetNameUniqueID("p_lights");
			vs3nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b26);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3nc.gd))
			{
				return;
			}
			vs3nc.gd = devIndex;
			if ((vs3nc.vs != null))
			{
				vs3nc.vs.Dispose();
				vs3nc.ps.Dispose();
			}
			state.CreateShaders(out vs3nc.vs, out vs3nc.ps, vs3nc.vsb, vs3nc.psb, 101, 7, 0, 0);
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3nc.vs, vs3nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 196 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6nc.init_gd = state.DeviceUniqueIndex;
			vs6nc.id_0 = state.GetNameUniqueID("ambient");
			vs6nc.id_1 = state.GetNameUniqueID("v_lights");
			vs6nc.id_2 = state.GetNameUniqueID("p_lights");
			vs6nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b27);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6nc.gd))
			{
				return;
			}
			vs6nc.gd = devIndex;
			if ((vs6nc.vs != null))
			{
				vs6nc.vs.Dispose();
				vs6nc.ps.Dispose();
			}
			state.CreateShaders(out vs6nc.vs, out vs6nc.ps, vs6nc.vsb, vs6nc.psb, 167, 7, 0, 0);
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6nc.vs, vs6nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 35 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0n.init_gd = state.DeviceUniqueIndex;
			vs0n.id_0 = state.GetNameUniqueID("ambient");
			vs0n.id_1 = state.GetNameUniqueID("p_lights");
			vs0n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(10);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b28);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0n.gd))
			{
				return;
			}
			vs0n.gd = devIndex;
			if ((vs0n.vs != null))
			{
				vs0n.vs.Dispose();
				vs0n.ps.Dispose();
			}
			state.CreateShaders(out vs0n.vs, out vs0n.ps, vs0n.vsb, vs0n.psb, 32, 7, 0, 0);
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0n.vs, vs0n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 65 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1n.init_gd = state.DeviceUniqueIndex;
			vs1n.id_0 = state.GetNameUniqueID("ambient");
			vs1n.id_1 = state.GetNameUniqueID("v_lights");
			vs1n.id_2 = state.GetNameUniqueID("p_lights");
			vs1n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b29);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1n.gd))
			{
				return;
			}
			vs1n.gd = devIndex;
			if ((vs1n.vs != null))
			{
				vs1n.vs.Dispose();
				vs1n.ps.Dispose();
			}
			state.CreateShaders(out vs1n.vs, out vs1n.ps, vs1n.vsb, vs1n.psb, 58, 7, 0, 0);
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1n.vs, vs1n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 118 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3n.init_gd = state.DeviceUniqueIndex;
			vs3n.id_0 = state.GetNameUniqueID("ambient");
			vs3n.id_1 = state.GetNameUniqueID("v_lights");
			vs3n.id_2 = state.GetNameUniqueID("p_lights");
			vs3n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(22);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b30);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3n.gd))
			{
				return;
			}
			vs3n.gd = devIndex;
			if ((vs3n.vs != null))
			{
				vs3n.vs.Dispose();
				vs3n.ps.Dispose();
			}
			state.CreateShaders(out vs3n.vs, out vs3n.ps, vs3n.vsb, vs3n.psb, 101, 7, 0, 0);
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3n.vs, vs3n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,22};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 196 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6n.init_gd = state.DeviceUniqueIndex;
			vs6n.id_0 = state.GetNameUniqueID("ambient");
			vs6n.id_1 = state.GetNameUniqueID("v_lights");
			vs6n.id_2 = state.GetNameUniqueID("p_lights");
			vs6n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b31);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6n.gd))
			{
				return;
			}
			vs6n.gd = devIndex;
			if ((vs6n.vs != null))
			{
				vs6n.vs.Dispose();
				vs6n.ps.Dispose();
			}
			state.CreateShaders(out vs6n.vs, out vs6n.ps, vs6n.vsb, vs6n.psb, 167, 7, 0, 0);
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6n.vs, vs6n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 42 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0b.init_gd = state.DeviceUniqueIndex;
			vs0b.id_0 = state.GetNameUniqueID("ambient");
			vs0b.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0b.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b32);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0b.gd))
			{
				return;
			}
			vs0b.gd = devIndex;
			if ((vs0b.vs != null))
			{
				vs0b.vs.Dispose();
				vs0b.ps.Dispose();
			}
			state.CreateShaders(out vs0b.vs, out vs0b.ps, vs0b.vsb, vs0b.psb, 41, 1, 0, 0);
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0b.vs, vs0b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
			if ((name_uid == vs0b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
			if ((name_uid == vs0b.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0b.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 71 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1b.init_gd = state.DeviceUniqueIndex;
			vs1b.id_0 = state.GetNameUniqueID("ambient");
			vs1b.id_1 = state.GetNameUniqueID("v_lights");
			vs1b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b33);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1b.gd))
			{
				return;
			}
			vs1b.gd = devIndex;
			if ((vs1b.vs != null))
			{
				vs1b.vs.Dispose();
				vs1b.ps.Dispose();
			}
			state.CreateShaders(out vs1b.vs, out vs1b.ps, vs1b.vsb, vs1b.psb, 66, 1, 0, 0);
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1b.vs, vs1b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
			if ((name_uid == vs1b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
			if ((name_uid == vs1b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 124 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3b.init_gd = state.DeviceUniqueIndex;
			vs3b.id_0 = state.GetNameUniqueID("ambient");
			vs3b.id_1 = state.GetNameUniqueID("v_lights");
			vs3b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b34);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3b.gd))
			{
				return;
			}
			vs3b.gd = devIndex;
			if ((vs3b.vs != null))
			{
				vs3b.vs.Dispose();
				vs3b.ps.Dispose();
			}
			state.CreateShaders(out vs3b.vs, out vs3b.ps, vs3b.vsb, vs3b.psb, 109, 1, 0, 0);
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3b.vs, vs3b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
			if ((name_uid == vs3b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
			if ((name_uid == vs3b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 202 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6b.init_gd = state.DeviceUniqueIndex;
			vs6b.id_0 = state.GetNameUniqueID("ambient");
			vs6b.id_1 = state.GetNameUniqueID("v_lights");
			vs6b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b35);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6b.gd))
			{
				return;
			}
			vs6b.gd = devIndex;
			if ((vs6b.vs != null))
			{
				vs6b.vs.Dispose();
				vs6b.ps.Dispose();
			}
			state.CreateShaders(out vs6b.vs, out vs6b.ps, vs6b.vsb, vs6b.psb, 175, 1, 0, 0);
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6b.vs, vs6b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
			if ((name_uid == vs6b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
			if ((name_uid == vs6b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 42 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tb.init_gd = state.DeviceUniqueIndex;
			vs0tb.id_0 = state.GetNameUniqueID("ambient");
			vs0tb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0tb.id_2 = state.GetNameUniqueID("p_lights");
			vs0tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b36);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tb.gd))
			{
				return;
			}
			vs0tb.gd = devIndex;
			if ((vs0tb.vs != null))
			{
				vs0tb.vs.Dispose();
				vs0tb.ps.Dispose();
			}
			state.CreateShaders(out vs0tb.vs, out vs0tb.ps, vs0tb.vsb, vs0tb.psb, 41, 7, 0, 0);
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tb.vs, vs0tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0tb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 71 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tb.init_gd = state.DeviceUniqueIndex;
			vs1tb.id_0 = state.GetNameUniqueID("ambient");
			vs1tb.id_1 = state.GetNameUniqueID("v_lights");
			vs1tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1tb.id_3 = state.GetNameUniqueID("p_lights");
			vs1tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b37);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tb.gd))
			{
				return;
			}
			vs1tb.gd = devIndex;
			if ((vs1tb.vs != null))
			{
				vs1tb.vs.Dispose();
				vs1tb.ps.Dispose();
			}
			state.CreateShaders(out vs1tb.vs, out vs1tb.ps, vs1tb.vsb, vs1tb.psb, 66, 7, 0, 0);
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tb.vs, vs1tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 124 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tb.init_gd = state.DeviceUniqueIndex;
			vs3tb.id_0 = state.GetNameUniqueID("ambient");
			vs3tb.id_1 = state.GetNameUniqueID("v_lights");
			vs3tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3tb.id_3 = state.GetNameUniqueID("p_lights");
			vs3tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b38);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tb.gd))
			{
				return;
			}
			vs3tb.gd = devIndex;
			if ((vs3tb.vs != null))
			{
				vs3tb.vs.Dispose();
				vs3tb.ps.Dispose();
			}
			state.CreateShaders(out vs3tb.vs, out vs3tb.ps, vs3tb.vsb, vs3tb.psb, 109, 7, 0, 0);
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tb.vs, vs3tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 202 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tb.init_gd = state.DeviceUniqueIndex;
			vs6tb.id_0 = state.GetNameUniqueID("ambient");
			vs6tb.id_1 = state.GetNameUniqueID("v_lights");
			vs6tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6tb.id_3 = state.GetNameUniqueID("p_lights");
			vs6tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b39);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tb.gd))
			{
				return;
			}
			vs6tb.gd = devIndex;
			if ((vs6tb.vs != null))
			{
				vs6tb.vs.Dispose();
				vs6tb.ps.Dispose();
			}
			state.CreateShaders(out vs6tb.vs, out vs6tb.ps, vs6tb.vsb, vs6tb.psb, 175, 7, 0, 0);
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tb.vs, vs6tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 42 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0cb.init_gd = state.DeviceUniqueIndex;
			vs0cb.id_0 = state.GetNameUniqueID("ambient");
			vs0cb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0cb.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b40);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0cb.gd))
			{
				return;
			}
			vs0cb.gd = devIndex;
			if ((vs0cb.vs != null))
			{
				vs0cb.vs.Dispose();
				vs0cb.ps.Dispose();
			}
			state.CreateShaders(out vs0cb.vs, out vs0cb.ps, vs0cb.vsb, vs0cb.psb, 41, 1, 0, 0);
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0cb.vs, vs0cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
			if ((name_uid == vs0cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
			if ((name_uid == vs0cb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0cb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 71 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1cb.init_gd = state.DeviceUniqueIndex;
			vs1cb.id_0 = state.GetNameUniqueID("ambient");
			vs1cb.id_1 = state.GetNameUniqueID("v_lights");
			vs1cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b41);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1cb.gd))
			{
				return;
			}
			vs1cb.gd = devIndex;
			if ((vs1cb.vs != null))
			{
				vs1cb.vs.Dispose();
				vs1cb.ps.Dispose();
			}
			state.CreateShaders(out vs1cb.vs, out vs1cb.ps, vs1cb.vsb, vs1cb.psb, 66, 1, 0, 0);
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1cb.vs, vs1cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
			if ((name_uid == vs1cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
			if ((name_uid == vs1cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 124 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3cb.init_gd = state.DeviceUniqueIndex;
			vs3cb.id_0 = state.GetNameUniqueID("ambient");
			vs3cb.id_1 = state.GetNameUniqueID("v_lights");
			vs3cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b42);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3cb.gd))
			{
				return;
			}
			vs3cb.gd = devIndex;
			if ((vs3cb.vs != null))
			{
				vs3cb.vs.Dispose();
				vs3cb.ps.Dispose();
			}
			state.CreateShaders(out vs3cb.vs, out vs3cb.ps, vs3cb.vsb, vs3cb.psb, 109, 1, 0, 0);
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3cb.vs, vs3cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
			if ((name_uid == vs3cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
			if ((name_uid == vs3cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 202 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6cb.init_gd = state.DeviceUniqueIndex;
			vs6cb.id_0 = state.GetNameUniqueID("ambient");
			vs6cb.id_1 = state.GetNameUniqueID("v_lights");
			vs6cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b43);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6cb.gd))
			{
				return;
			}
			vs6cb.gd = devIndex;
			if ((vs6cb.vs != null))
			{
				vs6cb.vs.Dispose();
				vs6cb.ps.Dispose();
			}
			state.CreateShaders(out vs6cb.vs, out vs6cb.ps, vs6cb.vsb, vs6cb.psb, 175, 1, 0, 0);
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6cb.vs, vs6cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
			if ((name_uid == vs6cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
			if ((name_uid == vs6cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 42 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tcb.init_gd = state.DeviceUniqueIndex;
			vs0tcb.id_0 = state.GetNameUniqueID("ambient");
			vs0tcb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0tcb.id_2 = state.GetNameUniqueID("p_lights");
			vs0tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b44);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tcb.gd))
			{
				return;
			}
			vs0tcb.gd = devIndex;
			if ((vs0tcb.vs != null))
			{
				vs0tcb.vs.Dispose();
				vs0tcb.ps.Dispose();
			}
			state.CreateShaders(out vs0tcb.vs, out vs0tcb.ps, vs0tcb.vsb, vs0tcb.psb, 41, 7, 0, 0);
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tcb.vs, vs0tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0tcb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 71 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tcb.init_gd = state.DeviceUniqueIndex;
			vs1tcb.id_0 = state.GetNameUniqueID("ambient");
			vs1tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs1tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs1tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b45);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tcb.gd))
			{
				return;
			}
			vs1tcb.gd = devIndex;
			if ((vs1tcb.vs != null))
			{
				vs1tcb.vs.Dispose();
				vs1tcb.ps.Dispose();
			}
			state.CreateShaders(out vs1tcb.vs, out vs1tcb.ps, vs1tcb.vsb, vs1tcb.psb, 66, 7, 0, 0);
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tcb.vs, vs1tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 124 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tcb.init_gd = state.DeviceUniqueIndex;
			vs3tcb.id_0 = state.GetNameUniqueID("ambient");
			vs3tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs3tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs3tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b46);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tcb.gd))
			{
				return;
			}
			vs3tcb.gd = devIndex;
			if ((vs3tcb.vs != null))
			{
				vs3tcb.vs.Dispose();
				vs3tcb.ps.Dispose();
			}
			state.CreateShaders(out vs3tcb.vs, out vs3tcb.ps, vs3tcb.vsb, vs3tcb.psb, 109, 7, 0, 0);
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tcb.vs, vs3tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 202 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tcb.init_gd = state.DeviceUniqueIndex;
			vs6tcb.id_0 = state.GetNameUniqueID("ambient");
			vs6tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs6tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs6tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b47);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tcb.gd))
			{
				return;
			}
			vs6tcb.gd = devIndex;
			if ((vs6tcb.vs != null))
			{
				vs6tcb.vs.Dispose();
				vs6tcb.ps.Dispose();
			}
			state.CreateShaders(out vs6tcb.vs, out vs6tcb.ps, vs6tcb.vsb, vs6tcb.psb, 175, 7, 0, 0);
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tcb.vs, vs6tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 66 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ncb.init_gd = state.DeviceUniqueIndex;
			vs0ncb.id_0 = state.GetNameUniqueID("ambient");
			vs0ncb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0ncb.id_2 = state.GetNameUniqueID("p_lights");
			vs0ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b48);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ncb.gd))
			{
				return;
			}
			vs0ncb.gd = devIndex;
			if ((vs0ncb.vs != null))
			{
				vs0ncb.vs.Dispose();
				vs0ncb.ps.Dispose();
			}
			state.CreateShaders(out vs0ncb.vs, out vs0ncb.ps, vs0ncb.vsb, vs0ncb.psb, 61, 7, 0, 0);
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ncb.vs, vs0ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0ncb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 95 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1ncb.init_gd = state.DeviceUniqueIndex;
			vs1ncb.id_0 = state.GetNameUniqueID("ambient");
			vs1ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs1ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs1ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b49);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1ncb.gd))
			{
				return;
			}
			vs1ncb.gd = devIndex;
			if ((vs1ncb.vs != null))
			{
				vs1ncb.vs.Dispose();
				vs1ncb.ps.Dispose();
			}
			state.CreateShaders(out vs1ncb.vs, out vs1ncb.ps, vs1ncb.vsb, vs1ncb.psb, 86, 7, 0, 0);
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1ncb.vs, vs1ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 147 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3ncb.init_gd = state.DeviceUniqueIndex;
			vs3ncb.id_0 = state.GetNameUniqueID("ambient");
			vs3ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs3ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs3ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b50);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3ncb.gd))
			{
				return;
			}
			vs3ncb.gd = devIndex;
			if ((vs3ncb.vs != null))
			{
				vs3ncb.vs.Dispose();
				vs3ncb.ps.Dispose();
			}
			state.CreateShaders(out vs3ncb.vs, out vs3ncb.ps, vs3ncb.vsb, vs3ncb.psb, 130, 7, 0, 0);
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3ncb.vs, vs3ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 225 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6ncb.init_gd = state.DeviceUniqueIndex;
			vs6ncb.id_0 = state.GetNameUniqueID("ambient");
			vs6ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs6ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs6ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b51);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6ncb.gd))
			{
				return;
			}
			vs6ncb.gd = devIndex;
			if ((vs6ncb.vs != null))
			{
				vs6ncb.vs.Dispose();
				vs6ncb.ps.Dispose();
			}
			state.CreateShaders(out vs6ncb.vs, out vs6ncb.ps, vs6ncb.vsb, vs6ncb.psb, 196, 7, 0, 0);
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6ncb.vs, vs6ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 66 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0nb.init_gd = state.DeviceUniqueIndex;
			vs0nb.id_0 = state.GetNameUniqueID("ambient");
			vs0nb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0nb.id_2 = state.GetNameUniqueID("p_lights");
			vs0nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b52);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0nb.gd))
			{
				return;
			}
			vs0nb.gd = devIndex;
			if ((vs0nb.vs != null))
			{
				vs0nb.vs.Dispose();
				vs0nb.ps.Dispose();
			}
			state.CreateShaders(out vs0nb.vs, out vs0nb.ps, vs0nb.vsb, vs0nb.psb, 61, 7, 0, 0);
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0nb.vs, vs0nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0nb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 95 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1nb.init_gd = state.DeviceUniqueIndex;
			vs1nb.id_0 = state.GetNameUniqueID("ambient");
			vs1nb.id_1 = state.GetNameUniqueID("v_lights");
			vs1nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1nb.id_3 = state.GetNameUniqueID("p_lights");
			vs1nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b53);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1nb.gd))
			{
				return;
			}
			vs1nb.gd = devIndex;
			if ((vs1nb.vs != null))
			{
				vs1nb.vs.Dispose();
				vs1nb.ps.Dispose();
			}
			state.CreateShaders(out vs1nb.vs, out vs1nb.ps, vs1nb.vsb, vs1nb.psb, 86, 7, 0, 0);
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1nb.vs, vs1nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262148,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 147 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3nb.init_gd = state.DeviceUniqueIndex;
			vs3nb.id_0 = state.GetNameUniqueID("ambient");
			vs3nb.id_1 = state.GetNameUniqueID("v_lights");
			vs3nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3nb.id_3 = state.GetNameUniqueID("p_lights");
			vs3nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b54);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3nb.gd))
			{
				return;
			}
			vs3nb.gd = devIndex;
			if ((vs3nb.vs != null))
			{
				vs3nb.vs.Dispose();
				vs3nb.ps.Dispose();
			}
			state.CreateShaders(out vs3nb.vs, out vs3nb.ps, vs3nb.vsb, vs3nb.psb, 130, 7, 0, 0);
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3nb.vs, vs3nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262156,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 225 instruction slots used</para><para>PS: approximately 7 instruction slots used (2 texture, 5 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.vreg.Set(34, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 34, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6nb.init_gd = state.DeviceUniqueIndex;
			vs6nb.id_0 = state.GetNameUniqueID("ambient");
			vs6nb.id_1 = state.GetNameUniqueID("v_lights");
			vs6nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6nb.id_3 = state.GetNameUniqueID("p_lights");
			vs6nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(247);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b55);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6nb.gd))
			{
				return;
			}
			vs6nb.gd = devIndex;
			if ((vs6nb.vs != null))
			{
				vs6nb.vs.Dispose();
				vs6nb.ps.Dispose();
			}
			state.CreateShaders(out vs6nb.vs, out vs6nb.ps, vs6nb.vsb, vs6nb.psb, 196, 7, 0, 0);
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6nb.vs, vs6nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34,262357,-902006156,247};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 3 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps0.init_gd = state.DeviceUniqueIndex;
			ps0.id_0 = state.GetNameUniqueID("ambient");
			ps0.id_1 = state.GetNameUniqueID("v_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps0.gd))
			{
				return;
			}
			ps0.gd = devIndex;
			if ((ps0.vs != null))
			{
				ps0.vs.Dispose();
				ps0.ps.Dispose();
			}
			state.CreateShaders(out ps0.vs, out ps0.ps, ps0.vsb, ps0.psb, 14, 3, 0, 0);
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps0.vs, ps0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
			if ((name_uid == ps0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
			if ((name_uid == ps0.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 17 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1.init_gd = state.DeviceUniqueIndex;
			ps1.id_0 = state.GetNameUniqueID("ambient");
			ps1.id_1 = state.GetNameUniqueID("v_lights");
			ps1.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b57);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1.gd))
			{
				return;
			}
			ps1.gd = devIndex;
			if ((ps1.vs != null))
			{
				ps1.vs.Dispose();
				ps1.ps.Dispose();
			}
			state.CreateShaders(out ps1.vs, out ps1.ps, ps1.vsb, ps1.psb, 14, 15, 0, 0);
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps1.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1.vs, ps1.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
			if ((name_uid == ps1.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
			if ((name_uid == ps1.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 29 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2.init_gd = state.DeviceUniqueIndex;
			ps2.id_0 = state.GetNameUniqueID("ambient");
			ps2.id_1 = state.GetNameUniqueID("v_lights");
			ps2.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b58);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2.gd))
			{
				return;
			}
			ps2.gd = devIndex;
			if ((ps2.vs != null))
			{
				ps2.vs.Dispose();
				ps2.ps.Dispose();
			}
			state.CreateShaders(out ps2.vs, out ps2.ps, ps2.vsb, ps2.psb, 14, 27, 0, 0);
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps2.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2.vs, ps2.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
			if ((name_uid == ps2.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
			if ((name_uid == ps2.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 40 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3.init_gd = state.DeviceUniqueIndex;
			ps3.id_0 = state.GetNameUniqueID("ambient");
			ps3.id_1 = state.GetNameUniqueID("v_lights");
			ps3.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b59);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3.gd))
			{
				return;
			}
			ps3.gd = devIndex;
			if ((ps3.vs != null))
			{
				ps3.vs.Dispose();
				ps3.ps.Dispose();
			}
			state.CreateShaders(out ps3.vs, out ps3.ps, ps3.vsb, ps3.psb, 14, 38, 0, 0);
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps3.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3.vs, ps3.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
			if ((name_uid == ps3.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
			if ((name_uid == ps3.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 51 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4.init_gd = state.DeviceUniqueIndex;
			ps4.id_0 = state.GetNameUniqueID("ambient");
			ps4.id_1 = state.GetNameUniqueID("v_lights");
			ps4.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b60);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4.gd))
			{
				return;
			}
			ps4.gd = devIndex;
			if ((ps4.vs != null))
			{
				ps4.vs.Dispose();
				ps4.ps.Dispose();
			}
			state.CreateShaders(out ps4.vs, out ps4.ps, ps4.vsb, ps4.psb, 14, 49, 0, 0);
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps4.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4.vs, ps4.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
			if ((name_uid == ps4.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
			if ((name_uid == ps4.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 4 instruction slots used (1 texture, 3 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps0t.init_gd = state.DeviceUniqueIndex;
			ps0t.id_0 = state.GetNameUniqueID("ambient");
			ps0t.id_1 = state.GetNameUniqueID("v_lights");
			ps0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps0t.gd))
			{
				return;
			}
			ps0t.gd = devIndex;
			if ((ps0t.vs != null))
			{
				ps0t.vs.Dispose();
				ps0t.ps.Dispose();
			}
			state.CreateShaders(out ps0t.vs, out ps0t.ps, ps0t.vsb, ps0t.psb, 14, 4, 0, 0);
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps0t.vs, ps0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 19 instruction slots used (1 texture, 18 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1t.init_gd = state.DeviceUniqueIndex;
			ps1t.id_0 = state.GetNameUniqueID("ambient");
			ps1t.id_1 = state.GetNameUniqueID("v_lights");
			ps1t.id_2 = state.GetNameUniqueID("p_lights");
			ps1t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b61);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1t.gd))
			{
				return;
			}
			ps1t.gd = devIndex;
			if ((ps1t.vs != null))
			{
				ps1t.vs.Dispose();
				ps1t.ps.Dispose();
			}
			state.CreateShaders(out ps1t.vs, out ps1t.ps, ps1t.vsb, ps1t.psb, 14, 17, 0, 0);
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps1t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1t.vs, ps1t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 31 instruction slots used (1 texture, 30 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2t.init_gd = state.DeviceUniqueIndex;
			ps2t.id_0 = state.GetNameUniqueID("ambient");
			ps2t.id_1 = state.GetNameUniqueID("v_lights");
			ps2t.id_2 = state.GetNameUniqueID("p_lights");
			ps2t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b62);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2t.gd))
			{
				return;
			}
			ps2t.gd = devIndex;
			if ((ps2t.vs != null))
			{
				ps2t.vs.Dispose();
				ps2t.ps.Dispose();
			}
			state.CreateShaders(out ps2t.vs, out ps2t.ps, ps2t.vsb, ps2t.psb, 14, 29, 0, 0);
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps2t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2t.vs, ps2t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 42 instruction slots used (1 texture, 41 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3t.init_gd = state.DeviceUniqueIndex;
			ps3t.id_0 = state.GetNameUniqueID("ambient");
			ps3t.id_1 = state.GetNameUniqueID("v_lights");
			ps3t.id_2 = state.GetNameUniqueID("p_lights");
			ps3t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps3t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b63);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3t.gd))
			{
				return;
			}
			ps3t.gd = devIndex;
			if ((ps3t.vs != null))
			{
				ps3t.vs.Dispose();
				ps3t.ps.Dispose();
			}
			state.CreateShaders(out ps3t.vs, out ps3t.ps, ps3t.vsb, ps3t.psb, 14, 40, 0, 0);
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps3t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3t.vs, ps3t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 53 instruction slots used (1 texture, 52 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4t.init_gd = state.DeviceUniqueIndex;
			ps4t.id_0 = state.GetNameUniqueID("ambient");
			ps4t.id_1 = state.GetNameUniqueID("v_lights");
			ps4t.id_2 = state.GetNameUniqueID("p_lights");
			ps4t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps4t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b64);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4t.gd))
			{
				return;
			}
			ps4t.gd = devIndex;
			if ((ps4t.vs != null))
			{
				ps4t.vs.Dispose();
				ps4t.ps.Dispose();
			}
			state.CreateShaders(out ps4t.vs, out ps4t.ps, ps4t.vsb, ps4t.psb, 14, 51, 0, 0);
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps4t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4t.vs, ps4t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 24 instruction slots used (2 texture, 22 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1tn.init_gd = state.DeviceUniqueIndex;
			ps1tn.id_0 = state.GetNameUniqueID("ambient");
			ps1tn.id_1 = state.GetNameUniqueID("v_lights");
			ps1tn.id_2 = state.GetNameUniqueID("p_lights");
			ps1tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps1tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps1tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b65);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1tn.gd))
			{
				return;
			}
			ps1tn.gd = devIndex;
			if ((ps1tn.vs != null))
			{
				ps1tn.vs.Dispose();
				ps1tn.ps.Dispose();
			}
			state.CreateShaders(out ps1tn.vs, out ps1tn.ps, ps1tn.vsb, ps1tn.psb, 14, 23, 0, 0);
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps1tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1tn.vs, ps1tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps1tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps1tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 36 instruction slots used (2 texture, 34 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2tn.init_gd = state.DeviceUniqueIndex;
			ps2tn.id_0 = state.GetNameUniqueID("ambient");
			ps2tn.id_1 = state.GetNameUniqueID("v_lights");
			ps2tn.id_2 = state.GetNameUniqueID("p_lights");
			ps2tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps2tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps2tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b66);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2tn.gd))
			{
				return;
			}
			ps2tn.gd = devIndex;
			if ((ps2tn.vs != null))
			{
				ps2tn.vs.Dispose();
				ps2tn.ps.Dispose();
			}
			state.CreateShaders(out ps2tn.vs, out ps2tn.ps, ps2tn.vsb, ps2tn.psb, 14, 35, 0, 0);
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps2tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2tn.vs, ps2tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps2tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps2tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 47 instruction slots used (2 texture, 45 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3tn.init_gd = state.DeviceUniqueIndex;
			ps3tn.id_0 = state.GetNameUniqueID("ambient");
			ps3tn.id_1 = state.GetNameUniqueID("v_lights");
			ps3tn.id_2 = state.GetNameUniqueID("p_lights");
			ps3tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps3tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps3tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps3tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b67);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3tn.gd))
			{
				return;
			}
			ps3tn.gd = devIndex;
			if ((ps3tn.vs != null))
			{
				ps3tn.vs.Dispose();
				ps3tn.ps.Dispose();
			}
			state.CreateShaders(out ps3tn.vs, out ps3tn.ps, ps3tn.vsb, ps3tn.psb, 14, 46, 0, 0);
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps3tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3tn.vs, ps3tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps3tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps3tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 58 instruction slots used (2 texture, 56 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4tn.init_gd = state.DeviceUniqueIndex;
			ps4tn.id_0 = state.GetNameUniqueID("ambient");
			ps4tn.id_1 = state.GetNameUniqueID("v_lights");
			ps4tn.id_2 = state.GetNameUniqueID("p_lights");
			ps4tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps4tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps4tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps4tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b68);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4tn.gd))
			{
				return;
			}
			ps4tn.gd = devIndex;
			if ((ps4tn.vs != null))
			{
				ps4tn.vs.Dispose();
				ps4tn.ps.Dispose();
			}
			state.CreateShaders(out ps4tn.vs, out ps4tn.ps, ps4tn.vsb, ps4tn.psb, 14, 57, 0, 0);
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps4tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4tn.vs, ps4tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps4tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps4tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 32 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1s : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1s()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1s.init_gd = state.DeviceUniqueIndex;
			ps1s.id_0 = state.GetNameUniqueID("ambient");
			ps1s.id_1 = state.GetNameUniqueID("v_lights");
			ps1s.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b69);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1s.gd))
			{
				return;
			}
			ps1s.gd = devIndex;
			if ((ps1s.vs != null))
			{
				ps1s.vs.Dispose();
				ps1s.ps.Dispose();
			}
			state.CreateShaders(out ps1s.vs, out ps1s.ps, ps1s.vsb, ps1s.psb, 14, 26, 0, 0);
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps1s.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1s.vs, ps1s.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
			if ((name_uid == ps1s.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
			if ((name_uid == ps1s.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1s.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1s._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1s._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 55 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2s : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2s()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2s.init_gd = state.DeviceUniqueIndex;
			ps2s.id_0 = state.GetNameUniqueID("ambient");
			ps2s.id_1 = state.GetNameUniqueID("v_lights");
			ps2s.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b70);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2s.gd))
			{
				return;
			}
			ps2s.gd = devIndex;
			if ((ps2s.vs != null))
			{
				ps2s.vs.Dispose();
				ps2s.ps.Dispose();
			}
			state.CreateShaders(out ps2s.vs, out ps2s.ps, ps2s.vsb, ps2s.psb, 14, 43, 0, 0);
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps2s.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2s.vs, ps2s.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
			if ((name_uid == ps2s.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
			if ((name_uid == ps2s.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2s.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2s._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2s._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 34 instruction slots used (1 texture, 33 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1ts : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1ts()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1ts.init_gd = state.DeviceUniqueIndex;
			ps1ts.id_0 = state.GetNameUniqueID("ambient");
			ps1ts.id_1 = state.GetNameUniqueID("v_lights");
			ps1ts.id_2 = state.GetNameUniqueID("p_lights");
			ps1ts.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1ts.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b71);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1ts.gd))
			{
				return;
			}
			ps1ts.gd = devIndex;
			if ((ps1ts.vs != null))
			{
				ps1ts.vs.Dispose();
				ps1ts.ps.Dispose();
			}
			state.CreateShaders(out ps1ts.vs, out ps1ts.ps, ps1ts.vsb, ps1ts.psb, 14, 28, 0, 0);
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps1ts.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1ts.vs, ps1ts.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1ts.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1ts._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1ts._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 57 instruction slots used (1 texture, 56 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2ts : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2ts()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2ts.init_gd = state.DeviceUniqueIndex;
			ps2ts.id_0 = state.GetNameUniqueID("ambient");
			ps2ts.id_1 = state.GetNameUniqueID("v_lights");
			ps2ts.id_2 = state.GetNameUniqueID("p_lights");
			ps2ts.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2ts.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b72);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2ts.gd))
			{
				return;
			}
			ps2ts.gd = devIndex;
			if ((ps2ts.vs != null))
			{
				ps2ts.vs.Dispose();
				ps2ts.ps.Dispose();
			}
			state.CreateShaders(out ps2ts.vs, out ps2ts.ps, ps2ts.vsb, ps2ts.psb, 14, 45, 0, 0);
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps2ts.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2ts.vs, ps2ts.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2ts.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2ts._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2ts._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 40 instruction slots used (2 texture, 38 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1tns : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1tns()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1tns.init_gd = state.DeviceUniqueIndex;
			ps1tns.id_0 = state.GetNameUniqueID("ambient");
			ps1tns.id_1 = state.GetNameUniqueID("v_lights");
			ps1tns.id_2 = state.GetNameUniqueID("p_lights");
			ps1tns.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1tns.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps1tns.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps1tns.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b73);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1tns.gd))
			{
				return;
			}
			ps1tns.gd = devIndex;
			if ((ps1tns.vs != null))
			{
				ps1tns.vs.Dispose();
				ps1tns.ps.Dispose();
			}
			state.CreateShaders(out ps1tns.vs, out ps1tns.ps, ps1tns.vsb, ps1tns.psb, 14, 35, 0, 0);
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps1tns.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1tns.vs, ps1tns.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1tns.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps1tns.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps1tns.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1tns._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1tns._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 64 instruction slots used (2 texture, 62 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2tns : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2tns()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(8, 0F, 0F, 0F, 0F);
			this.vreg.Set(9, 0F, 0F, 0F, 0F);
			this.vreg.Set(10, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 10, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_8 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2tns.init_gd = state.DeviceUniqueIndex;
			ps2tns.id_0 = state.GetNameUniqueID("ambient");
			ps2tns.id_1 = state.GetNameUniqueID("v_lights");
			ps2tns.id_2 = state.GetNameUniqueID("p_lights");
			ps2tns.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2tns.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps2tns.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps2tns.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(34);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._b74);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2tns.gd))
			{
				return;
			}
			ps2tns.gd = devIndex;
			if ((ps2tns.vs != null))
			{
				ps2tns.vs.Dispose();
				ps2tns.ps.Dispose();
			}
			state.CreateShaders(out ps2tns.vs, out ps2tns.ps, ps2tns.vsb, ps2tns.psb, 14, 53, 0, 0);
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(9, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_8;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps2tns.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2tns.vs, ps2tns.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(8), ref this.v_8);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2tns.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps2tns.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps2tns.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2tns._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2tns._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,8,262145,1606226950,9,262145,1099918244,10,262168,699171593,34};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	internal sealed class @__pool
	{
		
		public static byte[] _b0 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,4,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,2,224,94,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,0,160,1,0,0,2,3,0,15,224,10,0,0,160,1,0,0,2,1,0,15,224,10,0,85,160,1,0,0,2,5,0,10,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b1 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,49,128,0,0,15,176,1,0,0,2,0,0,15,128,0,0,228,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b2 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,5,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,4,0,1,224,0,0,228,144,94,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,1,0,228,144,1,0,0,2,3,0,15,224,10,0,0,160,1,0,0,2,1,0,22,15,224,10,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b3 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,69,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,5,0,0,3,0,0,15,128,0,0,228,128,0,0,228,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b4 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,144,0,4,31,0,0,2,131,0,88,128,0,0,15,144,31,0,0,2,10,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,4,0,1,89,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,0,160,1,0,0,2,3,0,15,224,32,10,0,0,160,1,0,0,2,1,0,15,224,1,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b5 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,144,0,4,31,0,0,2,131,0,88,128,0,0,15,144,31,0,0,2,10,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,89,144,7,0,228,160,9,0,0,3,4,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,44,2,0,228,144,1,0,0,2,3,0,15,224,10,0,0,160,1,0,0,2,1,0,15,224,1,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b6 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,1,0,228,144,94,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,36,0,0,2,1,0,7,128,0,0,228,128,1,0,0,2,3,0,7,224,1,0,228,128,9,0,0,3,4,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,94,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,0,160,1,0,0,2,3,0,8,224,10,0,0,160,1,0,0,2,1,0,15,224,10,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b7 = new byte[] {20,0,2,255,255,1,0,0,2,0,8,15,128,15,0,228,160,255,255,0,0};
		
		public static byte[] _b8 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,2,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,2,0,2,128,0,0,228,144,94,1,0,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,0,0,228,128,0,0,228,128,8,0,0,3,3,0,95,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,96,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,0,228,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,11,0,0,3,1,97,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,6,0,3,0,0,8,128,131,0,98,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,99,0,0,2,3,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,14,0,0,160,1,0,0,2,3,0,8,224,14,0,0,160,1,0,0,2,1,0,15,224,14,0,85,160,1,0,0,2,12,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b9 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,94,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,0,3,1,0,2,128,1,0,228,144,1,0,228,160,4,0,0,4,0,0,7,128,3,0,95,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,0,4,128,1,0,228,144,2,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,0,96,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,22,0,0,160,10,0,0,3,2,97,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,5,0,22,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,99,0,0,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,100,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,101,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,102,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,103,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,104,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,105,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,4,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,77,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,22,0,0,160,1,0,0,2,3,0,8,224,22,0,0,160,1,0,0,2,1,0,15,224,22,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b10 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,94,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,2,0,0,3,1,0,95,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,96,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,97,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,228,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,3,0,255,128,8,0,42,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,98,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,99,0,228,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,100,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,101,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,102,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,103,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,104,255,128,32,0,0,3,0,0,8,128,2,0,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,105,8,128,1,0,255,128,34,0,85,160,8,0,0,3,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,106,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,107,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,108,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,109,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,110,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,111,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,112,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,113,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,114,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,4,115,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,34,0,0,160,1,0,0,2,3,0,8,224,34,0,0,160,1,0,0,2,1,0,15,224,20,34,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b11 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,1,0,228,144,1,0,228,160,94,8,0,0,3,0,0,4,128,1,0,228,144,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,36,0,0,2,1,0,7,128,0,0,228,128,1,0,0,2,3,0,7,224,1,0,228,128,9,0,0,3,4,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,95,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,10,0,0,160,1,0,0,2,1,0,15,224,10,0,85,160,1,0,0,2,5,11,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b12 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,101,144,1,8,15,160,1,0,0,2,0,0,1,128,15,0,170,160,1,0,0,2,0,0,2,128,15,0,85,160,66,0,0,3,1,0,15,128,0,0,228,128,1,8,228,160,1,0,0,2,2,0,3,128,15,0,228,160,66,0,0,3,0,0,15,128,2,0,228,128,0,8,228,160,5,0,0,3,0,0,15,128,1,0,228,128,0,0,228,128,1,0,0,2,0,8,15,128,0,0,228,128,4,255,255,0,0};
		
		public static byte[] _b13 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,2,0,1,128,0,0,228,144,0,0,228,160,94,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,0,0,95,228,128,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,96,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,0,228,128,1,0,228,128,1,0,0,2,4,97,0,7,224,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,4,0,0,4,1,0,8,128,5,0,18,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,99,0,0,2,3,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,14,0,0,160,1,0,0,2,1,0,15,224,14,0,85,160,1,0,0,2,12,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b14 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,94,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,0,3,1,0,2,128,1,0,228,144,1,0,95,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,0,4,128,1,0,228,144,2,0,228,160,4,96,0,0,4,4,0,7,128,0,0,228,128,0,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,11,0,0,3,1,0,8,128,1,97,0,0,128,22,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,3,0,0,34,1,128,0,0,228,128,2,0,228,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,99,0,0,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,100,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,101,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,102,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,103,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,104,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,105,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,4,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,77,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,22,0,0,160,1,0,0,2,1,0,15,224,22,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b15 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,94,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,0,0,95,228,128,0,0,228,128,2,0,0,3,1,0,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,96,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,97,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,228,128,1,0,255,128,5,0,0,3,0,0,54,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,98,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,99,0,228,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,100,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,101,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,102,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,103,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,104,255,128,32,0,0,3,0,0,8,128,2,0,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,105,8,128,1,0,255,128,34,0,85,160,8,0,0,3,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,106,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,107,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,108,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,109,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,110,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,111,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,112,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,113,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,114,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,4,115,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,34,0,0,160,1,0,0,2,1,0,15,224,20,34,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b16 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,144,0,4,31,0,0,2,131,0,88,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,1,0,228,89,144,1,0,228,160,8,0,0,3,0,0,4,128,1,0,228,144,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,36,0,0,2,1,0,7,128,0,0,228,128,1,0,0,2,3,0,7,224,1,0,228,128,9,0,0,3,4,0,1,224,0,0,228,144,90,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,0,160,1,0,0,2,3,0,8,224,10,0,0,160,1,0,26,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b17 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,2,0,1,128,0,0,228,144,0,0,228,160,94,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,0,0,95,228,128,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,96,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,0,228,128,1,0,228,128,1,0,0,2,4,97,0,7,224,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,4,0,0,4,1,0,8,128,5,0,18,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,99,0,0,2,3,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,14,0,0,160,1,0,0,2,3,0,8,224,14,0,0,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,12,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b18 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,94,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,0,3,1,0,2,128,1,0,228,144,1,0,95,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,0,4,128,1,0,228,144,2,0,228,160,4,96,0,0,4,4,0,7,128,0,0,228,128,0,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,11,0,0,3,1,0,8,128,1,97,0,0,128,22,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,3,0,0,34,1,128,0,0,228,128,2,0,228,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,99,0,0,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,100,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,101,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,102,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,103,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,104,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,105,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,4,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,77,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,22,0,0,160,1,0,0,2,3,0,8,224,22,0,0,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b19 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,94,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,0,0,95,228,128,0,0,228,128,2,0,0,3,1,0,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,96,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,97,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,228,128,1,0,255,128,5,0,0,3,0,0,54,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,98,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,99,0,228,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,100,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,101,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,102,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,103,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,104,255,128,32,0,0,3,0,0,8,128,2,0,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,105,8,128,1,0,255,128,34,0,85,160,8,0,0,3,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,106,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,107,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,108,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,109,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,110,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,111,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,112,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,113,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,114,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,4,115,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,34,0,0,160,1,0,0,2,3,0,8,224,34,0,0,160,1,0,0,2,1,0,15,224,20,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b20 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,144,0,4,31,0,0,2,131,0,88,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,128,1,0,228,144,0,0,228,89,160,8,0,0,3,0,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,1,0,228,144,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,36,0,0,2,1,0,7,128,0,0,228,128,1,0,0,2,3,0,7,224,1,0,228,128,90,9,0,0,3,4,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,4,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,4,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,38,0,2,3,0,8,224,10,0,0,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b21 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,94,2,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,95,228,160,8,0,0,3,5,0,1,128,0,0,228,128,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,96,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,97,0,228,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,30,228,128,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,99,0,0,2,3,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,0,8,224,14,0,0,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,12,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b22 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,94,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,95,0,3,1,0,2,128,1,0,228,144,1,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,96,0,4,128,1,0,228,144,2,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,0,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,97,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,22,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,46,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,98,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,99,0,0,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,100,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,101,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,102,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,103,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,104,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,105,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,4,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,77,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,0,8,224,22,0,0,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b23 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,94,0,0,8,192,0,0,228,144,7,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,4,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,95,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,2,0,0,3,1,0,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,96,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,97,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,66,228,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,98,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,99,0,228,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,100,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,101,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,102,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,103,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,104,255,128,32,0,0,3,0,0,8,128,2,0,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,105,8,128,1,0,255,128,34,0,85,160,8,0,0,3,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,106,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,107,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,108,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,109,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,110,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,111,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,112,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,113,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,114,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,4,115,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,0,8,224,34,0,0,160,1,0,0,2,1,0,15,224,20,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b24 = new byte[] {12,0,2,254,255,81,0,0,5,10,0,15,160,144,0,4,31,0,0,2,131,0,88,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,89,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,1,0,228,144,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,90,36,0,0,2,3,0,7,128,0,0,228,128,1,0,0,2,4,0,7,224,3,0,228,128,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,8,0,91,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,0,0,228,128,1,0,0,2,6,92,0,7,224,3,0,228,128,9,0,0,3,3,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,5,67,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,10,0,0,160,1,0,0,2,5,0,8,224,10,0,0,160,1,0,0,2,6,0,8,224,10,0,0,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b25 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,94,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,0,0,1,128,1,0,14,228,128,1,0,228,128,7,0,0,2,0,0,8,128,131,0,95,128,8,0,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,9,0,0,3,2,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,2,0,2,128,0,0,228,144,1,0,96,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,36,0,0,2,6,0,7,128,0,0,228,128,1,0,0,2,6,0,7,224,6,0,228,128,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,0,0,228,128,0,0,228,128,8,0,97,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,98,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,0,228,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,11,0,0,3,1,99,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,4,0,0,8,128,131,0,100,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,101,2,4,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,14,0,0,160,1,0,0,2,5,0,8,224,32,14,0,0,160,1,0,0,2,6,0,8,224,14,0,0,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b26 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,94,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,95,228,128,1,0,228,128,8,0,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,8,0,7,128,0,0,228,128,1,96,0,0,2,6,0,7,224,8,0,228,128,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,0,3,1,97,0,2,128,1,0,228,144,1,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,0,4,128,1,0,98,228,144,2,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,0,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,11,0,0,3,99,1,0,8,128,1,0,0,128,22,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,37,3,0,0,1,128,0,0,228,128,2,0,228,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,100,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,0,0,101,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,102,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,103,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,104,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,105,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,106,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,107,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,3,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,85,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,22,0,0,160,1,0,0,2,5,0,8,224,22,0,0,160,1,0,0,2,6,0,8,224,22,0,0,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b27 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,94,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,95,228,128,1,0,228,128,8,0,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,9,0,7,128,0,0,228,128,1,96,0,0,2,6,0,7,224,9,0,228,128,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,8,97,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,2,0,0,3,1,0,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,98,2,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,99,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,228,128,1,0,255,128,5,0,0,57,3,0,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,100,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,0,228,101,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,102,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,103,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,104,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,105,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,106,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,8,0,0,3,107,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,108,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,109,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,110,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,111,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,112,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,113,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,114,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,115,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,116,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,3,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,117,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,34,0,0,160,1,0,0,2,5,0,8,224,34,0,0,160,1,0,0,2,6,0,8,224,34,0,0,160,1,0,0,2,7,0,15,224,8,8,0,228,160,255,255,0,0};
		
		public static byte[] _b28 = new byte[] {16,0,2,254,255,81,0,0,5,10,0,15,160,0,0,128,63,140,0,4,31,0,0,2,131,0,92,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,8,0,0,3,0,0,1,93,128,1,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,1,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,1,0,228,144,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,36,0,0,2,3,0,7,128,0,0,228,128,1,0,0,2,4,0,7,224,94,3,0,228,128,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,95,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,0,0,228,128,1,0,0,2,6,0,7,224,3,0,228,128,9,0,0,3,3,0,1,224,0,0,228,144,0,0,228,160,9,0,0,3,3,96,0,2,224,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,224,0,0,228,144,2,0,228,160,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,10,0,0,160,1,0,0,2,4,0,8,224,10,0,85,160,1,0,0,2,5,35,0,8,224,10,0,85,160,1,0,0,2,6,0,8,224,10,0,85,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b29 = new byte[] {12,0,2,254,255,81,0,0,5,14,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,94,0,0,228,144,6,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,2,8,128,131,0,95,128,8,0,0,3,0,0,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,9,0,0,3,2,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,2,0,2,128,0,0,228,144,1,0,96,228,160,9,0,0,3,2,0,4,128,0,0,228,144,2,0,228,160,36,0,0,2,6,0,7,128,0,0,228,128,1,0,0,2,6,0,7,224,6,0,228,128,4,0,0,4,0,0,7,128,2,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,2,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,0,0,228,128,0,0,228,128,8,0,97,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,3,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,98,128,1,0,228,144,1,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,3,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,3,0,1,128,3,0,228,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,11,0,0,3,1,99,0,8,128,3,0,0,128,14,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,4,0,0,8,128,131,0,100,128,14,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,101,2,4,0,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,14,0,85,160,1,0,0,2,4,0,8,224,14,0,0,160,1,0,0,2,5,0,8,224,32,14,0,0,160,1,0,0,2,6,0,8,224,14,0,0,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b30 = new byte[] {12,0,2,254,255,81,0,0,5,22,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,94,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,0,0,95,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,8,0,7,128,0,0,228,128,1,0,0,2,6,0,7,224,8,0,228,128,9,96,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,8,0,0,3,1,0,1,128,1,0,228,144,0,0,228,160,9,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,8,0,0,3,1,0,2,128,1,0,228,144,1,0,228,160,4,97,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,3,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,0,228,128,36,0,0,2,5,0,7,128,2,0,228,128,7,0,0,2,0,0,8,128,6,0,0,128,8,0,0,3,1,0,4,128,1,0,228,144,2,0,228,160,4,0,0,4,4,0,98,7,128,0,0,228,128,0,0,255,128,5,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,22,0,0,160,99,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,25,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,11,0,0,3,0,0,8,128,131,0,100,128,22,0,0,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,0,0,7,128,0,0,255,128,12,0,228,160,7,0,0,2,0,0,8,128,7,0,0,101,128,4,0,0,4,0,0,7,128,11,0,228,160,1,0,255,128,0,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,102,1,0,8,128,4,0,0,128,22,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,103,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,22,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,104,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,16,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,15,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,105,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,0,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,106,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,107,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,1,0,0,2,3,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,85,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,22,0,85,160,1,0,0,2,4,0,8,224,22,0,0,160,1,0,0,2,5,0,8,224,22,0,0,160,1,0,0,2,6,0,8,224,22,0,0,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b31 = new byte[] {12,0,2,254,255,81,0,0,5,34,0,15,160,134,0,2,128,63,136,0,4,31,0,0,2,131,0,93,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,9,0,0,3,0,0,1,192,0,0,228,144,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,144,5,0,228,160,9,0,0,3,0,0,4,192,94,0,0,228,144,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,144,7,0,228,160,8,0,0,3,1,0,1,128,2,0,228,144,0,0,228,160,8,0,0,3,1,0,2,128,2,0,228,144,1,0,228,160,8,0,0,3,1,0,4,128,2,0,228,144,2,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,0,0,95,1,128,3,0,228,144,0,0,228,160,8,0,0,3,0,0,2,128,3,0,228,144,1,0,228,160,8,0,0,3,0,0,4,128,3,0,228,144,2,0,228,160,7,0,0,2,0,0,8,128,2,0,0,128,5,0,0,3,5,0,7,224,1,0,228,128,0,0,255,128,36,0,0,2,9,0,7,128,0,0,228,128,1,0,0,2,6,0,7,224,9,0,228,128,9,96,0,0,3,3,0,1,128,0,0,228,144,0,0,228,160,9,0,0,3,3,0,2,128,0,0,228,144,1,0,228,160,9,0,0,3,3,0,4,128,0,0,228,144,2,0,228,160,9,0,0,3,3,0,8,224,0,0,228,144,3,0,228,160,4,0,0,4,0,0,7,128,3,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,0,0,228,128,0,97,0,228,128,2,0,0,3,1,0,7,128,3,0,228,129,8,0,228,160,7,0,0,2,1,0,8,128,6,0,0,128,36,0,0,2,5,0,7,128,1,0,228,128,4,0,0,4,2,0,7,128,0,0,228,128,1,0,255,128,5,0,228,128,8,0,0,3,4,0,1,128,1,0,228,144,0,0,228,160,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,160,8,0,98,0,3,4,0,4,128,1,0,228,144,2,0,228,160,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,4,0,228,128,6,0,0,2,0,0,8,128,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,2,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,99,13,0,0,160,10,0,0,3,3,0,8,128,2,0,255,128,34,0,85,160,4,0,0,4,2,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,0,0,7,128,0,0,228,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,3,0,255,45,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,4,0,0,4,1,0,7,128,3,0,228,128,14,0,255,161,14,0,228,160,11,0,0,3,1,0,8,128,131,0,100,128,34,0,0,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,7,0,0,2,1,0,8,128,7,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,12,0,228,101,160,36,0,0,2,4,0,7,128,6,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,102,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,103,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,18,0,255,161,18,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,16,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,104,0,228,128,4,0,0,4,4,0,7,128,15,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,105,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,21,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,106,255,128,19,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,22,0,255,161,22,0,228,160,10,0,0,3,1,0,8,128,1,0,255,128,34,0,85,160,8,0,0,3,107,8,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,255,128,7,0,0,2,1,0,8,128,8,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,20,0,228,160,4,0,0,4,7,0,7,128,1,0,228,128,1,0,255,128,5,0,228,128,4,0,0,4,6,0,7,128,19,0,228,160,0,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,7,0,228,108,128,2,0,0,3,0,0,7,128,0,0,228,128,6,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,4,0,0,128,34,0,0,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,109,160,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,1,0,8,128,8,0,0,128,25,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,34,0,0,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,110,1,0,255,128,34,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,3,0,228,128,26,0,255,161,26,0,228,160,5,0,0,3,4,0,7,128,1,0,255,128,24,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,4,0,0,4,4,0,7,128,23,0,228,160,0,0,255,128,4,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,2,0,111,0,3,0,0,7,128,0,0,228,128,4,0,228,128,4,0,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,4,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,4,0,0,4,0,112,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,11,113,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,4,0,0,4,1,0,7,128,3,0,228,128,30,0,255,161,30,0,228,160,10,0,0,3,0,0,8,128,0,0,255,128,34,0,85,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,0,0,255,128,7,0,0,2,0,0,8,128,7,0,0,128,5,0,0,3,4,0,7,128,2,0,255,128,28,0,228,160,4,0,114,0,4,6,0,7,128,1,0,228,128,0,0,255,128,5,0,228,128,4,0,0,4,5,0,7,128,27,0,228,160,1,0,255,128,4,0,228,128,36,0,0,2,4,0,7,128,6,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,5,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,34,0,0,160,115,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,34,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,7,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,34,0,0,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,116,3,1,0,8,128,0,0,255,128,34,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,1,0,0,2,3,0,7,224,3,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,117,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,34,0,85,160,1,0,0,2,4,0,8,224,34,0,0,160,1,0,0,2,5,0,8,224,34,0,0,160,1,0,0,2,6,0,8,224,34,0,0,160,1,0,0,2,7,0,15,224,8,8,0,228,160,255,255,0,0};
		
		public static byte[] _b32 = new byte[] {20,0,2,254,255,81,0,0,5,10,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,1,0,0,128,2,0,15,144,31,0,0,2,2,0,0,128,3,0,15,144,5,0,0,3,0,0,15,128,3,0,228,144,10,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,5,128,34,32,228,160,131,0,97,176,2,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,2,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,2,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,2,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,2,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,2,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,10,0,85,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,100,1,0,228,128,2,0,228,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,128,3,0,228,128,101,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,36,0,0,2,0,0,7,128,1,0,228,128,1,0,0,2,3,0,7,224,0,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,170,160,1,0,0,2,3,35,0,8,224,10,0,170,160,1,0,0,2,1,0,15,224,10,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b33 = new byte[] {20,0,2,254,255,81,0,0,5,14,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,1,0,0,128,2,0,15,144,31,0,0,2,2,0,0,128,3,0,15,144,5,0,0,3,0,0,15,128,3,0,228,144,14,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,5,128,34,32,228,160,131,0,97,176,2,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,2,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,2,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,2,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,2,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,2,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,14,0,85,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,100,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,1,0,228,128,2,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,101,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,19,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,102,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,99,0,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,14,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,103,128,14,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,3,0,104,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,14,0,170,160,1,0,0,2,3,0,8,224,14,0,170,160,1,0,0,2,1,0,15,224,14,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b34 = new byte[] {20,0,2,254,255,81,0,0,5,22,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,1,0,0,128,2,0,15,144,31,0,0,2,2,0,0,128,3,0,15,144,5,0,0,3,0,0,15,128,3,0,228,144,22,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,5,128,34,32,228,160,131,0,97,176,2,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,5,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,2,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,2,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,2,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,22,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,5,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,8,0,0,3,3,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,5,0,228,128,1,0,228,160,4,0,0,4,101,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,8,0,0,3,3,0,4,128,5,0,228,128,2,0,228,160,4,0,0,4,5,0,7,128,1,0,228,128,1,102,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,22,0,170,160,6,0,0,2,1,0,8,128,1,0,255,103,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,104,0,3,1,0,8,128,1,0,0,128,22,0,170,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,22,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,105,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,106,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,22,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,67,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,107,128,22,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,108,7,128,5,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,109,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,110,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,83,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,22,0,170,160,1,0,0,2,3,0,8,224,22,0,170,160,1,0,0,2,1,0,15,224,22,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b35 = new byte[] {20,0,2,254,255,81,0,0,5,247,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,1,0,0,128,2,0,15,144,31,0,0,2,2,0,0,128,3,0,15,144,5,0,0,3,0,0,15,128,3,0,228,144,247,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,5,128,34,32,228,160,131,0,97,176,2,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,4,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,2,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,2,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,2,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,2,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,2,0,170,144,0,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,2,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,247,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,101,4,0,228,128,1,0,228,160,8,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,102,0,0,2,2,0,7,128,3,0,228,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,247,0,170,103,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,104,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,247,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,6,0,0,2,1,0,8,128,0,0,105,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,106,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,107,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,108,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,109,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,247,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,4,0,0,4,6,0,7,128,3,110,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,111,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,112,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,113,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,114,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,115,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,116,1,0,8,128,5,0,0,128,247,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,20,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,117,128,247,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,118,0,0,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,247,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,119,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,247,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,120,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,247,43,0,170,160,1,0,0,2,3,0,8,224,247,0,170,160,1,0,0,2,1,0,15,224,247,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b36 = new byte[] {20,0,2,254,255,81,0,0,5,10,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,10,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,3,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,3,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,10,0,85,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,100,1,0,228,128,2,0,228,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,128,3,0,228,128,101,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,36,0,0,2,0,0,7,128,1,0,228,128,1,0,0,2,3,0,7,224,0,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,35,0,8,224,10,0,170,160,1,0,0,2,1,0,15,224,10,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b37 = new byte[] {20,0,2,254,255,81,0,0,5,14,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,14,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,3,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,3,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,14,0,85,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,100,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,1,0,228,128,2,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,101,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,19,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,102,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,99,0,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,14,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,103,128,14,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,3,0,104,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,14,0,170,160,1,0,0,2,1,0,15,224,14,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b38 = new byte[] {20,0,2,254,255,81,0,0,5,22,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,22,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,5,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,3,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,22,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,5,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,8,0,0,3,3,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,5,0,228,128,1,0,228,160,4,0,0,4,101,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,8,0,0,3,3,0,4,128,5,0,228,128,2,0,228,160,4,0,0,4,5,0,7,128,1,0,228,128,1,102,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,22,0,170,160,6,0,0,2,1,0,8,128,1,0,255,103,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,104,0,3,1,0,8,128,1,0,0,128,22,0,170,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,22,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,105,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,106,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,22,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,67,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,107,128,22,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,108,7,128,5,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,109,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,110,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,83,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,0,228,144,1,0,0,2,3,0,8,224,22,0,170,160,1,0,0,2,1,0,15,224,22,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b39 = new byte[] {20,0,2,254,255,81,0,0,5,247,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,5,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,247,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,4,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,3,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,247,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,101,4,0,228,128,1,0,228,160,8,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,102,0,0,2,2,0,7,128,3,0,228,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,247,0,170,103,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,104,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,247,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,6,0,0,2,1,0,8,128,0,0,105,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,106,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,107,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,108,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,109,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,247,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,4,0,0,4,6,0,7,128,3,110,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,111,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,112,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,113,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,114,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,115,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,116,1,0,8,128,5,0,0,128,247,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,20,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,117,128,247,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,118,0,0,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,247,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,119,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,247,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,120,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,2,43,0,228,144,1,0,0,2,3,0,8,224,247,0,170,160,1,0,0,2,1,0,15,224,247,0,85,160,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b40 = new byte[] {20,0,2,254,255,81,0,0,5,10,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,10,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,3,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,3,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,10,0,85,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,100,1,0,228,128,2,0,228,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,128,3,0,228,128,101,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,36,0,0,2,0,0,7,128,1,0,228,128,1,0,0,2,3,0,7,224,0,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,10,0,170,160,1,0,0,2,3,35,0,8,224,10,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b41 = new byte[] {20,0,2,254,255,81,0,0,5,14,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,14,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,3,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,3,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,14,0,85,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,100,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,1,0,228,128,2,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,101,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,19,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,102,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,99,0,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,14,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,103,128,14,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,3,0,104,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,14,0,170,160,1,0,0,2,3,0,8,224,14,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b42 = new byte[] {20,0,2,254,255,81,0,0,5,22,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,22,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,5,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,3,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,22,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,5,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,8,0,0,3,3,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,5,0,228,128,1,0,228,160,4,0,0,4,101,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,8,0,0,3,3,0,4,128,5,0,228,128,2,0,228,160,4,0,0,4,5,0,7,128,1,0,228,128,1,102,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,22,0,170,160,6,0,0,2,1,0,8,128,1,0,255,103,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,104,0,3,1,0,8,128,1,0,0,128,22,0,170,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,22,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,105,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,106,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,22,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,67,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,107,128,22,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,108,7,128,5,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,109,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,110,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,83,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,22,0,170,160,1,0,0,2,3,0,8,224,22,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b43 = new byte[] {20,0,2,254,255,81,0,0,5,247,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,1,0,0,128,3,0,15,144,31,0,0,2,2,0,0,128,4,0,15,144,5,0,0,3,0,0,15,128,4,0,228,144,247,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,34,32,228,17,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,3,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,4,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,3,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,3,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,3,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,3,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,3,0,170,144,0,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,3,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,247,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,101,4,0,228,128,1,0,228,160,8,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,102,0,0,2,2,0,7,128,3,0,228,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,247,0,170,103,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,104,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,247,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,6,0,0,2,1,0,8,128,0,0,105,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,106,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,107,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,108,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,109,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,247,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,4,0,0,4,6,0,7,128,3,110,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,111,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,112,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,113,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,114,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,115,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,116,1,0,8,128,5,0,0,128,247,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,20,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,117,128,247,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,118,0,0,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,247,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,119,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,247,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,120,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,247,43,0,170,160,1,0,0,2,3,0,8,224,247,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b44 = new byte[] {20,0,2,254,255,81,0,0,5,10,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,31,0,0,2,1,0,0,128,4,0,15,144,31,0,0,2,2,0,0,128,5,0,15,144,5,0,0,3,0,0,15,128,5,0,228,144,10,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,29,4,0,0,15,128,4,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,4,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,4,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,4,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,4,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,4,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,4,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,10,0,85,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,100,1,0,228,128,2,0,228,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,128,3,0,228,128,101,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,36,0,0,2,0,0,7,128,1,0,228,128,1,0,0,2,3,0,7,224,0,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,35,0,8,224,10,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b45 = new byte[] {20,0,2,254,255,81,0,0,5,14,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,31,0,0,2,1,0,0,128,4,0,15,144,31,0,0,2,2,0,0,128,5,0,15,144,5,0,0,3,0,0,15,128,5,0,228,144,14,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,29,4,0,0,15,128,4,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,4,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,1,0,1,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,0,0,228,128,5,0,0,4,0,0,15,128,24,4,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,131,0,65,176,4,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,2,0,15,128,35,32,228,160,0,0,170,176,4,0,170,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,4,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,4,0,255,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,9,0,0,3,1,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,8,99,0,0,3,3,0,2,128,1,0,228,144,2,0,228,128,9,0,0,3,1,0,4,128,0,0,228,144,0,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,0,0,228,128,1,0,0,2,1,0,8,128,14,0,85,160,9,0,0,3,0,0,8,128,1,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,1,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,100,1,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,1,0,228,128,2,0,228,160,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,101,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,19,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,102,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,99,0,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,14,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,14,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,103,128,14,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,14,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,3,0,104,7,224,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,0,8,224,14,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b46 = new byte[] {20,0,2,254,255,81,0,0,5,22,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,31,0,0,2,1,0,0,128,4,0,15,144,31,0,0,2,2,0,0,128,5,0,15,144,5,0,0,3,0,0,15,128,5,0,228,144,22,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,29,4,0,0,15,128,4,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,4,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,5,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,4,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,4,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,4,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,22,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,5,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,8,0,0,3,3,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,5,0,228,128,1,0,228,160,4,0,0,4,101,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,8,0,0,3,3,0,4,128,5,0,228,128,2,0,228,160,4,0,0,4,5,0,7,128,1,0,228,128,1,102,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,22,0,170,160,6,0,0,2,1,0,8,128,1,0,255,103,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,104,0,3,1,0,8,128,1,0,0,128,22,0,170,160,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,22,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,105,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,106,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,22,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,67,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,107,128,22,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,22,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,108,7,128,5,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,22,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,22,0,85,160,4,0,0,4,0,0,109,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,22,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,22,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,110,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,83,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,0,228,144,1,0,0,2,3,0,8,224,22,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b47 = new byte[] {20,0,2,254,255,81,0,0,5,247,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,10,0,0,128,2,0,15,144,31,0,0,2,5,0,0,128,3,0,15,144,31,0,0,2,1,0,0,128,4,0,15,144,31,0,0,2,2,0,0,128,5,0,15,144,5,0,0,3,0,0,15,128,5,0,228,144,247,0,0,160,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,29,4,0,0,15,128,4,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,4,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,4,0,0,5,1,0,15,128,34,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,2,0,1,128,0,0,228,144,1,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,35,32,228,160,0,0,85,176,8,0,0,3,24,4,0,1,128,1,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,35,32,228,160,131,0,89,176,4,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,5,0,0,4,0,0,15,128,4,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,4,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,4,0,0,144,0,0,228,128,9,0,0,3,2,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,4,0,170,144,0,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,1,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,4,0,255,144,0,0,228,128,9,0,0,3,2,0,4,128,0,99,0,228,144,1,0,228,128,1,0,0,2,2,0,8,128,247,0,85,160,9,0,0,3,0,0,8,128,2,0,228,128,3,0,228,160,9,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,100,9,0,0,3,0,0,1,192,0,0,228,128,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,4,0,15,224,0,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,101,4,0,228,128,1,0,228,160,8,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,102,0,0,2,2,0,7,128,3,0,228,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,247,0,170,103,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,104,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,247,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,6,0,0,2,1,0,8,128,0,0,105,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,106,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,107,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,108,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,109,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,247,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,4,0,0,4,6,0,7,128,3,110,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,111,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,112,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,113,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,247,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,247,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,247,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,247,0,85,160,5,0,0,114,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,115,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,116,1,0,8,128,5,0,0,128,247,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,20,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,117,128,247,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,247,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,118,0,0,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,247,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,247,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,119,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,247,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,247,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,120,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,3,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,3,43,0,228,144,1,0,0,2,3,0,8,224,247,0,170,160,1,0,0,2,1,0,15,224,2,0,228,144,1,0,0,2,5,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b48 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,31,0,0,2,1,0,0,128,6,0,15,144,31,0,0,2,2,0,0,128,7,0,15,144,5,0,0,3,0,0,15,85,128,7,0,228,144,3,0,0,160,19,0,0,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,7,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,6,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,4,0,0,5,2,0,15,128,34,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,2,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,6,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,6,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,6,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,6,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,0,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,3,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,3,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,3,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,3,0,228,128,5,0,228,160,8,0,0,3,5,0,1,128,1,0,228,144,2,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,8,0,0,3,5,0,4,128,1,0,228,144,0,0,228,128,9,0,0,3,0,0,4,192,3,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,101,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,3,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,3,0,228,128,36,0,0,2,5,0,7,128,4,0,228,128,1,0,0,2,4,0,7,224,5,0,228,128,8,0,0,3,3,0,1,128,2,0,228,144,2,0,228,128,8,102,0,0,3,2,0,1,128,3,0,228,144,2,0,228,128,8,0,0,3,3,0,2,128,2,0,228,144,1,0,228,128,8,0,0,3,2,0,2,128,3,0,228,144,1,0,228,128,8,0,0,3,3,0,4,128,2,0,228,144,0,0,228,128,8,0,0,3,2,0,4,128,3,0,228,144,0,0,228,128,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,103,128,3,0,228,128,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,8,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,8,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,8,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,36,0,0,2,5,0,7,128,1,0,228,128,1,0,0,2,5,0,7,224,5,0,228,128,36,0,0,2,5,0,104,7,128,0,0,228,128,1,0,0,2,6,0,7,224,5,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b49 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,31,0,0,2,1,0,0,128,6,0,15,144,31,0,0,2,2,0,0,128,7,0,15,144,5,0,0,3,0,0,15,85,128,7,0,228,144,3,0,0,160,19,0,0,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,7,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,6,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,6,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,6,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,6,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,6,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,8,0,0,3,5,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,5,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,101,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,36,0,0,2,6,0,7,128,4,0,228,128,1,0,0,2,5,0,7,224,6,0,228,128,8,0,0,3,5,0,1,128,3,0,228,144,3,0,228,128,8,102,0,0,3,5,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,3,0,228,144,1,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,8,0,0,3,3,0,2,103,128,1,0,228,144,2,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,1,0,228,128,36,0,0,2,6,0,7,128,4,0,228,128,1,0,0,2,6,0,7,224,6,0,228,128,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,66,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,104,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,0,228,97,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,3,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,105,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,4,0,7,224,106,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,22,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b50 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,31,0,0,2,1,0,0,128,6,0,15,144,31,0,0,2,2,0,0,128,7,0,15,144,5,0,0,3,0,0,15,85,128,7,0,228,144,3,0,0,160,19,0,0,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,7,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,6,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,6,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,6,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,6,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,6,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,8,0,0,3,5,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,5,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,101,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,36,0,0,2,8,0,7,128,4,0,228,128,1,0,0,2,5,0,7,224,8,0,228,128,8,0,0,3,4,0,1,128,3,0,228,144,3,0,228,128,8,102,0,0,3,6,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,3,0,228,144,1,0,228,128,8,0,0,3,6,0,2,128,1,0,228,144,2,0,228,128,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,103,128,4,0,228,128,2,0,228,160,8,0,0,3,6,0,4,128,1,0,228,144,1,0,228,128,8,0,0,3,1,0,1,128,5,0,228,128,5,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,8,0,0,3,3,0,1,128,6,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,6,0,228,128,1,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,104,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,7,0,0,128,8,0,0,3,3,0,4,128,6,0,228,128,2,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,105,228,128,36,0,0,2,3,0,7,128,6,0,228,128,5,0,0,3,6,0,7,224,5,0,228,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,3,0,170,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,106,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,3,0,170,160,5,0,0,3,0,107,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,3,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,108,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,109,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,39,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,110,128,3,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,7,128,5,111,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,3,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,112,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,8,128,113,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,95,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b51 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,10,0,0,128,4,0,15,144,31,0,0,2,5,0,0,128,5,0,15,144,31,0,0,2,1,0,0,128,6,0,15,144,31,0,0,2,2,0,0,128,7,0,15,144,5,0,0,3,0,0,15,85,128,7,0,228,144,3,0,0,160,19,0,0,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,7,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,6,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,6,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,6,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,6,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,6,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,6,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,6,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,6,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,101,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,8,0,0,3,4,0,1,128,5,0,228,128,5,0,228,128,7,0,0,2,0,0,8,128,4,0,0,128,8,0,0,3,4,0,1,128,3,0,228,144,3,102,0,228,128,8,0,0,3,4,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,3,0,228,144,1,0,228,128,5,0,0,3,5,0,7,224,5,0,228,128,0,0,255,128,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,128,4,0,228,128,2,0,228,160,8,0,0,103,3,4,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,36,0,0,2,8,0,7,128,5,0,228,128,1,0,0,2,6,0,7,224,8,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,4,0,228,128,1,0,228,160,8,0,104,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,4,0,105,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,106,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,107,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,3,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,108,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,109,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,3,0,170,160,5,0,0,3,0,110,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,3,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,111,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,112,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,3,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,4,0,0,4,6,0,7,128,3,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,113,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,114,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,115,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,116,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,3,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,3,0,85,160,5,0,0,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,117,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,118,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,81,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,119,128,3,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,0,0,120,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,3,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,121,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,122,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,5,0,228,144,1,0,0,2,1,59,0,15,224,4,0,228,144,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b52 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,31,0,0,2,1,0,0,128,5,0,15,144,31,0,0,2,2,0,0,128,6,0,15,144,5,0,0,3,0,0,15,128,6,0,228,144,3,0,0,160,19,0,0,73,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,6,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,5,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,4,0,0,5,2,0,15,128,34,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,2,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,5,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,5,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,5,0,0,144,0,0,228,128,4,0,0,5,1,0,15,128,35,32,228,160,0,0,255,176,5,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,0,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,3,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,3,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,3,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,3,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,3,0,228,128,5,0,228,160,8,0,0,3,5,0,1,128,1,0,228,144,2,0,228,128,8,0,0,3,5,0,2,128,1,0,228,144,1,0,228,128,8,0,0,3,5,0,4,128,1,0,228,144,0,0,228,128,9,0,0,3,0,0,4,192,3,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,101,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,3,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,3,0,228,128,36,0,0,2,5,0,7,128,4,0,228,128,1,0,0,2,4,0,7,224,5,0,228,128,8,0,0,3,3,0,1,128,2,0,228,144,2,0,228,128,8,102,0,0,3,2,0,1,128,3,0,228,144,2,0,228,128,8,0,0,3,3,0,2,128,2,0,228,144,1,0,228,128,8,0,0,3,2,0,2,128,3,0,228,144,1,0,228,128,8,0,0,3,3,0,4,128,2,0,228,144,0,0,228,128,8,0,0,3,2,0,4,128,3,0,228,144,0,0,228,128,8,0,0,3,1,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,1,0,2,103,128,3,0,228,128,1,0,228,160,8,0,0,3,1,0,4,128,3,0,228,128,2,0,228,160,8,0,0,3,0,0,1,128,2,0,228,128,0,0,228,160,8,0,0,3,0,0,2,128,2,0,228,128,1,0,228,160,8,0,0,3,0,0,4,128,2,0,228,128,2,0,228,160,36,0,0,2,5,0,7,128,1,0,228,128,1,0,0,2,5,0,7,224,5,0,228,128,36,0,0,2,5,0,104,7,128,0,0,228,128,1,0,0,2,6,0,7,224,5,0,228,128,1,0,0,2,0,0,15,224,9,0,228,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,3,0,85,160,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,2,0,0};
		
		public static byte[] _b53 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,31,0,0,2,1,0,0,128,5,0,15,144,31,0,0,2,2,0,0,128,6,0,15,144,5,0,0,3,0,0,15,128,6,0,228,144,3,0,0,160,19,0,0,73,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,6,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,5,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,5,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,5,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,5,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,5,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,8,0,0,3,5,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,5,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,101,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,36,0,0,2,6,0,7,128,4,0,228,128,1,0,0,2,5,0,7,224,6,0,228,128,8,0,0,3,5,0,1,128,3,0,228,144,3,0,228,128,8,102,0,0,3,5,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,3,0,228,144,1,0,228,128,8,0,0,3,3,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,8,0,0,3,3,0,2,103,128,1,0,228,144,2,0,228,128,8,0,0,3,3,0,4,128,1,0,228,144,1,0,228,128,36,0,0,2,6,0,7,128,4,0,228,128,1,0,0,2,6,0,7,224,6,0,228,128,8,0,0,3,2,0,1,128,3,0,228,128,0,0,228,160,8,0,0,3,2,0,2,128,3,0,228,128,1,0,228,160,4,0,0,4,4,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,2,0,66,0,3,1,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,5,0,1,128,4,0,228,128,4,0,228,128,8,0,0,3,0,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,5,0,0,128,7,0,0,2,1,0,8,128,131,0,104,128,5,0,0,3,0,0,7,128,4,0,228,128,0,0,255,128,8,0,0,3,2,0,4,128,3,0,228,128,2,0,228,160,4,0,0,4,3,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,1,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,2,0,1,128,2,0,228,128,1,0,228,97,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,11,0,0,3,1,0,8,128,2,0,0,128,3,0,170,160,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,5,0,0,128,13,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,131,0,105,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,11,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,12,0,228,160,1,0,0,2,4,0,7,224,106,1,0,228,128,4,0,0,4,0,0,7,128,11,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,3,0,85,160,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,22,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b54 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,31,0,0,2,1,0,0,128,5,0,15,144,31,0,0,2,2,0,0,128,6,0,15,144,5,0,0,3,0,0,15,128,6,0,228,144,3,0,0,160,19,0,0,73,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,6,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,5,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,5,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,5,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,5,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,5,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,8,0,0,3,5,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,5,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,5,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,8,0,0,3,4,0,1,128,5,0,228,128,0,0,228,160,8,0,0,3,4,0,2,128,5,0,228,128,1,0,228,160,101,8,0,0,3,4,0,4,128,5,0,228,128,2,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,36,0,0,2,8,0,7,128,4,0,228,128,1,0,0,2,5,0,7,224,8,0,228,128,8,0,0,3,4,0,1,128,3,0,228,144,3,0,228,128,8,102,0,0,3,6,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,3,0,228,144,1,0,228,128,8,0,0,3,6,0,2,128,1,0,228,144,2,0,228,128,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,103,128,4,0,228,128,2,0,228,160,8,0,0,3,6,0,4,128,1,0,228,144,1,0,228,128,8,0,0,3,1,0,1,128,5,0,228,128,5,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,8,0,0,3,3,0,1,128,6,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,6,0,228,128,1,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,104,228,160,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,8,0,0,3,7,0,1,128,1,0,228,128,1,0,228,128,36,0,0,2,4,0,7,128,2,0,228,128,7,0,0,2,1,0,8,128,7,0,0,128,8,0,0,3,3,0,4,128,6,0,228,128,2,0,228,160,4,0,0,4,6,0,7,128,1,0,228,128,1,0,255,128,4,0,228,128,36,0,0,2,2,0,7,128,3,0,105,228,128,36,0,0,2,3,0,7,128,6,0,228,128,5,0,0,3,6,0,7,224,5,0,228,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,11,0,0,3,0,0,8,128,3,0,0,128,3,0,170,160,6,0,0,2,1,0,8,128,1,0,255,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,106,160,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,13,0,85,160,13,0,0,160,4,0,0,4,1,0,8,128,7,0,0,128,13,0,170,160,1,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,11,0,0,3,1,0,8,128,1,0,0,128,3,0,170,160,5,0,0,3,0,107,0,8,128,0,0,255,128,2,0,255,128,10,0,0,3,1,0,8,128,1,0,255,128,3,0,85,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,5,0,0,3,1,0,7,128,1,0,255,128,12,0,228,160,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,4,0,0,4,3,0,7,128,11,0,228,160,108,0,0,255,128,1,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,109,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,17,0,85,160,17,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,128,7,0,0,128,17,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,39,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,110,128,3,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,16,0,228,160,36,0,0,2,4,0,7,128,5,111,0,228,128,4,0,0,4,0,0,7,128,15,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,3,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,112,21,0,85,160,21,0,0,160,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,19,0,255,160,5,0,0,3,1,0,8,128,113,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,20,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,19,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,95,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,0,15,224,3,0,85,160,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b55 = new byte[] {20,0,2,254,255,81,0,0,5,3,0,15,160,0,0,64,64,0,0,128,63,136,0,4,31,0,0,2,131,0,96,128,0,0,15,144,31,0,0,2,3,0,0,128,1,0,15,144,31,0,0,2,7,0,0,128,2,0,15,144,31,0,0,2,6,0,0,128,3,0,15,144,31,0,0,2,5,0,0,128,4,0,15,144,31,0,0,2,1,0,0,128,5,0,15,144,31,0,0,2,2,0,0,128,6,0,15,144,5,0,0,3,0,0,15,128,6,0,228,144,3,0,0,160,19,0,0,73,2,0,0,15,128,0,0,228,128,4,0,0,4,0,0,15,128,6,0,228,144,3,0,0,160,0,0,228,129,46,0,0,2,0,0,15,176,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,34,32,228,160,0,0,85,176,4,0,0,5,0,0,15,128,34,32,228,160,131,0,97,176,5,0,0,144,0,0,228,128,4,0,0,5,0,0,15,128,34,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,4,0,0,5,3,0,15,128,34,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,0,0,3,4,0,1,128,0,0,228,144,3,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,35,32,228,160,0,0,85,176,4,0,0,5,8,1,0,15,128,35,32,228,160,131,0,65,176,5,0,0,144,0,0,228,128,5,0,0,4,0,0,15,128,5,0,85,144,36,32,228,160,0,0,85,176,4,0,0,5,1,0,15,128,35,32,228,160,0,0,170,176,5,0,170,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,131,0,98,176,5,0,0,144,0,0,228,128,4,0,0,5,2,0,15,128,35,32,228,160,0,0,255,176,5,0,255,144,1,0,228,128,4,0,0,5,0,0,15,128,36,32,228,160,0,0,170,176,5,0,170,144,0,0,228,128,9,0,0,3,4,0,2,128,0,0,228,144,2,0,228,128,4,0,0,5,1,0,15,128,36,32,228,160,0,0,255,176,5,0,255,144,0,0,228,128,9,99,0,0,3,4,0,4,128,0,0,228,144,1,0,228,128,1,0,0,2,4,0,8,128,3,0,85,160,9,0,0,3,0,0,1,128,4,0,228,128,0,0,228,160,9,0,0,3,0,0,2,128,4,0,228,128,1,0,228,160,9,0,0,3,0,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,0,0,8,128,3,0,85,160,9,0,0,3,0,0,1,192,0,0,228,128,100,4,0,228,160,9,0,0,3,0,0,2,192,0,0,228,128,5,0,228,160,9,0,0,3,0,0,4,192,0,0,228,128,6,0,228,160,8,0,0,3,4,0,1,128,2,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,2,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,2,0,228,144,1,0,228,128,9,0,0,3,0,0,8,192,0,0,228,128,7,0,228,160,101,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,128,4,0,228,128,2,0,228,160,1,0,0,2,3,0,15,224,0,0,228,128,8,0,0,3,4,0,1,128,5,0,228,128,5,0,228,128,7,0,0,2,0,0,8,128,4,0,0,128,8,0,0,3,4,0,1,128,3,0,228,144,3,102,0,228,128,8,0,0,3,4,0,2,128,3,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,3,0,228,144,1,0,228,128,5,0,0,3,5,0,7,224,5,0,228,128,0,0,255,128,8,0,0,3,5,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,5,0,2,128,4,0,228,128,1,0,228,160,8,0,0,3,5,0,4,128,4,0,228,128,2,0,228,160,8,0,0,103,3,4,0,1,128,1,0,228,144,3,0,228,128,8,0,0,3,4,0,2,128,1,0,228,144,2,0,228,128,8,0,0,3,4,0,4,128,1,0,228,144,1,0,228,128,36,0,0,2,8,0,7,128,5,0,228,128,1,0,0,2,6,0,7,224,8,0,228,128,8,0,0,3,3,0,1,128,4,0,228,128,0,0,228,160,8,0,0,3,3,0,2,128,4,0,228,128,1,0,228,160,8,0,104,0,3,3,0,4,128,4,0,228,128,2,0,228,160,4,0,0,4,1,0,7,128,0,0,228,128,10,0,255,161,10,0,228,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,2,0,0,3,2,0,7,128,0,0,228,129,8,0,228,160,7,0,0,2,0,0,8,128,6,0,0,128,36,0,0,2,4,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,128,4,0,105,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,36,0,0,2,3,0,7,128,5,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,3,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,13,0,85,106,160,13,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,128,6,0,0,128,13,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,11,0,255,160,6,0,0,2,4,0,8,128,1,0,255,128,5,0,0,3,2,0,8,128,0,0,255,128,4,0,255,128,4,0,0,4,5,0,7,128,0,0,228,128,14,0,255,161,14,0,228,160,8,107,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,8,0,0,3,3,0,1,128,5,0,228,128,5,0,228,128,11,0,0,3,1,0,8,128,1,0,0,128,3,0,170,160,7,0,0,2,0,0,8,128,3,0,0,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,3,0,8,128,4,0,255,128,3,0,255,128,4,0,0,4,108,1,0,8,128,1,0,255,128,17,0,85,160,17,0,0,160,5,0,0,3,1,0,7,128,3,0,255,128,12,0,228,160,4,0,0,4,1,0,8,128,3,0,0,128,17,0,170,160,1,0,255,128,4,0,0,4,1,0,7,128,11,0,228,160,2,0,255,128,1,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,109,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,3,0,170,160,5,0,0,3,0,110,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,3,0,85,160,5,0,0,3,5,0,7,128,0,0,255,128,16,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,15,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,3,0,7,128,0,0,228,128,18,0,255,161,18,0,228,160,4,0,0,4,5,0,7,128,15,0,228,160,0,0,255,111,128,5,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,5,0,228,128,7,0,0,2,1,0,8,128,6,0,0,128,6,0,0,2,0,0,8,128,1,0,255,128,5,0,0,3,5,0,7,128,3,0,228,128,1,0,255,128,4,0,0,4,0,0,8,128,0,0,255,128,21,0,85,160,21,0,0,160,8,0,0,3,5,0,1,128,5,0,228,128,2,0,112,228,128,4,0,0,4,2,0,8,128,6,0,0,128,21,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,5,0,0,128,3,0,170,160,6,0,0,2,3,0,8,128,2,0,255,128,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,4,0,0,4,6,0,7,128,3,0,228,128,1,0,255,128,4,0,228,128,5,0,0,3,0,0,8,128,3,0,255,128,0,0,255,128,5,0,0,3,3,0,7,128,0,0,113,255,128,20,0,228,160,36,0,0,2,5,0,7,128,6,0,228,128,8,0,0,3,6,0,1,128,5,0,228,128,2,0,228,128,4,0,0,4,5,0,7,128,0,0,228,128,22,0,255,161,22,0,228,160,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,6,0,1,128,5,0,228,128,5,0,228,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,114,128,32,0,0,3,2,0,8,128,1,0,255,128,19,0,255,160,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,25,0,85,160,25,0,0,160,4,0,0,4,3,0,7,128,19,0,228,160,2,0,255,128,3,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,25,0,170,160,1,0,255,128,2,0,0,3,1,0,7,128,1,115,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,3,0,7,128,5,0,228,128,0,0,255,128,4,0,0,4,5,0,7,128,5,0,228,128,0,0,255,128,4,0,228,128,8,0,0,3,6,0,1,128,3,0,228,128,2,0,228,128,36,0,0,2,3,0,7,128,5,0,228,128,11,0,0,3,0,0,8,128,6,0,0,128,3,0,170,160,8,0,0,3,3,0,1,128,3,0,228,128,2,0,228,128,116,10,0,0,3,0,0,8,128,0,0,255,128,3,0,85,160,11,0,0,3,2,0,8,128,3,0,0,128,3,0,170,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,10,0,0,3,2,0,8,128,2,0,255,128,3,0,85,160,5,0,0,3,3,0,7,128,0,0,255,128,24,0,228,160,32,0,0,3,0,0,8,128,2,0,255,128,23,0,255,160,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,117,5,0,7,128,0,0,228,128,26,0,255,161,26,0,228,160,4,0,0,4,3,0,7,128,23,0,228,160,0,0,255,128,3,0,228,128,8,0,0,3,7,0,1,128,5,0,228,128,5,0,228,128,2,0,0,3,3,0,7,128,1,0,228,128,3,0,228,128,7,0,0,2,0,0,8,128,7,0,0,128,4,0,0,4,1,0,7,128,0,0,228,128,30,0,255,161,30,0,228,160,4,0,0,4,6,0,7,128,5,0,228,128,0,0,255,128,4,118,0,228,128,5,0,0,3,0,0,7,128,5,0,228,128,0,0,255,128,36,0,0,2,5,0,7,128,6,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,8,0,0,3,5,0,1,128,5,0,228,128,2,0,228,128,11,0,0,3,1,0,8,128,5,0,0,128,3,0,170,160,4,0,0,4,0,0,8,128,0,0,255,128,29,0,85,160,29,0,0,160,10,0,0,3,2,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,1,0,8,81,128,7,0,0,128,29,0,170,160,0,0,255,128,32,0,0,3,0,0,8,128,2,0,255,128,27,0,255,160,6,0,0,2,3,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,0,0,255,128,3,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,2,0,228,128,11,0,0,3,0,0,8,128,131,0,119,128,3,0,170,160,8,0,0,3,6,0,1,128,1,0,228,128,1,0,228,128,10,0,0,3,2,0,8,128,0,0,255,128,3,0,85,160,7,0,0,2,0,0,8,128,6,0,0,128,5,0,0,3,2,0,8,128,3,0,255,128,2,0,255,128,4,0,0,4,5,0,7,128,1,0,228,128,0,0,255,128,4,0,228,128,5,0,0,3,0,0,7,128,2,0,255,128,28,0,228,160,36,0,0,2,4,0,7,128,5,0,228,128,4,0,0,4,0,0,120,7,128,27,0,228,160,1,0,255,128,0,0,228,128,8,0,0,3,4,0,1,128,4,0,228,128,2,0,228,128,5,0,0,3,1,0,7,128,1,0,228,128,0,0,255,128,11,0,0,3,1,0,8,128,4,0,0,128,3,0,170,160,6,0,0,2,0,0,8,128,0,0,255,128,10,0,0,3,3,0,8,128,1,0,255,128,3,0,85,160,4,0,0,4,0,0,8,128,0,0,255,128,33,0,85,160,33,0,0,160,8,0,0,3,1,0,1,128,1,0,121,228,128,2,0,228,128,4,0,0,4,1,0,8,128,6,0,0,128,33,0,170,160,0,0,255,128,11,0,0,3,0,0,8,128,1,0,0,128,3,0,170,160,6,0,0,2,2,0,8,128,1,0,255,128,10,0,0,3,1,0,8,128,0,0,255,128,3,0,85,160,32,0,0,3,0,0,8,128,3,0,255,128,31,0,255,160,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,5,0,0,3,0,0,8,128,2,0,255,128,0,0,255,128,5,0,0,122,3,1,0,7,128,1,0,255,128,32,0,228,160,2,0,0,3,0,0,7,128,3,0,228,128,0,0,228,128,4,0,0,4,1,0,7,128,31,0,228,160,0,0,255,128,1,0,228,128,1,0,0,2,4,0,7,224,2,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,224,0,0,228,128,9,0,228,160,1,0,0,2,0,0,8,224,9,0,255,160,1,0,0,2,2,0,3,224,4,0,228,144,1,0,0,2,1,59,0,15,224,3,0,85,160,1,0,0,2,4,0,8,224,3,0,170,160,1,0,0,2,5,0,8,224,3,0,170,160,1,0,0,2,6,0,8,224,3,0,170,160,1,0,0,2,7,0,15,224,8,0,228,160,255,255,0,0};
		
		public static byte[] _b56 = new byte[] {101,0,2,254,255,1,0,0,2,0,0,15,128,33,0,228,160,2,0,0,3,0,0,15,128,0,0,228,128,9,0,228,160,1,0,0,2,1,0,1,128,0,0,255,160,1,0,0,2,1,0,2,128,1,0,255,160,1,0,0,2,1,0,4,128,2,0,255,160,1,0,0,2,1,0,8,128,3,0,255,160,2,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,1,0,0,2,1,91,0,1,128,4,0,255,160,1,0,0,2,1,0,2,128,5,0,255,160,1,0,0,2,1,0,4,128,6,0,255,160,1,0,0,2,1,0,8,128,7,0,255,160,2,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,2,0,0,3,0,0,7,192,0,0,228,128,8,0,228,160,1,0,0,2,0,0,8,192,0,0,255,128,255,255,0,0};
		
		public static byte[] _b57 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,101,128,4,0,7,176,4,0,0,4,0,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,1,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,6,0,0,2,1,0,8,128,0,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,1,0,8,128,1,0,0,128,3,0,170,160,56,1,0,255,128,36,0,0,2,1,0,7,128,3,0,228,176,6,0,0,2,1,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,24,128,0,0,255,128,131,0,81,128,5,0,0,3,0,0,8,128,1,0,255,128,0,0,255,128,4,0,0,4,0,0,7,128,2,0,228,160,0,0,255,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b58 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,101,128,4,0,7,176,4,0,0,4,0,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,1,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,6,0,0,2,1,0,8,128,0,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,1,0,8,128,1,0,0,128,7,0,170,160,56,1,0,255,128,36,0,0,2,1,0,7,128,3,0,228,176,6,0,0,2,1,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,24,128,0,0,255,128,131,0,89,128,4,0,0,4,0,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,2,0,8,128,1,0,255,128,0,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,5,0,0,3,0,0,24,128,131,0,102,128,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,1,0,8,128,2,0,0,128,3,0,170,160,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,5,0,0,3,0,0,7,128,2,0,255,128,6,0,228,160,5,0,0,3,0,0,8,128,0,0,255,128,1,0,255,128,4,79,0,0,4,0,0,7,128,2,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b59 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,101,128,4,0,7,176,4,0,0,4,0,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,1,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,6,0,0,2,1,0,8,128,0,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,1,0,8,128,1,0,0,128,7,0,170,160,56,1,0,255,128,36,0,0,2,1,0,7,128,3,0,228,176,6,0,0,2,1,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,24,128,0,0,255,128,131,0,102,128,4,0,0,4,0,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,3,0,8,128,1,0,255,128,0,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,2,0,0,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,0,0,24,128,0,3,0,255,128,131,0,103,128,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,1,0,8,128,2,0,0,128,3,0,170,160,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,0,0,7,128,4,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,2,0,8,128,0,0,255,128,1,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,38,228,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,5,0,0,3,0,0,24,128,131,0,104,128,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,1,0,8,128,2,0,0,128,11,0,170,160,1,0,255,128,5,0,0,3,0,0,7,128,3,0,255,128,6,0,228,160,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,0,0,7,128,2,0,228,160,2,0,255,128,0,0,228,97,128,5,0,0,3,0,0,8,128,0,0,255,128,1,0,255,128,4,0,0,4,0,0,7,128,10,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b60 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,101,128,4,0,7,176,4,0,0,4,0,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,1,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,1,0,0,128,6,0,0,2,1,0,8,128,0,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,1,0,8,128,1,0,0,128,7,0,170,160,56,1,0,255,128,36,0,0,2,1,0,7,128,3,0,228,176,6,0,0,2,1,0,8,128,1,0,255,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,24,128,0,0,255,128,131,0,102,128,4,0,0,4,0,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,4,0,8,128,1,0,255,128,0,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,228,128,7,0,0,2,0,0,8,128,2,0,0,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,0,0,24,128,0,3,0,255,128,131,0,103,128,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,1,0,8,128,2,0,0,128,3,0,170,160,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,0,0,7,128,4,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,3,0,8,128,0,0,255,128,1,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,54,228,128,7,0,0,2,0,0,8,128,2,0,0,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,6,0,0,2,1,0,8,128,0,0,255,128,5,0,0,3,0,0,24,128,0,0,255,128,131,0,104,128,4,0,0,4,1,0,8,128,1,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,1,0,8,128,2,0,0,128,11,0,170,160,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,0,0,7,128,4,0,228,176,12,0,255,161,12,0,228,160,5,0,0,3,2,0,8,128,0,0,255,128,1,0,255,128,8,0,0,3,2,0,1,128,0,0,228,128,0,0,228,37,128,8,0,0,3,0,0,1,128,0,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,5,0,0,3,0,0,24,128,131,0,105,128,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,1,0,8,128,1,0,255,128,15,0,85,160,15,0,0,160,5,0,0,3,0,0,7,128,4,0,255,128,6,0,228,160,4,0,0,4,1,0,8,128,2,0,0,128,15,0,170,160,1,0,255,128,4,0,0,4,0,0,7,128,2,0,228,160,3,0,255,128,0,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,106,4,0,0,4,0,0,7,128,10,0,228,160,2,0,255,128,0,0,228,128,5,0,0,3,0,0,8,128,0,0,255,128,1,0,255,128,4,0,0,4,0,0,7,128,14,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,10,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b61 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,102,4,0,0,4,2,0,8,128,2,0,0,128,3,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,3,0,228,176,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,5,0,0,3,1,0,8,128,2,0,255,128,1,0,255,128,4,0,0,4,1,0,7,128,2,0,70,228,160,1,0,255,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b62 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,1,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,102,4,0,0,4,2,0,8,128,2,0,0,128,7,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,3,0,228,176,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,3,0,103,8,128,2,0,255,128,1,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,104,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,5,0,0,3,1,0,7,128,3,0,255,128,6,0,228,160,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,2,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,55,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b63 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,1,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,102,4,0,0,4,2,0,8,128,2,0,0,128,7,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,3,0,228,176,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,4,0,103,8,128,2,0,255,128,1,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,3,0,0,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,104,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,4,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,3,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,105,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,11,0,170,160,2,0,255,128,5,0,0,3,1,0,7,128,4,0,255,128,6,0,228,160,6,0,0,2,2,0,8,128,2,0,255,128,4,0,106,0,4,1,0,7,128,2,0,228,160,3,0,255,128,1,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,10,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,24,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b64 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,1,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,2,0,0,128,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,102,4,0,0,4,2,0,8,128,2,0,0,128,7,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,3,0,228,176,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,5,0,0,3,5,0,103,8,128,2,0,255,128,1,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,3,0,0,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,104,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,4,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,4,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,1,0,8,128,3,0,0,128,8,0,0,3,1,0,1,128,1,105,0,228,128,2,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,2,0,8,128,2,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,11,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,4,0,228,176,12,0,255,161,12,0,106,228,160,5,0,0,3,3,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,15,0,85,160,107,15,0,0,160,5,0,0,3,1,0,7,128,5,0,255,128,6,0,228,160,4,0,0,4,2,0,8,128,3,0,0,128,15,0,170,160,2,0,255,128,4,0,0,4,1,0,7,128,2,0,228,160,4,0,255,128,1,0,228,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,10,0,228,160,3,0,255,128,1,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,97,128,4,0,0,4,1,0,7,128,14,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b65 = new byte[] {12,0,2,255,255,81,0,0,5,1,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,2,0,0,3,1,0,7,128,1,0,228,128,1,0,0,160,5,0,0,3,2,0,7,128,1,0,85,128,5,0,228,176,4,0,0,4,2,0,7,128,1,0,0,128,6,0,228,176,2,0,228,128,4,0,0,93,4,1,0,7,128,1,0,170,128,4,0,228,176,2,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,4,0,0,4,1,0,7,128,3,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,94,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,82,255,128,4,0,0,4,1,0,7,128,2,0,228,160,1,0,255,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b66 = new byte[] {12,0,2,255,255,81,0,0,5,1,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,2,0,0,3,1,0,7,128,1,0,228,128,1,0,0,160,5,0,0,3,2,0,7,128,1,0,85,128,5,0,228,176,4,0,0,4,2,0,7,128,1,0,0,128,6,0,228,176,2,0,228,128,4,0,0,93,4,1,0,7,128,1,0,170,128,4,0,228,176,2,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,4,0,0,4,1,0,7,128,3,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,94,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,7,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,3,0,228,176,0,0,95,255,161,0,0,228,160,5,0,0,3,3,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,96,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,5,0,0,3,1,0,7,128,3,0,255,128,6,0,228,160,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,2,0,228,160,1,83,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b67 = new byte[] {12,0,2,255,255,81,0,0,5,1,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,3,0,7,128,3,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,4,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,1,0,0,160,7,0,0,93,2,1,0,8,128,4,0,0,128,5,0,0,3,2,0,7,128,1,0,85,128,5,0,228,176,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,7,128,1,0,0,128,6,0,228,176,2,0,228,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,1,0,7,128,1,0,170,128,4,0,228,176,94,2,0,228,128,4,0,0,4,2,0,8,128,4,0,0,128,7,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,1,0,228,128,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,1,0,7,128,3,0,228,176,0,0,95,255,161,0,0,228,160,5,0,0,3,4,0,8,128,2,0,255,128,1,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,96,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,3,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,3,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,97,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,11,0,98,170,160,2,0,255,128,5,0,0,3,1,0,7,128,4,0,255,128,6,0,228,160,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,2,0,228,160,3,0,255,128,1,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,10,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,68,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b68 = new byte[] {12,0,2,255,255,81,0,0,5,1,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,3,0,7,128,3,0,228,176,4,0,255,161,4,0,228,160,8,0,0,3,4,0,1,128,3,0,228,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,1,0,0,160,7,0,0,93,2,1,0,8,128,4,0,0,128,5,0,0,3,2,0,7,128,1,0,85,128,5,0,228,176,6,0,0,2,2,0,8,128,1,0,255,128,4,0,0,4,2,0,7,128,1,0,0,128,6,0,228,176,2,0,228,128,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,4,0,0,4,1,0,7,128,1,0,170,128,4,0,228,176,94,2,0,228,128,4,0,0,4,2,0,8,128,4,0,0,128,7,0,170,160,2,0,255,128,36,0,0,2,2,0,7,128,1,0,228,128,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,0,1,128,3,0,228,128,2,0,228,128,5,0,0,3,1,0,24,128,1,0,255,128,1,0,0,128,4,0,0,4,1,0,7,128,3,0,228,176,0,0,95,255,161,0,0,228,160,5,0,0,3,5,0,8,128,2,0,255,128,1,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,96,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,3,0,228,176,8,0,255,161,8,0,228,160,5,0,0,3,4,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,97,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,11,0,85,160,11,0,0,160,4,0,0,4,2,0,8,128,3,0,0,128,11,0,98,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,3,0,228,176,12,0,255,161,12,0,228,160,5,0,0,3,3,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,3,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,1,0,1,128,1,0,228,128,2,0,228,128,7,0,0,2,2,0,8,128,3,0,0,128,99,5,0,0,3,1,0,24,128,1,0,0,128,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,8,128,2,0,255,128,15,0,85,160,15,0,0,160,5,0,0,3,1,0,7,128,5,0,255,128,6,0,228,160,4,0,0,4,2,0,8,128,3,0,0,128,15,0,170,160,2,0,255,128,4,0,0,4,1,0,7,128,2,0,228,160,4,0,255,100,128,1,0,228,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,1,0,7,128,10,0,228,160,3,0,255,128,1,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,14,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,49,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b69 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,128,5,0,7,176,1,0,0,2,0,0,7,128,4,0,228,176,2,0,0,3,1,0,7,128,0,0,228,129,5,0,228,176,4,0,0,4,0,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,3,0,1,128,0,0,228,128,0,0,228,128,8,0,0,3,2,0,1,128,1,0,228,128,1,0,228,128,7,0,0,2,0,0,8,128,3,0,0,128,7,0,0,2,102,1,0,8,128,2,0,0,128,5,0,0,3,0,0,7,128,0,0,228,128,0,0,255,128,4,0,0,4,1,0,7,128,1,0,228,128,1,0,255,128,0,0,228,128,36,0,0,2,2,0,7,128,1,0,228,128,36,0,0,2,1,0,7,128,3,0,228,176,6,0,0,2,1,0,8,128,0,0,255,128,8,0,0,3,2,0,17,128,2,0,228,128,1,0,228,128,32,0,0,3,0,0,86,8,128,2,0,0,128,1,0,255,160,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,1,0,8,128,3,0,0,128,3,0,170,160,1,0,255,128,8,0,0,3,0,0,17,128,0,0,228,128,1,0,228,128,6,0,0,2,2,0,8,128,1,0,255,128,5,0,0,3,1,0,8,128,131,0,103,128,2,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,5,0,0,3,0,0,7,128,1,0,255,128,2,0,228,160,4,0,0,4,0,0,7,128,1,0,228,160,0,0,255,128,0,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,14,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b70 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,101,128,5,0,7,176,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,4,0,1,128,1,0,228,128,1,0,228,128,1,0,0,2,0,0,7,128,4,0,228,176,2,0,0,3,2,0,7,128,0,0,228,129,5,0,228,176,7,0,0,2,0,0,8,128,4,0,0,128,36,0,0,2,0,0,7,128,2,0,228,128,4,0,0,4,2,0,7,128,102,1,0,228,128,0,0,255,128,0,0,228,128,5,0,0,3,3,0,7,128,1,0,228,128,0,0,255,128,6,0,0,2,0,0,8,128,0,0,255,128,36,0,0,2,1,0,7,128,2,0,228,128,4,0,0,4,0,0,8,128,0,0,255,128,3,0,85,160,3,0,0,160,36,0,0,2,2,0,7,128,3,0,228,176,4,0,0,4,0,0,8,128,4,0,0,128,3,0,170,160,0,0,103,255,128,8,0,0,3,4,0,17,128,1,0,228,128,2,0,228,128,6,0,0,2,0,0,8,128,0,0,255,128,4,0,0,4,1,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,32,0,0,3,1,0,8,128,4,0,0,128,1,0,255,160,8,0,0,3,4,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,5,0,17,128,3,0,228,128,2,0,228,128,7,0,0,2,3,104,0,8,128,4,0,0,128,5,0,0,3,1,0,8,128,0,0,255,128,1,0,255,128,4,0,0,4,3,0,7,128,1,0,228,128,3,0,255,128,0,0,228,128,5,0,0,3,4,0,8,128,0,0,255,128,5,0,0,128,36,0,0,2,0,0,7,128,3,0,228,128,6,0,0,2,2,0,8,128,3,0,255,128,8,0,0,3,3,0,17,128,0,0,228,128,2,0,228,128,32,0,0,3,0,105,0,8,128,3,0,0,128,5,0,255,160,5,0,0,3,0,0,7,128,4,0,255,128,2,0,228,160,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,5,0,0,3,1,0,7,128,1,0,228,128,3,0,255,128,4,0,0,4,2,0,8,128,4,0,0,128,7,0,170,160,2,0,255,128,8,0,0,3,1,0,17,128,1,0,228,128,2,0,228,128,6,0,0,2,2,0,106,8,128,2,0,255,128,4,0,0,4,0,0,7,128,1,0,228,160,1,0,255,128,0,0,228,128,5,0,0,3,1,0,8,128,1,0,0,128,2,0,255,128,5,0,0,3,0,0,8,128,0,0,255,128,2,0,255,128,5,0,0,3,1,0,7,128,1,0,255,128,6,0,228,160,4,0,0,4,1,0,7,128,5,0,228,160,0,0,255,128,1,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,64,1,0,228,128,2,0,0,3,0,0,7,128,0,0,228,128,0,0,228,176,1,0,0,2,0,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b71 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,1,0,0,2,1,0,7,128,4,0,228,176,2,0,0,3,2,0,7,128,1,0,228,129,5,0,228,176,4,0,0,4,1,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,4,0,1,128,1,0,228,128,1,0,228,128,8,0,0,3,3,0,1,128,2,0,228,128,2,0,228,128,102,7,0,0,2,1,0,8,128,4,0,0,128,7,0,0,2,2,0,8,128,3,0,0,128,5,0,0,3,1,0,7,128,1,0,228,128,1,0,255,128,4,0,0,4,2,0,7,128,2,0,228,128,2,0,255,128,1,0,228,128,36,0,0,2,3,0,7,128,2,0,228,128,36,0,0,2,2,0,7,128,3,0,228,176,6,0,0,2,2,0,8,128,1,0,255,128,8,0,0,3,3,0,103,17,128,3,0,228,128,2,0,228,128,32,0,0,3,1,0,8,128,3,0,0,128,1,0,255,160,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,4,0,0,128,3,0,170,160,2,0,255,128,8,0,0,3,1,0,17,128,1,0,228,128,2,0,228,128,6,0,0,2,3,0,8,128,2,0,255,128,5,0,0,3,2,0,8,128,1,104,0,0,128,3,0,255,128,5,0,0,3,1,0,8,128,1,0,255,128,3,0,255,128,5,0,0,3,1,0,7,128,2,0,255,128,2,0,228,160,4,0,0,4,1,0,7,128,1,0,228,160,1,0,255,128,1,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,31,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b72 = new byte[] {8,0,2,255,255,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,101,144,0,8,15,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,4,0,0,4,2,0,7,128,4,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,5,0,1,128,2,0,228,128,2,0,228,128,1,0,0,2,1,0,7,128,4,0,228,176,2,0,0,3,3,0,7,128,1,0,228,129,5,0,228,176,7,0,0,2,1,0,8,128,5,0,0,128,36,0,0,2,102,1,0,7,128,3,0,228,128,4,0,0,4,3,0,7,128,2,0,228,128,1,0,255,128,1,0,228,128,5,0,0,3,4,0,7,128,2,0,228,128,1,0,255,128,6,0,0,2,1,0,8,128,1,0,255,128,36,0,0,2,2,0,7,128,3,0,228,128,4,0,0,4,1,0,8,128,1,0,255,128,3,0,85,160,3,0,0,160,36,0,0,2,3,0,7,128,3,0,228,176,4,0,103,0,4,1,0,8,128,5,0,0,128,3,0,170,160,1,0,255,128,8,0,0,3,5,0,17,128,2,0,228,128,3,0,228,128,6,0,0,2,1,0,8,128,1,0,255,128,4,0,0,4,2,0,7,128,4,0,228,176,4,0,255,161,4,0,228,160,32,0,0,3,2,0,8,128,5,0,0,128,1,0,255,160,8,0,0,3,5,0,1,128,2,0,228,128,2,0,228,128,8,0,0,3,6,104,0,17,128,4,0,228,128,3,0,228,128,7,0,0,2,4,0,8,128,5,0,0,128,5,0,0,3,2,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,4,0,7,128,2,0,228,128,4,0,255,128,1,0,228,128,5,0,0,3,5,0,8,128,1,0,255,128,6,0,0,128,36,0,0,2,1,0,7,128,4,0,228,128,6,0,0,2,3,0,8,128,4,0,255,128,8,0,0,3,4,105,0,17,128,1,0,228,128,3,0,228,128,32,0,0,3,1,0,8,128,4,0,0,128,5,0,255,160,5,0,0,3,1,0,7,128,5,0,255,128,2,0,228,160,4,0,0,4,3,0,8,128,3,0,255,128,7,0,85,160,7,0,0,160,5,0,0,3,2,0,7,128,2,0,228,128,4,0,255,128,4,0,0,4,3,0,8,128,5,0,0,128,7,0,170,160,3,0,255,128,8,0,0,3,2,0,106,17,128,2,0,228,128,3,0,228,128,6,0,0,2,3,0,8,128,3,0,255,128,4,0,0,4,1,0,7,128,1,0,228,160,2,0,255,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,0,128,3,0,255,128,5,0,0,3,1,0,8,128,1,0,255,128,3,0,255,128,5,0,0,3,2,0,7,128,2,0,255,128,6,0,228,160,4,0,0,4,2,0,7,128,5,0,228,160,1,0,255,128,96,2,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,2,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b73 = new byte[] {12,0,2,255,255,81,0,0,5,4,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,128,7,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,1,0,0,2,2,0,7,128,3,0,228,176,2,0,0,3,3,0,7,128,2,0,228,129,7,0,228,176,4,0,0,4,2,0,7,128,3,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,5,0,1,93,128,2,0,228,128,2,0,228,128,8,0,0,3,4,0,1,128,3,0,228,128,3,0,228,128,7,0,0,2,2,0,8,128,5,0,0,128,7,0,0,2,3,0,8,128,4,0,0,128,5,0,0,3,2,0,7,128,2,0,228,128,2,0,255,128,4,0,0,4,4,0,7,128,3,0,228,128,3,0,255,128,2,0,228,128,36,0,0,2,3,0,7,128,94,4,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,4,0,0,160,5,0,0,3,4,0,7,128,1,0,85,128,5,0,228,176,4,0,0,4,4,0,7,128,1,0,0,128,6,0,228,176,4,0,228,128,4,0,0,4,4,0,7,128,1,0,170,128,4,0,228,176,4,0,228,128,36,0,0,2,1,0,7,128,4,0,228,128,6,0,0,2,2,0,95,8,128,2,0,255,128,8,0,0,3,4,0,17,128,3,0,228,128,1,0,228,128,32,0,0,3,3,0,8,128,4,0,0,128,1,0,255,160,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,4,0,0,4,2,0,8,128,5,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,1,96,0,17,128,2,0,228,128,1,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,5,0,0,3,2,0,8,128,2,0,255,128,1,0,0,128,5,0,0,3,1,0,8,128,3,0,255,128,1,0,255,128,5,0,0,3,1,0,7,128,2,0,255,128,2,0,228,160,4,0,0,4,1,0,7,128,1,0,228,160,1,0,255,128,1,0,228,128,2,75,0,0,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
		
		public static byte[] _b74 = new byte[] {12,0,2,255,255,81,0,0,5,8,0,15,160,131,0,1,191,140,0,4,31,0,0,2,131,0,9,128,1,0,15,176,31,0,0,2,131,0,9,128,0,0,15,176,31,0,0,2,131,0,9,128,2,0,3,176,31,0,0,2,131,0,9,128,3,0,7,176,31,0,0,2,131,0,9,128,4,0,7,176,31,0,0,2,131,0,9,128,5,0,7,176,31,0,0,2,131,0,9,128,6,0,7,176,31,0,0,2,131,0,9,128,7,0,7,176,31,0,0,2,131,0,9,144,0,8,15,160,31,0,0,2,131,0,92,144,1,8,15,160,66,0,0,3,1,0,15,128,2,0,228,176,1,8,228,160,66,0,0,3,0,0,15,128,2,0,228,176,0,8,228,160,1,0,0,2,2,0,7,128,3,0,228,176,2,0,0,3,3,0,7,128,2,0,228,129,7,0,228,176,4,0,0,4,2,0,7,128,3,0,228,176,0,0,255,161,0,0,228,160,8,0,0,3,6,0,1,93,128,2,0,228,128,2,0,228,128,36,0,0,2,4,0,7,128,3,0,228,128,7,0,0,2,4,0,8,128,6,0,0,128,4,0,0,4,3,0,7,128,2,0,228,128,4,0,255,128,4,0,228,128,36,0,0,2,5,0,7,128,3,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,8,0,0,160,5,0,0,3,3,0,7,128,1,0,85,128,94,5,0,228,176,4,0,0,4,3,0,7,128,1,0,0,128,6,0,228,176,3,0,228,128,4,0,0,4,1,0,7,128,1,0,170,128,4,0,228,176,3,0,228,128,36,0,0,2,3,0,7,128,1,0,228,128,6,0,0,2,2,0,8,128,4,0,255,128,8,0,0,3,1,0,17,128,5,0,228,128,3,0,228,128,32,0,0,3,3,0,8,128,1,0,95,0,128,1,0,255,160,4,0,0,4,2,0,8,128,2,0,255,128,3,0,85,160,3,0,0,160,5,0,0,3,1,0,7,128,2,0,228,128,4,0,255,128,4,0,0,4,2,0,8,128,6,0,0,128,3,0,170,160,2,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,4,0,0,4,2,0,7,128,3,0,228,176,4,0,255,161,4,0,228,160,5,96,0,0,3,4,0,8,128,1,0,255,128,2,0,255,128,8,0,0,3,5,0,1,128,2,0,228,128,2,0,228,128,8,0,0,3,1,0,17,128,1,0,228,128,3,0,228,128,7,0,0,2,5,0,8,128,5,0,0,128,5,0,0,3,4,0,8,128,3,0,255,128,4,0,255,128,4,0,0,4,4,0,7,128,2,0,228,128,5,0,255,128,4,0,228,128,5,97,0,0,3,6,0,8,128,2,0,255,128,1,0,0,128,36,0,0,2,1,0,7,128,4,0,228,128,6,0,0,2,2,0,8,128,5,0,255,128,8,0,0,3,1,0,17,128,1,0,228,128,3,0,228,128,32,0,0,3,3,0,8,128,1,0,0,128,5,0,255,160,4,0,0,4,2,0,8,128,2,0,255,128,7,0,85,160,7,0,0,160,5,0,0,3,1,0,98,7,128,6,0,255,128,2,0,228,160,4,0,0,4,2,0,8,128,5,0,0,128,7,0,170,160,2,0,255,128,5,0,0,3,2,0,7,128,2,0,228,128,5,0,255,128,6,0,0,2,2,0,8,128,2,0,255,128,8,0,0,3,2,0,17,128,2,0,228,128,3,0,228,128,5,0,0,3,1,0,8,128,1,0,255,128,2,0,255,128,4,0,0,4,1,0,7,128,99,1,0,228,160,4,0,255,128,1,0,228,128,5,0,0,3,2,0,8,128,2,0,255,128,2,0,0,128,5,0,0,3,1,0,8,128,3,0,255,128,1,0,255,128,5,0,0,3,2,0,7,128,2,0,255,128,6,0,228,160,4,0,0,4,2,0,7,128,5,0,228,160,1,0,255,128,2,0,228,128,2,0,0,3,1,0,7,128,1,0,228,128,2,0,228,128,2,0,0,73,3,1,0,7,128,1,0,228,128,0,0,228,176,1,0,0,2,1,0,8,128,0,0,255,176,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,128,5,0,0,3,0,0,15,128,0,0,228,128,1,0,228,176,1,0,0,2,0,8,15,128,0,0,228,128,255,255,0,0};
	}
}

#else
namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 2 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0.init_gd = state.DeviceUniqueIndex;
			vs0ps0.id_0 = state.GetNameUniqueID("ambient");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx0);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0.gd))
			{
				return;
			}
			vs0ps0.gd = devIndex;
			if ((vs0ps0.vs != null))
			{
				vs0ps0.vs.Dispose();
				vs0ps0.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0.vs, out vs0ps0.ps, vs0ps0.vsb, vs0ps0.psb, 14, 2, 0, 0);
			if ((vs0ps0.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0ps0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0.vs, vs0ps0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0._init(state);
			}
			if ((name_uid == vs0ps0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0};
		
readonly 
		
		private static int[] _vusage = new int[] {0};
		
		protected override int GetVertexInputCount()
		{
			return 1;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 3 instruction slots used (1 texture, 2 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0t.init_gd = state.DeviceUniqueIndex;
			vs0ps0t.id_0 = state.GetNameUniqueID("ambient");
			vs0ps0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ps0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx2);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0t.gd))
			{
				return;
			}
			vs0ps0t.gd = devIndex;
			if ((vs0ps0t.vs != null))
			{
				vs0ps0t.vs.Dispose();
				vs0ps0t.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0t.vs, out vs0ps0t.ps, vs0ps0t.vsb, vs0ps0t.psb, 14, 3, 0, 0);
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((vs0ps0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0t.vs, vs0ps0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ps0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0t._init(state);
			}
			if ((name_uid == vs0ps0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,5};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 2 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0c.init_gd = state.DeviceUniqueIndex;
			vs0ps0c.id_0 = state.GetNameUniqueID("ambient");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx4);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0c.gd))
			{
				return;
			}
			vs0ps0c.gd = devIndex;
			if ((vs0ps0c.vs != null))
			{
				vs0ps0c.vs.Dispose();
				vs0ps0c.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0c.vs, out vs0ps0c.ps, vs0ps0c.vsb, vs0ps0c.psb, 14, 2, 0, 0);
			if ((vs0ps0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0ps0c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0c.vs, vs0ps0c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0c._init(state);
			}
			if ((name_uid == vs0ps0c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,10};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 13 instruction slots used</para><para>PS: approximately 3 instruction slots used (1 texture, 2 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ps0tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ps0tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ps0tc.init_gd = state.DeviceUniqueIndex;
			vs0ps0tc.id_0 = state.GetNameUniqueID("ambient");
			vs0ps0tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ps0tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx5);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ps0tc.gd))
			{
				return;
			}
			vs0ps0tc.gd = devIndex;
			if ((vs0ps0tc.vs != null))
			{
				vs0ps0tc.vs.Dispose();
				vs0ps0tc.ps.Dispose();
			}
			state.CreateShaders(out vs0ps0tc.vs, out vs0ps0tc.ps, vs0ps0tc.vsb, vs0ps0tc.psb, 14, 3, 0, 0);
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((vs0ps0tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ps0tc.vs, vs0ps0tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ps0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0ps0tc._init(state);
			}
			if ((name_uid == vs0ps0tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ps0tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ps0tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 19 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0.init_gd = state.DeviceUniqueIndex;
			vs0.id_0 = state.GetNameUniqueID("ambient");
			vs0.id_1 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx6);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0.gd))
			{
				return;
			}
			vs0.gd = devIndex;
			if ((vs0.vs != null))
			{
				vs0.vs.Dispose();
				vs0.ps.Dispose();
			}
			state.CreateShaders(out vs0.vs, out vs0.ps, vs0.vsb, vs0.psb, 20, 1, 0, 0);
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0.vs, vs0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
			if ((name_uid == vs0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0.init_gd != state.DeviceUniqueIndex))
			{
				vs0._init(state);
			}
			if ((name_uid == vs0.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 46 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1.init_gd = state.DeviceUniqueIndex;
			vs1.id_0 = state.GetNameUniqueID("ambient");
			vs1.id_1 = state.GetNameUniqueID("v_lights");
			vs1.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx8);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1.gd))
			{
				return;
			}
			vs1.gd = devIndex;
			if ((vs1.vs != null))
			{
				vs1.vs.Dispose();
				vs1.ps.Dispose();
			}
			state.CreateShaders(out vs1.vs, out vs1.ps, vs1.vsb, vs1.psb, 41, 1, 0, 0);
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1.vs, vs1.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
			if ((name_uid == vs1.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1.init_gd != state.DeviceUniqueIndex))
			{
				vs1._init(state);
			}
			if ((name_uid == vs1.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 91 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3.init_gd = state.DeviceUniqueIndex;
			vs3.id_0 = state.GetNameUniqueID("ambient");
			vs3.id_1 = state.GetNameUniqueID("v_lights");
			vs3.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx9);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3.gd))
			{
				return;
			}
			vs3.gd = devIndex;
			if ((vs3.vs != null))
			{
				vs3.vs.Dispose();
				vs3.ps.Dispose();
			}
			state.CreateShaders(out vs3.vs, out vs3.ps, vs3.vsb, vs3.psb, 76, 1, 0, 0);
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3.vs, vs3.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
			if ((name_uid == vs3.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3.init_gd != state.DeviceUniqueIndex))
			{
				vs3._init(state);
			}
			if ((name_uid == vs3.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 157 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6.init_gd = state.DeviceUniqueIndex;
			vs6.id_0 = state.GetNameUniqueID("ambient");
			vs6.id_1 = state.GetNameUniqueID("v_lights");
			vs6.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx10);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6.gd))
			{
				return;
			}
			vs6.gd = devIndex;
			if ((vs6.vs != null))
			{
				vs6.vs.Dispose();
				vs6.ps.Dispose();
			}
			state.CreateShaders(out vs6.vs, out vs6.ps, vs6.vsb, vs6.psb, 130, 1, 0, 0);
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6.vs, vs6.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
			if ((name_uid == vs6.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6.init_gd != state.DeviceUniqueIndex))
			{
				vs6._init(state);
			}
			if ((name_uid == vs6.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3};
		
		protected override int GetVertexInputCount()
		{
			return 2;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 19 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0t.init_gd = state.DeviceUniqueIndex;
			vs0t.id_0 = state.GetNameUniqueID("ambient");
			vs0t.id_1 = state.GetNameUniqueID("p_lights");
			vs0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx11);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0t.gd))
			{
				return;
			}
			vs0t.gd = devIndex;
			if ((vs0t.vs != null))
			{
				vs0t.vs.Dispose();
				vs0t.ps.Dispose();
			}
			state.CreateShaders(out vs0t.vs, out vs0t.ps, vs0t.vsb, vs0t.psb, 20, 3, 0, 0);
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0t.vs, vs0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0t.init_gd != state.DeviceUniqueIndex))
			{
				vs0t._init(state);
			}
			if ((name_uid == vs0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 46 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1t.init_gd = state.DeviceUniqueIndex;
			vs1t.id_0 = state.GetNameUniqueID("ambient");
			vs1t.id_1 = state.GetNameUniqueID("v_lights");
			vs1t.id_2 = state.GetNameUniqueID("p_lights");
			vs1t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx13);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1t.gd))
			{
				return;
			}
			vs1t.gd = devIndex;
			if ((vs1t.vs != null))
			{
				vs1t.vs.Dispose();
				vs1t.ps.Dispose();
			}
			state.CreateShaders(out vs1t.vs, out vs1t.ps, vs1t.vsb, vs1t.psb, 41, 3, 0, 0);
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1t.vs, vs1t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1t.init_gd != state.DeviceUniqueIndex))
			{
				vs1t._init(state);
			}
			if ((name_uid == vs1t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 91 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3t.init_gd = state.DeviceUniqueIndex;
			vs3t.id_0 = state.GetNameUniqueID("ambient");
			vs3t.id_1 = state.GetNameUniqueID("v_lights");
			vs3t.id_2 = state.GetNameUniqueID("p_lights");
			vs3t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx14);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3t.gd))
			{
				return;
			}
			vs3t.gd = devIndex;
			if ((vs3t.vs != null))
			{
				vs3t.vs.Dispose();
				vs3t.ps.Dispose();
			}
			state.CreateShaders(out vs3t.vs, out vs3t.ps, vs3t.vsb, vs3t.psb, 76, 3, 0, 0);
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3t.vs, vs3t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3t.init_gd != state.DeviceUniqueIndex))
			{
				vs3t._init(state);
			}
			if ((name_uid == vs3t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 157 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6t.init_gd = state.DeviceUniqueIndex;
			vs6t.id_0 = state.GetNameUniqueID("ambient");
			vs6t.id_1 = state.GetNameUniqueID("v_lights");
			vs6t.id_2 = state.GetNameUniqueID("p_lights");
			vs6t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6t.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6t.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx15);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6t.gd))
			{
				return;
			}
			vs6t.gd = devIndex;
			if ((vs6t.vs != null))
			{
				vs6t.vs.Dispose();
				vs6t.ps.Dispose();
			}
			state.CreateShaders(out vs6t.vs, out vs6t.ps, vs6t.vsb, vs6t.psb, 130, 3, 0, 0);
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6t.vs, vs6t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6t.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6t.init_gd != state.DeviceUniqueIndex))
			{
				vs6t._init(state);
			}
			if ((name_uid == vs6t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6t.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 19 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0c.init_gd = state.DeviceUniqueIndex;
			vs0c.id_0 = state.GetNameUniqueID("ambient");
			vs0c.id_1 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx16);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0c.gd))
			{
				return;
			}
			vs0c.gd = devIndex;
			if ((vs0c.vs != null))
			{
				vs0c.vs.Dispose();
				vs0c.ps.Dispose();
			}
			state.CreateShaders(out vs0c.vs, out vs0c.ps, vs0c.vsb, vs0c.psb, 20, 1, 0, 0);
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0c.vs, vs0c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
			if ((name_uid == vs0c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0c.init_gd != state.DeviceUniqueIndex))
			{
				vs0c._init(state);
			}
			if ((name_uid == vs0c.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 46 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1c.init_gd = state.DeviceUniqueIndex;
			vs1c.id_0 = state.GetNameUniqueID("ambient");
			vs1c.id_1 = state.GetNameUniqueID("v_lights");
			vs1c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx17);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1c.gd))
			{
				return;
			}
			vs1c.gd = devIndex;
			if ((vs1c.vs != null))
			{
				vs1c.vs.Dispose();
				vs1c.ps.Dispose();
			}
			state.CreateShaders(out vs1c.vs, out vs1c.ps, vs1c.vsb, vs1c.psb, 41, 1, 0, 0);
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1c.vs, vs1c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
			if ((name_uid == vs1c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1c.init_gd != state.DeviceUniqueIndex))
			{
				vs1c._init(state);
			}
			if ((name_uid == vs1c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 91 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3c.init_gd = state.DeviceUniqueIndex;
			vs3c.id_0 = state.GetNameUniqueID("ambient");
			vs3c.id_1 = state.GetNameUniqueID("v_lights");
			vs3c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx18);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3c.gd))
			{
				return;
			}
			vs3c.gd = devIndex;
			if ((vs3c.vs != null))
			{
				vs3c.vs.Dispose();
				vs3c.ps.Dispose();
			}
			state.CreateShaders(out vs3c.vs, out vs3c.ps, vs3c.vsb, vs3c.psb, 76, 1, 0, 0);
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3c.vs, vs3c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
			if ((name_uid == vs3c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3c.init_gd != state.DeviceUniqueIndex))
			{
				vs3c._init(state);
			}
			if ((name_uid == vs3c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 157 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6c : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6c()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6c.init_gd = state.DeviceUniqueIndex;
			vs6c.id_0 = state.GetNameUniqueID("ambient");
			vs6c.id_1 = state.GetNameUniqueID("v_lights");
			vs6c.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx19);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6c.gd))
			{
				return;
			}
			vs6c.gd = devIndex;
			if ((vs6c.vs != null))
			{
				vs6c.vs.Dispose();
				vs6c.ps.Dispose();
			}
			state.CreateShaders(out vs6c.vs, out vs6c.ps, vs6c.vsb, vs6c.psb, 130, 1, 0, 0);
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6c.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6c.vs, vs6c.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
			if ((name_uid == vs6c.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6c.init_gd != state.DeviceUniqueIndex))
			{
				vs6c._init(state);
			}
			if ((name_uid == vs6c.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6c.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 3;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6c._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6c._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 19 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tc.init_gd = state.DeviceUniqueIndex;
			vs0tc.id_0 = state.GetNameUniqueID("ambient");
			vs0tc.id_1 = state.GetNameUniqueID("p_lights");
			vs0tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx20);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tc.gd))
			{
				return;
			}
			vs0tc.gd = devIndex;
			if ((vs0tc.vs != null))
			{
				vs0tc.vs.Dispose();
				vs0tc.ps.Dispose();
			}
			state.CreateShaders(out vs0tc.vs, out vs0tc.ps, vs0tc.vsb, vs0tc.psb, 20, 3, 0, 0);
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tc.vs, vs0tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tc.init_gd != state.DeviceUniqueIndex))
			{
				vs0tc._init(state);
			}
			if ((name_uid == vs0tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 46 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tc.init_gd = state.DeviceUniqueIndex;
			vs1tc.id_0 = state.GetNameUniqueID("ambient");
			vs1tc.id_1 = state.GetNameUniqueID("v_lights");
			vs1tc.id_2 = state.GetNameUniqueID("p_lights");
			vs1tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx21);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tc.gd))
			{
				return;
			}
			vs1tc.gd = devIndex;
			if ((vs1tc.vs != null))
			{
				vs1tc.vs.Dispose();
				vs1tc.ps.Dispose();
			}
			state.CreateShaders(out vs1tc.vs, out vs1tc.ps, vs1tc.vsb, vs1tc.psb, 41, 3, 0, 0);
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tc.vs, vs1tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tc.init_gd != state.DeviceUniqueIndex))
			{
				vs1tc._init(state);
			}
			if ((name_uid == vs1tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 91 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tc.init_gd = state.DeviceUniqueIndex;
			vs3tc.id_0 = state.GetNameUniqueID("ambient");
			vs3tc.id_1 = state.GetNameUniqueID("v_lights");
			vs3tc.id_2 = state.GetNameUniqueID("p_lights");
			vs3tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx22);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tc.gd))
			{
				return;
			}
			vs3tc.gd = devIndex;
			if ((vs3tc.vs != null))
			{
				vs3tc.vs.Dispose();
				vs3tc.ps.Dispose();
			}
			state.CreateShaders(out vs3tc.vs, out vs3tc.ps, vs3tc.vsb, vs3tc.psb, 76, 3, 0, 0);
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tc.vs, vs3tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tc.init_gd != state.DeviceUniqueIndex))
			{
				vs3tc._init(state);
			}
			if ((name_uid == vs3tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 157 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tc.init_gd = state.DeviceUniqueIndex;
			vs6tc.id_0 = state.GetNameUniqueID("ambient");
			vs6tc.id_1 = state.GetNameUniqueID("v_lights");
			vs6tc.id_2 = state.GetNameUniqueID("p_lights");
			vs6tc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx23);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tc.gd))
			{
				return;
			}
			vs6tc.gd = devIndex;
			if ((vs6tc.vs != null))
			{
				vs6tc.vs.Dispose();
				vs6tc.ps.Dispose();
			}
			state.CreateShaders(out vs6tc.vs, out vs6tc.ps, vs6tc.vsb, vs6tc.psb, 130, 3, 0, 0);
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tc.vs, vs6tc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tc.init_gd != state.DeviceUniqueIndex))
			{
				vs6tc._init(state);
			}
			if ((name_uid == vs6tc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 33 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0nc.init_gd = state.DeviceUniqueIndex;
			vs0nc.id_0 = state.GetNameUniqueID("ambient");
			vs0nc.id_1 = state.GetNameUniqueID("p_lights");
			vs0nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx24);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0nc.gd))
			{
				return;
			}
			vs0nc.gd = devIndex;
			if ((vs0nc.vs != null))
			{
				vs0nc.vs.Dispose();
				vs0nc.ps.Dispose();
			}
			state.CreateShaders(out vs0nc.vs, out vs0nc.ps, vs0nc.vsb, vs0nc.psb, 34, 3, 0, 0);
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0nc.vs, vs0nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0nc.init_gd != state.DeviceUniqueIndex))
			{
				vs0nc._init(state);
			}
			if ((name_uid == vs0nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 60 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1nc.init_gd = state.DeviceUniqueIndex;
			vs1nc.id_0 = state.GetNameUniqueID("ambient");
			vs1nc.id_1 = state.GetNameUniqueID("v_lights");
			vs1nc.id_2 = state.GetNameUniqueID("p_lights");
			vs1nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx25);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1nc.gd))
			{
				return;
			}
			vs1nc.gd = devIndex;
			if ((vs1nc.vs != null))
			{
				vs1nc.vs.Dispose();
				vs1nc.ps.Dispose();
			}
			state.CreateShaders(out vs1nc.vs, out vs1nc.ps, vs1nc.vsb, vs1nc.psb, 55, 3, 0, 0);
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1nc.vs, vs1nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1nc.init_gd != state.DeviceUniqueIndex))
			{
				vs1nc._init(state);
			}
			if ((name_uid == vs1nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 105 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3nc.init_gd = state.DeviceUniqueIndex;
			vs3nc.id_0 = state.GetNameUniqueID("ambient");
			vs3nc.id_1 = state.GetNameUniqueID("v_lights");
			vs3nc.id_2 = state.GetNameUniqueID("p_lights");
			vs3nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx26);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3nc.gd))
			{
				return;
			}
			vs3nc.gd = devIndex;
			if ((vs3nc.vs != null))
			{
				vs3nc.vs.Dispose();
				vs3nc.ps.Dispose();
			}
			state.CreateShaders(out vs3nc.vs, out vs3nc.ps, vs3nc.vsb, vs3nc.psb, 90, 3, 0, 0);
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3nc.vs, vs3nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3nc.init_gd != state.DeviceUniqueIndex))
			{
				vs3nc._init(state);
			}
			if ((name_uid == vs3nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 171 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6nc : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6nc()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6nc.init_gd = state.DeviceUniqueIndex;
			vs6nc.id_0 = state.GetNameUniqueID("ambient");
			vs6nc.id_1 = state.GetNameUniqueID("v_lights");
			vs6nc.id_2 = state.GetNameUniqueID("p_lights");
			vs6nc.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6nc.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6nc.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6nc.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx27);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6nc.gd))
			{
				return;
			}
			vs6nc.gd = devIndex;
			if ((vs6nc.vs != null))
			{
				vs6nc.vs.Dispose();
				vs6nc.ps.Dispose();
			}
			state.CreateShaders(out vs6nc.vs, out vs6nc.ps, vs6nc.vsb, vs6nc.psb, 144, 3, 0, 0);
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6nc.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6nc.vs, vs6nc.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6nc.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6nc.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6nc.init_gd != state.DeviceUniqueIndex))
			{
				vs6nc._init(state);
			}
			if ((name_uid == vs6nc.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6nc.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6nc._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6nc._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 33 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0n.init_gd = state.DeviceUniqueIndex;
			vs0n.id_0 = state.GetNameUniqueID("ambient");
			vs0n.id_1 = state.GetNameUniqueID("p_lights");
			vs0n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(14);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx28);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0n.gd))
			{
				return;
			}
			vs0n.gd = devIndex;
			if ((vs0n.vs != null))
			{
				vs0n.vs.Dispose();
				vs0n.ps.Dispose();
			}
			state.CreateShaders(out vs0n.vs, out vs0n.ps, vs0n.vsb, vs0n.psb, 34, 3, 0, 0);
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0n.vs, vs0n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.id_1))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0n.init_gd != state.DeviceUniqueIndex))
			{
				vs0n._init(state);
			}
			if ((name_uid == vs0n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 60 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1n.init_gd = state.DeviceUniqueIndex;
			vs1n.id_0 = state.GetNameUniqueID("ambient");
			vs1n.id_1 = state.GetNameUniqueID("v_lights");
			vs1n.id_2 = state.GetNameUniqueID("p_lights");
			vs1n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(18);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx29);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1n.gd))
			{
				return;
			}
			vs1n.gd = devIndex;
			if ((vs1n.vs != null))
			{
				vs1n.vs.Dispose();
				vs1n.ps.Dispose();
			}
			state.CreateShaders(out vs1n.vs, out vs1n.ps, vs1n.vsb, vs1n.psb, 55, 3, 0, 0);
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1n.vs, vs1n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1n.init_gd != state.DeviceUniqueIndex))
			{
				vs1n._init(state);
			}
			if ((name_uid == vs1n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,18};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 105 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3n.init_gd = state.DeviceUniqueIndex;
			vs3n.id_0 = state.GetNameUniqueID("ambient");
			vs3n.id_1 = state.GetNameUniqueID("v_lights");
			vs3n.id_2 = state.GetNameUniqueID("p_lights");
			vs3n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(26);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx30);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3n.gd))
			{
				return;
			}
			vs3n.gd = devIndex;
			if ((vs3n.vs != null))
			{
				vs3n.vs.Dispose();
				vs3n.ps.Dispose();
			}
			state.CreateShaders(out vs3n.vs, out vs3n.ps, vs3n.vsb, vs3n.psb, 90, 3, 0, 0);
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3n.vs, vs3n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3n.init_gd != state.DeviceUniqueIndex))
			{
				vs3n._init(state);
			}
			if ((name_uid == vs3n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,26};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 171 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6n : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6n()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6n.init_gd = state.DeviceUniqueIndex;
			vs6n.id_0 = state.GetNameUniqueID("ambient");
			vs6n.id_1 = state.GetNameUniqueID("v_lights");
			vs6n.id_2 = state.GetNameUniqueID("p_lights");
			vs6n.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6n.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6n.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6n.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx31);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6n.gd))
			{
				return;
			}
			vs6n.gd = devIndex;
			if ((vs6n.vs != null))
			{
				vs6n.vs.Dispose();
				vs6n.ps.Dispose();
			}
			state.CreateShaders(out vs6n.vs, out vs6n.ps, vs6n.vsb, vs6n.psb, 144, 3, 0, 0);
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6n.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6n.vs, vs6n.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6n.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6n.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6n.init_gd != state.DeviceUniqueIndex))
			{
				vs6n._init(state);
			}
			if ((name_uid == vs6n.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6n.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6n._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6n._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 41 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0b.init_gd = state.DeviceUniqueIndex;
			vs0b.id_0 = state.GetNameUniqueID("ambient");
			vs0b.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0b.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx32);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0b.gd))
			{
				return;
			}
			vs0b.gd = devIndex;
			if ((vs0b.vs != null))
			{
				vs0b.vs.Dispose();
				vs0b.ps.Dispose();
			}
			state.CreateShaders(out vs0b.vs, out vs0b.ps, vs0b.vsb, vs0b.psb, 42, 1, 0, 0);
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0b.vs, vs0b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
			if ((name_uid == vs0b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0b.init_gd != state.DeviceUniqueIndex))
			{
				vs0b._init(state);
			}
			if ((name_uid == vs0b.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0b.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 67 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1b.init_gd = state.DeviceUniqueIndex;
			vs1b.id_0 = state.GetNameUniqueID("ambient");
			vs1b.id_1 = state.GetNameUniqueID("v_lights");
			vs1b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx33);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1b.gd))
			{
				return;
			}
			vs1b.gd = devIndex;
			if ((vs1b.vs != null))
			{
				vs1b.vs.Dispose();
				vs1b.ps.Dispose();
			}
			state.CreateShaders(out vs1b.vs, out vs1b.ps, vs1b.vsb, vs1b.psb, 62, 1, 0, 0);
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1b.vs, vs1b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
			if ((name_uid == vs1b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1b.init_gd != state.DeviceUniqueIndex))
			{
				vs1b._init(state);
			}
			if ((name_uid == vs1b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 112 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3b.init_gd = state.DeviceUniqueIndex;
			vs3b.id_0 = state.GetNameUniqueID("ambient");
			vs3b.id_1 = state.GetNameUniqueID("v_lights");
			vs3b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx34);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3b.gd))
			{
				return;
			}
			vs3b.gd = devIndex;
			if ((vs3b.vs != null))
			{
				vs3b.vs.Dispose();
				vs3b.ps.Dispose();
			}
			state.CreateShaders(out vs3b.vs, out vs3b.ps, vs3b.vsb, vs3b.psb, 97, 1, 0, 0);
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3b.vs, vs3b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
			if ((name_uid == vs3b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3b.init_gd != state.DeviceUniqueIndex))
			{
				vs3b._init(state);
			}
			if ((name_uid == vs3b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 178 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6b : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6b()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6b.init_gd = state.DeviceUniqueIndex;
			vs6b.id_0 = state.GetNameUniqueID("ambient");
			vs6b.id_1 = state.GetNameUniqueID("v_lights");
			vs6b.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6b.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx35);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6b.gd))
			{
				return;
			}
			vs6b.gd = devIndex;
			if ((vs6b.vs != null))
			{
				vs6b.vs.Dispose();
				vs6b.ps.Dispose();
			}
			state.CreateShaders(out vs6b.vs, out vs6b.ps, vs6b.vsb, vs6b.psb, 151, 1, 0, 0);
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6b.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6b.vs, vs6b.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
			if ((name_uid == vs6b.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6b.init_gd != state.DeviceUniqueIndex))
			{
				vs6b._init(state);
			}
			if ((name_uid == vs6b.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6b.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6b.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3};
		
		protected override int GetVertexInputCount()
		{
			return 4;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6b._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6b._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 41 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tb.init_gd = state.DeviceUniqueIndex;
			vs0tb.id_0 = state.GetNameUniqueID("ambient");
			vs0tb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0tb.id_2 = state.GetNameUniqueID("p_lights");
			vs0tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx36);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tb.gd))
			{
				return;
			}
			vs0tb.gd = devIndex;
			if ((vs0tb.vs != null))
			{
				vs0tb.vs.Dispose();
				vs0tb.ps.Dispose();
			}
			state.CreateShaders(out vs0tb.vs, out vs0tb.ps, vs0tb.vsb, vs0tb.psb, 42, 3, 0, 0);
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tb.vs, vs0tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0tb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tb._init(state);
			}
			if ((name_uid == vs0tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 67 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tb.init_gd = state.DeviceUniqueIndex;
			vs1tb.id_0 = state.GetNameUniqueID("ambient");
			vs1tb.id_1 = state.GetNameUniqueID("v_lights");
			vs1tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1tb.id_3 = state.GetNameUniqueID("p_lights");
			vs1tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx37);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tb.gd))
			{
				return;
			}
			vs1tb.gd = devIndex;
			if ((vs1tb.vs != null))
			{
				vs1tb.vs.Dispose();
				vs1tb.ps.Dispose();
			}
			state.CreateShaders(out vs1tb.vs, out vs1tb.ps, vs1tb.vsb, vs1tb.psb, 62, 3, 0, 0);
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tb.vs, vs1tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tb._init(state);
			}
			if ((name_uid == vs1tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 112 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tb.init_gd = state.DeviceUniqueIndex;
			vs3tb.id_0 = state.GetNameUniqueID("ambient");
			vs3tb.id_1 = state.GetNameUniqueID("v_lights");
			vs3tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3tb.id_3 = state.GetNameUniqueID("p_lights");
			vs3tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx38);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tb.gd))
			{
				return;
			}
			vs3tb.gd = devIndex;
			if ((vs3tb.vs != null))
			{
				vs3tb.vs.Dispose();
				vs3tb.ps.Dispose();
			}
			state.CreateShaders(out vs3tb.vs, out vs3tb.ps, vs3tb.vsb, vs3tb.psb, 97, 3, 0, 0);
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tb.vs, vs3tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tb._init(state);
			}
			if ((name_uid == vs3tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 178 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tb.init_gd = state.DeviceUniqueIndex;
			vs6tb.id_0 = state.GetNameUniqueID("ambient");
			vs6tb.id_1 = state.GetNameUniqueID("v_lights");
			vs6tb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6tb.id_3 = state.GetNameUniqueID("p_lights");
			vs6tb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx39);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tb.gd))
			{
				return;
			}
			vs6tb.gd = devIndex;
			if ((vs6tb.vs != null))
			{
				vs6tb.vs.Dispose();
				vs6tb.ps.Dispose();
			}
			state.CreateShaders(out vs6tb.vs, out vs6tb.ps, vs6tb.vsb, vs6tb.psb, 151, 3, 0, 0);
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tb.vs, vs6tb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6tb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tb._init(state);
			}
			if ((name_uid == vs6tb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 41 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0cb.init_gd = state.DeviceUniqueIndex;
			vs0cb.id_0 = state.GetNameUniqueID("ambient");
			vs0cb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0cb.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx40);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0cb.gd))
			{
				return;
			}
			vs0cb.gd = devIndex;
			if ((vs0cb.vs != null))
			{
				vs0cb.vs.Dispose();
				vs0cb.ps.Dispose();
			}
			state.CreateShaders(out vs0cb.vs, out vs0cb.ps, vs0cb.vsb, vs0cb.psb, 42, 1, 0, 0);
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs0cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0cb.vs, vs0cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
			if ((name_uid == vs0cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0cb.init_gd != state.DeviceUniqueIndex))
			{
				vs0cb._init(state);
			}
			if ((name_uid == vs0cb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0cb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 67 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1cb.init_gd = state.DeviceUniqueIndex;
			vs1cb.id_0 = state.GetNameUniqueID("ambient");
			vs1cb.id_1 = state.GetNameUniqueID("v_lights");
			vs1cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx41);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1cb.gd))
			{
				return;
			}
			vs1cb.gd = devIndex;
			if ((vs1cb.vs != null))
			{
				vs1cb.vs.Dispose();
				vs1cb.ps.Dispose();
			}
			state.CreateShaders(out vs1cb.vs, out vs1cb.ps, vs1cb.vsb, vs1cb.psb, 62, 1, 0, 0);
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs1cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1cb.vs, vs1cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
			if ((name_uid == vs1cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1cb.init_gd != state.DeviceUniqueIndex))
			{
				vs1cb._init(state);
			}
			if ((name_uid == vs1cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 112 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3cb.init_gd = state.DeviceUniqueIndex;
			vs3cb.id_0 = state.GetNameUniqueID("ambient");
			vs3cb.id_1 = state.GetNameUniqueID("v_lights");
			vs3cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx42);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3cb.gd))
			{
				return;
			}
			vs3cb.gd = devIndex;
			if ((vs3cb.vs != null))
			{
				vs3cb.vs.Dispose();
				vs3cb.ps.Dispose();
			}
			state.CreateShaders(out vs3cb.vs, out vs3cb.ps, vs3cb.vsb, vs3cb.psb, 97, 1, 0, 0);
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs3cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3cb.vs, vs3cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
			if ((name_uid == vs3cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3cb.init_gd != state.DeviceUniqueIndex))
			{
				vs3cb._init(state);
			}
			if ((name_uid == vs3cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 178 instruction slots used</para><para>PS: approximately 1 instruction slot used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6cb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6cb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6cb.init_gd = state.DeviceUniqueIndex;
			vs6cb.id_0 = state.GetNameUniqueID("ambient");
			vs6cb.id_1 = state.GetNameUniqueID("v_lights");
			vs6cb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6cb.id_3 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx43);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx7);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6cb.gd))
			{
				return;
			}
			vs6cb.gd = devIndex;
			if ((vs6cb.vs != null))
			{
				vs6cb.vs.Dispose();
				vs6cb.ps.Dispose();
			}
			state.CreateShaders(out vs6cb.vs, out vs6cb.ps, vs6cb.vsb, vs6cb.psb, 151, 1, 0, 0);
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((vs6cb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6cb.vs, vs6cb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
			if ((name_uid == vs6cb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6cb.init_gd != state.DeviceUniqueIndex))
			{
				vs6cb._init(state);
			}
			if ((name_uid == vs6cb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6cb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6cb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,10};
		
		protected override int GetVertexInputCount()
		{
			return 5;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6cb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6cb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 41 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0tcb.init_gd = state.DeviceUniqueIndex;
			vs0tcb.id_0 = state.GetNameUniqueID("ambient");
			vs0tcb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0tcb.id_2 = state.GetNameUniqueID("p_lights");
			vs0tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx44);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0tcb.gd))
			{
				return;
			}
			vs0tcb.gd = devIndex;
			if ((vs0tcb.vs != null))
			{
				vs0tcb.vs.Dispose();
				vs0tcb.ps.Dispose();
			}
			state.CreateShaders(out vs0tcb.vs, out vs0tcb.ps, vs0tcb.vsb, vs0tcb.psb, 42, 3, 0, 0);
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0tcb.vs, vs0tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0tcb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs0tcb._init(state);
			}
			if ((name_uid == vs0tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 67 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1tcb.init_gd = state.DeviceUniqueIndex;
			vs1tcb.id_0 = state.GetNameUniqueID("ambient");
			vs1tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs1tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs1tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx45);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1tcb.gd))
			{
				return;
			}
			vs1tcb.gd = devIndex;
			if ((vs1tcb.vs != null))
			{
				vs1tcb.vs.Dispose();
				vs1tcb.ps.Dispose();
			}
			state.CreateShaders(out vs1tcb.vs, out vs1tcb.ps, vs1tcb.vsb, vs1tcb.psb, 62, 3, 0, 0);
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1tcb.vs, vs1tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs1tcb._init(state);
			}
			if ((name_uid == vs1tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 112 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3tcb.init_gd = state.DeviceUniqueIndex;
			vs3tcb.id_0 = state.GetNameUniqueID("ambient");
			vs3tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs3tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs3tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx46);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3tcb.gd))
			{
				return;
			}
			vs3tcb.gd = devIndex;
			if ((vs3tcb.vs != null))
			{
				vs3tcb.vs.Dispose();
				vs3tcb.ps.Dispose();
			}
			state.CreateShaders(out vs3tcb.vs, out vs3tcb.ps, vs3tcb.vsb, vs3tcb.psb, 97, 3, 0, 0);
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3tcb.vs, vs3tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs3tcb._init(state);
			}
			if ((name_uid == vs3tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 178 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6tcb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6tcb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6tcb.init_gd = state.DeviceUniqueIndex;
			vs6tcb.id_0 = state.GetNameUniqueID("ambient");
			vs6tcb.id_1 = state.GetNameUniqueID("v_lights");
			vs6tcb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6tcb.id_3 = state.GetNameUniqueID("p_lights");
			vs6tcb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6tcb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6tcb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6tcb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx47);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6tcb.gd))
			{
				return;
			}
			vs6tcb.gd = devIndex;
			if ((vs6tcb.vs != null))
			{
				vs6tcb.vs.Dispose();
				vs6tcb.ps.Dispose();
			}
			state.CreateShaders(out vs6tcb.vs, out vs6tcb.ps, vs6tcb.vsb, vs6tcb.psb, 151, 3, 0, 0);
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6tcb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6tcb.vs, vs6tcb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6tcb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6tcb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6tcb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6tcb.init_gd != state.DeviceUniqueIndex))
			{
				vs6tcb._init(state);
			}
			if ((name_uid == vs6tcb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6tcb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,10};
		
		protected override int GetVertexInputCount()
		{
			return 6;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6tcb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6tcb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 63 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0ncb.init_gd = state.DeviceUniqueIndex;
			vs0ncb.id_0 = state.GetNameUniqueID("ambient");
			vs0ncb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0ncb.id_2 = state.GetNameUniqueID("p_lights");
			vs0ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx48);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0ncb.gd))
			{
				return;
			}
			vs0ncb.gd = devIndex;
			if ((vs0ncb.vs != null))
			{
				vs0ncb.vs.Dispose();
				vs0ncb.ps.Dispose();
			}
			state.CreateShaders(out vs0ncb.vs, out vs0ncb.ps, vs0ncb.vsb, vs0ncb.psb, 64, 3, 0, 0);
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0ncb.vs, vs0ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0ncb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs0ncb._init(state);
			}
			if ((name_uid == vs0ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 89 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1ncb.init_gd = state.DeviceUniqueIndex;
			vs1ncb.id_0 = state.GetNameUniqueID("ambient");
			vs1ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs1ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs1ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx49);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1ncb.gd))
			{
				return;
			}
			vs1ncb.gd = devIndex;
			if ((vs1ncb.vs != null))
			{
				vs1ncb.vs.Dispose();
				vs1ncb.ps.Dispose();
			}
			state.CreateShaders(out vs1ncb.vs, out vs1ncb.ps, vs1ncb.vsb, vs1ncb.psb, 84, 3, 0, 0);
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1ncb.vs, vs1ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs1ncb._init(state);
			}
			if ((name_uid == vs1ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 134 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3ncb.init_gd = state.DeviceUniqueIndex;
			vs3ncb.id_0 = state.GetNameUniqueID("ambient");
			vs3ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs3ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs3ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx50);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3ncb.gd))
			{
				return;
			}
			vs3ncb.gd = devIndex;
			if ((vs3ncb.vs != null))
			{
				vs3ncb.vs.Dispose();
				vs3ncb.ps.Dispose();
			}
			state.CreateShaders(out vs3ncb.vs, out vs3ncb.ps, vs3ncb.vsb, vs3ncb.psb, 119, 3, 0, 0);
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3ncb.vs, vs3ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs3ncb._init(state);
			}
			if ((name_uid == vs3ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 200 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6ncb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6ncb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6ncb.init_gd = state.DeviceUniqueIndex;
			vs6ncb.id_0 = state.GetNameUniqueID("ambient");
			vs6ncb.id_1 = state.GetNameUniqueID("v_lights");
			vs6ncb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6ncb.id_3 = state.GetNameUniqueID("p_lights");
			vs6ncb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6ncb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6ncb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6ncb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx51);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6ncb.gd))
			{
				return;
			}
			vs6ncb.gd = devIndex;
			if ((vs6ncb.vs != null))
			{
				vs6ncb.vs.Dispose();
				vs6ncb.ps.Dispose();
			}
			state.CreateShaders(out vs6ncb.vs, out vs6ncb.ps, vs6ncb.vsb, vs6ncb.psb, 173, 3, 0, 0);
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6ncb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6ncb.vs, vs6ncb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6ncb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6ncb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6ncb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6ncb.init_gd != state.DeviceUniqueIndex))
			{
				vs6ncb._init(state);
			}
			if ((name_uid == vs6ncb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6ncb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7,10};
		
		protected override int GetVertexInputCount()
		{
			return 8;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6ncb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6ncb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 63 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs0nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs0nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs0nb.init_gd = state.DeviceUniqueIndex;
			vs0nb.id_0 = state.GetNameUniqueID("ambient");
			vs0nb.id_1 = state.GetNameUniqueID("blendMatrices");
			vs0nb.id_2 = state.GetNameUniqueID("p_lights");
			vs0nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs0nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs0nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs0nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx52);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs0nb.gd))
			{
				return;
			}
			vs0nb.gd = devIndex;
			if ((vs0nb.vs != null))
			{
				vs0nb.vs.Dispose();
				vs0nb.ps.Dispose();
			}
			state.CreateShaders(out vs0nb.vs, out vs0nb.ps, vs0nb.vsb, vs0nb.psb, 64, 3, 0, 0);
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs0nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs0nb.vs, vs0nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.id_1))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs0nb.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs0nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs0nb.init_gd != state.DeviceUniqueIndex))
			{
				vs0nb._init(state);
			}
			if ((name_uid == vs0nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs0nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs0nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 89 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs1nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs1nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 4);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs1nb.init_gd = state.DeviceUniqueIndex;
			vs1nb.id_0 = state.GetNameUniqueID("ambient");
			vs1nb.id_1 = state.GetNameUniqueID("v_lights");
			vs1nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs1nb.id_3 = state.GetNameUniqueID("p_lights");
			vs1nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs1nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs1nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs1nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx53);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs1nb.gd))
			{
				return;
			}
			vs1nb.gd = devIndex;
			if ((vs1nb.vs != null))
			{
				vs1nb.vs.Dispose();
				vs1nb.ps.Dispose();
			}
			state.CreateShaders(out vs1nb.vs, out vs1nb.ps, vs1nb.vsb, vs1nb.psb, 84, 3, 0, 0);
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs1nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs1nb.vs, vs1nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs1nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs1nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs1nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs1nb.init_gd != state.DeviceUniqueIndex))
			{
				vs1nb._init(state);
			}
			if ((name_uid == vs1nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs1nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs1nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262148,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 134 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs3nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs3nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 12);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs3nb.init_gd = state.DeviceUniqueIndex;
			vs3nb.id_0 = state.GetNameUniqueID("ambient");
			vs3nb.id_1 = state.GetNameUniqueID("v_lights");
			vs3nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs3nb.id_3 = state.GetNameUniqueID("p_lights");
			vs3nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs3nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs3nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs3nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx54);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs3nb.gd))
			{
				return;
			}
			vs3nb.gd = devIndex;
			if ((vs3nb.vs != null))
			{
				vs3nb.vs.Dispose();
				vs3nb.ps.Dispose();
			}
			state.CreateShaders(out vs3nb.vs, out vs3nb.ps, vs3nb.vsb, vs3nb.psb, 119, 3, 0, 0);
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs3nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs3nb.vs, vs3nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs3nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs3nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs3nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs3nb.init_gd != state.DeviceUniqueIndex))
			{
				vs3nb._init(state);
			}
			if ((name_uid == vs3nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs3nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs3nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262156,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 200 instruction slots used</para><para>PS: approximately 3 instruction slots used (2 texture, 1 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class vs6nb : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public vs6nb()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.vreg.Set(38, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 38, 213);
			this.a_2 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			vs6nb.init_gd = state.DeviceUniqueIndex;
			vs6nb.id_0 = state.GetNameUniqueID("ambient");
			vs6nb.id_1 = state.GetNameUniqueID("v_lights");
			vs6nb.id_2 = state.GetNameUniqueID("blendMatrices");
			vs6nb.id_3 = state.GetNameUniqueID("p_lights");
			vs6nb.ptid_0 = state.GetNameUniqueID("CustomTexture");
			vs6nb.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			vs6nb.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			vs6nb.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(251);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx55);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx12);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == vs6nb.gd))
			{
				return;
			}
			vs6nb.gd = devIndex;
			if ((vs6nb.vs != null))
			{
				vs6nb.vs.Dispose();
				vs6nb.ps.Dispose();
			}
			state.CreateShaders(out vs6nb.vs, out vs6nb.ps, vs6nb.vsb, vs6nb.psb, 173, 3, 0, 0);
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetBlendMatrices(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> BlendMatrices
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_2;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_2.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_2;
			}
		}
		
		private static int id_3;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((vs6nb.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(vs6nb.vs, vs6nb.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix3Transpose(0), ref this.v_0);
			state.SetViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == vs6nb.id_2))
			{
				this.SetBlendMatrices(value);
				return true;
			}
			if ((name_uid == vs6nb.id_3))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == vs6nb.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((vs6nb.init_gd != state.DeviceUniqueIndex))
			{
				vs6nb._init(state);
			}
			if ((name_uid == vs6nb.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == vs6nb.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[] {0,0,0,0,0,0,0};
		
readonly 
		
		private static int[] _vusage = new int[] {0,1,2,3,5,6,7};
		
		protected override int GetVertexInputCount()
		{
			return 7;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = vs6nb._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs6nb._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524291,-1040038837,4,524292,250458472,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38,262357,-902006156,251};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 2 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps0 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps0()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps0.init_gd = state.DeviceUniqueIndex;
			ps0.id_0 = state.GetNameUniqueID("ambient");
			ps0.id_1 = state.GetNameUniqueID("v_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx1);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps0.gd))
			{
				return;
			}
			ps0.gd = devIndex;
			if ((ps0.vs != null))
			{
				ps0.vs.Dispose();
				ps0.ps.Dispose();
			}
			state.CreateShaders(out ps0.vs, out ps0.ps, ps0.vsb, ps0.psb, 14, 2, 0, 0);
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps0.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps0.vs, ps0.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
			if ((name_uid == ps0.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps0.init_gd != state.DeviceUniqueIndex))
			{
				ps0._init(state);
			}
			if ((name_uid == ps0.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps0._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps0._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return this.vreg.change;
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 16 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1.init_gd = state.DeviceUniqueIndex;
			ps1.id_0 = state.GetNameUniqueID("ambient");
			ps1.id_1 = state.GetNameUniqueID("v_lights");
			ps1.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx57);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1.gd))
			{
				return;
			}
			ps1.gd = devIndex;
			if ((ps1.vs != null))
			{
				ps1.vs.Dispose();
				ps1.ps.Dispose();
			}
			state.CreateShaders(out ps1.vs, out ps1.ps, ps1.vsb, ps1.psb, 14, 14, 0, 0);
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps1.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1.vs, ps1.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
			if ((name_uid == ps1.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1.init_gd != state.DeviceUniqueIndex))
			{
				ps1._init(state);
			}
			if ((name_uid == ps1.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 28 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2.init_gd = state.DeviceUniqueIndex;
			ps2.id_0 = state.GetNameUniqueID("ambient");
			ps2.id_1 = state.GetNameUniqueID("v_lights");
			ps2.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx58);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2.gd))
			{
				return;
			}
			ps2.gd = devIndex;
			if ((ps2.vs != null))
			{
				ps2.vs.Dispose();
				ps2.ps.Dispose();
			}
			state.CreateShaders(out ps2.vs, out ps2.ps, ps2.vsb, ps2.psb, 14, 26, 0, 0);
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps2.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2.vs, ps2.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
			if ((name_uid == ps2.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2.init_gd != state.DeviceUniqueIndex))
			{
				ps2._init(state);
			}
			if ((name_uid == ps2.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 39 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3.init_gd = state.DeviceUniqueIndex;
			ps3.id_0 = state.GetNameUniqueID("ambient");
			ps3.id_1 = state.GetNameUniqueID("v_lights");
			ps3.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx59);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3.gd))
			{
				return;
			}
			ps3.gd = devIndex;
			if ((ps3.vs != null))
			{
				ps3.vs.Dispose();
				ps3.ps.Dispose();
			}
			state.CreateShaders(out ps3.vs, out ps3.ps, ps3.vsb, ps3.psb, 14, 37, 0, 0);
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps3.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3.vs, ps3.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
			if ((name_uid == ps3.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3.init_gd != state.DeviceUniqueIndex))
			{
				ps3._init(state);
			}
			if ((name_uid == ps3.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 50 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4 : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4.init_gd = state.DeviceUniqueIndex;
			ps4.id_0 = state.GetNameUniqueID("ambient");
			ps4.id_1 = state.GetNameUniqueID("v_lights");
			ps4.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx60);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4.gd))
			{
				return;
			}
			ps4.gd = devIndex;
			if ((ps4.vs != null))
			{
				ps4.vs.Dispose();
				ps4.ps.Dispose();
			}
			state.CreateShaders(out ps4.vs, out ps4.ps, ps4.vsb, ps4.psb, 14, 48, 0, 0);
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps4.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4.vs, ps4.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
			if ((name_uid == ps4.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4.init_gd != state.DeviceUniqueIndex))
			{
				ps4._init(state);
			}
			if ((name_uid == ps4.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 3 instruction slots used (1 texture, 2 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps0t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps0t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps0t.init_gd = state.DeviceUniqueIndex;
			ps0t.id_0 = state.GetNameUniqueID("ambient");
			ps0t.id_1 = state.GetNameUniqueID("v_lights");
			ps0t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps0t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx3);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps0t.gd))
			{
				return;
			}
			ps0t.gd = devIndex;
			if ((ps0t.vs != null))
			{
				ps0t.vs.Dispose();
				ps0t.ps.Dispose();
			}
			state.CreateShaders(out ps0t.vs, out ps0t.ps, ps0t.vsb, ps0t.psb, 14, 3, 0, 0);
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps0t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps0t.vs, ps0t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps0t.init_gd != state.DeviceUniqueIndex))
			{
				ps0t._init(state);
			}
			if ((name_uid == ps0t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps0t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps0t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 18 instruction slots used (1 texture, 17 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1t.init_gd = state.DeviceUniqueIndex;
			ps1t.id_0 = state.GetNameUniqueID("ambient");
			ps1t.id_1 = state.GetNameUniqueID("v_lights");
			ps1t.id_2 = state.GetNameUniqueID("p_lights");
			ps1t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx61);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1t.gd))
			{
				return;
			}
			ps1t.gd = devIndex;
			if ((ps1t.vs != null))
			{
				ps1t.vs.Dispose();
				ps1t.ps.Dispose();
			}
			state.CreateShaders(out ps1t.vs, out ps1t.ps, ps1t.vsb, ps1t.psb, 14, 16, 0, 0);
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps1t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1t.vs, ps1t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1t.init_gd != state.DeviceUniqueIndex))
			{
				ps1t._init(state);
			}
			if ((name_uid == ps1t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 30 instruction slots used (1 texture, 29 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2t.init_gd = state.DeviceUniqueIndex;
			ps2t.id_0 = state.GetNameUniqueID("ambient");
			ps2t.id_1 = state.GetNameUniqueID("v_lights");
			ps2t.id_2 = state.GetNameUniqueID("p_lights");
			ps2t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx62);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2t.gd))
			{
				return;
			}
			ps2t.gd = devIndex;
			if ((ps2t.vs != null))
			{
				ps2t.vs.Dispose();
				ps2t.ps.Dispose();
			}
			state.CreateShaders(out ps2t.vs, out ps2t.ps, ps2t.vsb, ps2t.psb, 14, 28, 0, 0);
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps2t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2t.vs, ps2t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2t.init_gd != state.DeviceUniqueIndex))
			{
				ps2t._init(state);
			}
			if ((name_uid == ps2t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 41 instruction slots used (1 texture, 40 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3t.init_gd = state.DeviceUniqueIndex;
			ps3t.id_0 = state.GetNameUniqueID("ambient");
			ps3t.id_1 = state.GetNameUniqueID("v_lights");
			ps3t.id_2 = state.GetNameUniqueID("p_lights");
			ps3t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps3t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx63);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3t.gd))
			{
				return;
			}
			ps3t.gd = devIndex;
			if ((ps3t.vs != null))
			{
				ps3t.vs.Dispose();
				ps3t.ps.Dispose();
			}
			state.CreateShaders(out ps3t.vs, out ps3t.ps, ps3t.vsb, ps3t.psb, 14, 39, 0, 0);
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps3t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3t.vs, ps3t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps3t.init_gd != state.DeviceUniqueIndex))
			{
				ps3t._init(state);
			}
			if ((name_uid == ps3t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 52 instruction slots used (1 texture, 51 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4t : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4t()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4t.init_gd = state.DeviceUniqueIndex;
			ps4t.id_0 = state.GetNameUniqueID("ambient");
			ps4t.id_1 = state.GetNameUniqueID("v_lights");
			ps4t.id_2 = state.GetNameUniqueID("p_lights");
			ps4t.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps4t.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx64);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4t.gd))
			{
				return;
			}
			ps4t.gd = devIndex;
			if ((ps4t.vs != null))
			{
				ps4t.vs.Dispose();
				ps4t.ps.Dispose();
			}
			state.CreateShaders(out ps4t.vs, out ps4t.ps, ps4t.vsb, ps4t.psb, 14, 50, 0, 0);
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps4t.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4t.vs, ps4t.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4t.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps4t.init_gd != state.DeviceUniqueIndex))
			{
				ps4t._init(state);
			}
			if ((name_uid == ps4t.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4t._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4t._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 23 instruction slots used (2 texture, 21 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1tn.init_gd = state.DeviceUniqueIndex;
			ps1tn.id_0 = state.GetNameUniqueID("ambient");
			ps1tn.id_1 = state.GetNameUniqueID("v_lights");
			ps1tn.id_2 = state.GetNameUniqueID("p_lights");
			ps1tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps1tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps1tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx65);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1tn.gd))
			{
				return;
			}
			ps1tn.gd = devIndex;
			if ((ps1tn.vs != null))
			{
				ps1tn.vs.Dispose();
				ps1tn.ps.Dispose();
			}
			state.CreateShaders(out ps1tn.vs, out ps1tn.ps, ps1tn.vsb, ps1tn.psb, 14, 22, 0, 0);
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps1tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1tn.vs, ps1tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps1tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1tn.init_gd != state.DeviceUniqueIndex))
			{
				ps1tn._init(state);
			}
			if ((name_uid == ps1tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps1tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 35 instruction slots used (2 texture, 33 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2tn.init_gd = state.DeviceUniqueIndex;
			ps2tn.id_0 = state.GetNameUniqueID("ambient");
			ps2tn.id_1 = state.GetNameUniqueID("v_lights");
			ps2tn.id_2 = state.GetNameUniqueID("p_lights");
			ps2tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps2tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps2tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx66);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2tn.gd))
			{
				return;
			}
			ps2tn.gd = devIndex;
			if ((ps2tn.vs != null))
			{
				ps2tn.vs.Dispose();
				ps2tn.ps.Dispose();
			}
			state.CreateShaders(out ps2tn.vs, out ps2tn.ps, ps2tn.vsb, ps2tn.psb, 14, 34, 0, 0);
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps2tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2tn.vs, ps2tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps2tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2tn.init_gd != state.DeviceUniqueIndex))
			{
				ps2tn._init(state);
			}
			if ((name_uid == ps2tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps2tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 46 instruction slots used (2 texture, 44 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps3tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps3tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 12);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps3tn.init_gd = state.DeviceUniqueIndex;
			ps3tn.id_0 = state.GetNameUniqueID("ambient");
			ps3tn.id_1 = state.GetNameUniqueID("v_lights");
			ps3tn.id_2 = state.GetNameUniqueID("p_lights");
			ps3tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps3tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps3tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps3tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(12);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx67);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps3tn.gd))
			{
				return;
			}
			ps3tn.gd = devIndex;
			if ((ps3tn.vs != null))
			{
				ps3tn.vs.Dispose();
				ps3tn.ps.Dispose();
			}
			state.CreateShaders(out ps3tn.vs, out ps3tn.ps, ps3tn.vsb, ps3tn.psb, 14, 45, 0, 0);
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps3tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps3tn.vs, ps3tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps3tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps3tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps3tn.init_gd != state.DeviceUniqueIndex))
			{
				ps3tn._init(state);
			}
			if ((name_uid == ps3tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps3tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps3tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps3tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262156,699171923,12};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 57 instruction slots used (2 texture, 55 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps4tn : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps4tn()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 16);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps4tn.init_gd = state.DeviceUniqueIndex;
			ps4tn.id_0 = state.GetNameUniqueID("ambient");
			ps4tn.id_1 = state.GetNameUniqueID("v_lights");
			ps4tn.id_2 = state.GetNameUniqueID("p_lights");
			ps4tn.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps4tn.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps4tn.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps4tn.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(16);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx68);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps4tn.gd))
			{
				return;
			}
			ps4tn.gd = devIndex;
			if ((ps4tn.vs != null))
			{
				ps4tn.vs.Dispose();
				ps4tn.ps.Dispose();
			}
			state.CreateShaders(out ps4tn.vs, out ps4tn.ps, ps4tn.vsb, ps4tn.psb, 14, 56, 0, 0);
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps4tn.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps4tn.vs, ps4tn.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps4tn.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps4tn.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps4tn.init_gd != state.DeviceUniqueIndex))
			{
				ps4tn._init(state);
			}
			if ((name_uid == ps4tn.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps4tn.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps4tn._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps4tn._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262160,699171923,16};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 31 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1s : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1s()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1s.init_gd = state.DeviceUniqueIndex;
			ps1s.id_0 = state.GetNameUniqueID("ambient");
			ps1s.id_1 = state.GetNameUniqueID("v_lights");
			ps1s.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx69);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1s.gd))
			{
				return;
			}
			ps1s.gd = devIndex;
			if ((ps1s.vs != null))
			{
				ps1s.vs.Dispose();
				ps1s.ps.Dispose();
			}
			state.CreateShaders(out ps1s.vs, out ps1s.ps, ps1s.vsb, ps1s.psb, 14, 25, 0, 0);
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps1s.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1s.vs, ps1s.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
			if ((name_uid == ps1s.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1s.init_gd != state.DeviceUniqueIndex))
			{
				ps1s._init(state);
			}
			if ((name_uid == ps1s.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1s.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1s._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1s._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 54 instruction slots used</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2s : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2s()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2s.init_gd = state.DeviceUniqueIndex;
			ps2s.id_0 = state.GetNameUniqueID("ambient");
			ps2s.id_1 = state.GetNameUniqueID("v_lights");
			ps2s.id_2 = state.GetNameUniqueID("p_lights");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx70);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2s.gd))
			{
				return;
			}
			ps2s.gd = devIndex;
			if ((ps2s.vs != null))
			{
				ps2s.vs.Dispose();
				ps2s.ps.Dispose();
			}
			state.CreateShaders(out ps2s.vs, out ps2s.ps, ps2s.vsb, ps2s.psb, 14, 42, 0, 0);
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 0, 0, out tc, out ic);
			if ((ps2s.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2s.vs, ps2s.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
			if ((name_uid == ps2s.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2s.init_gd != state.DeviceUniqueIndex))
			{
				ps2s._init(state);
			}
			if ((name_uid == ps2s.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2s.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2s._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2s._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return (this.vreg.change || this.preg.change);
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 33 instruction slots used (1 texture, 32 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1ts : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1ts()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1ts.init_gd = state.DeviceUniqueIndex;
			ps1ts.id_0 = state.GetNameUniqueID("ambient");
			ps1ts.id_1 = state.GetNameUniqueID("v_lights");
			ps1ts.id_2 = state.GetNameUniqueID("p_lights");
			ps1ts.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1ts.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx71);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1ts.gd))
			{
				return;
			}
			ps1ts.gd = devIndex;
			if ((ps1ts.vs != null))
			{
				ps1ts.vs.Dispose();
				ps1ts.ps.Dispose();
			}
			state.CreateShaders(out ps1ts.vs, out ps1ts.ps, ps1ts.vsb, ps1ts.psb, 14, 27, 0, 0);
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps1ts.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1ts.vs, ps1ts.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1ts.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1ts.init_gd != state.DeviceUniqueIndex))
			{
				ps1ts._init(state);
			}
			if ((name_uid == ps1ts.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1ts._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1ts._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 56 instruction slots used (1 texture, 55 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2ts : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2ts()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2ts.init_gd = state.DeviceUniqueIndex;
			ps2ts.id_0 = state.GetNameUniqueID("ambient");
			ps2ts.id_1 = state.GetNameUniqueID("v_lights");
			ps2ts.id_2 = state.GetNameUniqueID("p_lights");
			ps2ts.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2ts.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx72);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2ts.gd))
			{
				return;
			}
			ps2ts.gd = devIndex;
			if ((ps2ts.vs != null))
			{
				ps2ts.vs.Dispose();
				ps2ts.ps.Dispose();
			}
			state.CreateShaders(out ps2ts.vs, out ps2ts.ps, ps2ts.vsb, ps2ts.psb, 14, 44, 0, 0);
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 1, 0, out tc, out ic);
			if ((ps2ts.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2ts.vs, ps2ts.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2ts.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2ts.init_gd != state.DeviceUniqueIndex))
			{
				ps2ts._init(state);
			}
			if ((name_uid == ps2ts.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2ts._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2ts._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 39 instruction slots used (2 texture, 37 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps1tns : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps1tns()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 4);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps1tns.init_gd = state.DeviceUniqueIndex;
			ps1tns.id_0 = state.GetNameUniqueID("ambient");
			ps1tns.id_1 = state.GetNameUniqueID("v_lights");
			ps1tns.id_2 = state.GetNameUniqueID("p_lights");
			ps1tns.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps1tns.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps1tns.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps1tns.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(4);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx73);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps1tns.gd))
			{
				return;
			}
			ps1tns.gd = devIndex;
			if ((ps1tns.vs != null))
			{
				ps1tns.vs.Dispose();
				ps1tns.ps.Dispose();
			}
			state.CreateShaders(out ps1tns.vs, out ps1tns.ps, ps1tns.vsb, ps1tns.psb, 14, 34, 0, 0);
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps1tns.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps1tns.vs, ps1tns.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps1tns.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps1tns.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps1tns.init_gd != state.DeviceUniqueIndex))
			{
				ps1tns._init(state);
			}
			if ((name_uid == ps1tns.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps1tns.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps1tns._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1tns._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262148,699171923,4};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	/// <summary><para>VS: approximately 14 instruction slots used</para><para>PS: approximately 63 instruction slots used (2 texture, 61 arithmetic)</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "f528a88b-1c52-48ab-876d-fa36a9f095dd")]
	internal sealed class ps2tns : Xen.Graphics.ShaderSystem.BaseShader
	{
		
		public ps2tns()
		{
			this.vreg.Set(0, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(4, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F, 0F);
			this.vreg.Set(12, 0F, 0F, 0F, 0F);
			this.vreg.Set(13, 0F, 0F, 0F, 0F);
			this.vreg.Set(14, 0F, 0F, 0F, 0F);
			this.preg.Set(0, 0F, 0F, 0F, 0F);
			this.a_0 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.vreg, 14, 24);
			this.a_1 = new Xen.Graphics.ShaderSystem.Constants.Vector4Array(this.preg, 0, 8);
			this.v_0 = -1;
			this.v_4 = -1;
			this.v_12 = -1;
			this.ps_m = 65535;
		}
		
		private static void _init(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			ps2tns.init_gd = state.DeviceUniqueIndex;
			ps2tns.id_0 = state.GetNameUniqueID("ambient");
			ps2tns.id_1 = state.GetNameUniqueID("v_lights");
			ps2tns.id_2 = state.GetNameUniqueID("p_lights");
			ps2tns.ptid_0 = state.GetNameUniqueID("CustomTexture");
			ps2tns.psid_0 = state.GetNameUniqueID("CustomTextureSampler");
			ps2tns.ptid_1 = state.GetNameUniqueID("CustomNormalMap");
			ps2tns.psid_1 = state.GetNameUniqueID("CustomNormalMapSampler");
		}
		
		private static int init_gd;
		
		private static int gd;
		
		private static Microsoft.Xna.Framework.Graphics.VertexShader vs;
		
		private static Microsoft.Xna.Framework.Graphics.PixelShader ps;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray vreg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(38);
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.ConstantArray preg = new Xen.Graphics.ShaderSystem.Constants.ConstantArray(8);
		
		private static byte[] vsb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx56);
		
		private static byte[] psb = Xen.Graphics.ShaderSystem.Constants.ConstantArray.ArrayUtils.SimpleDecompress(@__pool._bx74);
		
		protected override void WarmShader(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			int devIndex = state.DeviceUniqueIndex;
			if ((devIndex == ps2tns.gd))
			{
				return;
			}
			ps2tns.gd = devIndex;
			if ((ps2tns.vs != null))
			{
				ps2tns.vs.Dispose();
				ps2tns.ps.Dispose();
			}
			state.CreateShaders(out ps2tns.vs, out ps2tns.ps, ps2tns.vsb, ps2tns.psb, 14, 52, 0, 0);
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
		}
		
		public void SetAmbient(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.vreg.SetVector4(13, ref value);
		}
		
		public Microsoft.Xna.Framework.Vector4 Ambient
		{
			set
			{
				this.SetAmbient(ref value);
			}
		}
		
		private static int id_0;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_0;
		
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_0.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> V_lights
		{
			get
			{
				return this.a_0;
			}
		}
		
		private static int id_1;
		
readonly 
		
		private Xen.Graphics.ShaderSystem.Constants.Vector4Array a_1;
		
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value)
		{
			this.a_1.SetArray(value);
		}
		
		public Xen.Graphics.ShaderSystem.Constants.IArray<Microsoft.Xna.Framework.Vector4> P_lights
		{
			get
			{
				return this.a_1;
			}
		}
		
		private static int id_2;
		
		private int v_0;
		
		private int v_4;
		
		private int v_12;
		
		private Xen.Graphics.State.TextureSamplerState ps_0 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_0t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return this.ps_0t;
			}
			set
			{
				if ((value != this.ps_0t))
				{
					this.ps_0t = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.ps_0;
			}
			set
			{
				if ((value != this.ps_0))
				{
					this.ps_0 = value;
					this.ps_m = (this.ps_m | 1);
				}
			}
		}
		
		private static int ptid_0;
		
		private static int psid_0;
		
		private Xen.Graphics.State.TextureSamplerState ps_1 = ((Xen.Graphics.State.TextureSamplerState)(13312));
		
		private Microsoft.Xna.Framework.Graphics.Texture2D ps_1t;
		
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return this.ps_1t;
			}
			set
			{
				if ((value != this.ps_1t))
				{
					this.ps_1t = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		public Xen.Graphics.State.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.ps_1;
			}
			set
			{
				if ((value != this.ps_1))
				{
					this.ps_1 = value;
					this.ps_m = (this.ps_m | 2);
				}
			}
		}
		
		private static int ptid_1;
		
		private static int psid_1;
		
		private int ps_m;
		
		public override void Bind(Xen.Graphics.ShaderSystem.IShaderSystem state)
		{
			bool ic;
			bool tc;
			int devIndex = state.Begin(this, 2, 0, out tc, out ic);
			if ((ps2tns.gd != devIndex))
			{
				this.WarmShader(state);
				tc = true;
				ic = true;
			}
			if (((tc && this.owner) 
						== true))
			{
				state.SetShaders(ps2tns.vs, ps2tns.ps);
			}
			state.SetWorldMatrix(this.vreg.Matrix4Transpose(0), ref this.v_0);
			state.SetWorldViewProjectionMatrix(this.vreg.Matrix4Transpose(4), ref this.v_4);
			state.SetViewPointVector4(this.vreg.Vector4(12), ref this.v_12);
			if (((this.vreg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(this.vreg.array, null);
				this.vreg.change = false;
			}
			if (((this.preg.change == true) 
						|| (ic == true)))
			{
				state.SetShaderConstants(null, this.preg.array);
				this.preg.change = false;
			}
			if ((ic == true))
			{
				this.ps_m = 65535;
			}
			if ((this.ps_m != 0))
			{
				if (((this.ps_m & 1) 
							== 1))
				{
					state.SetPixelShaderSampler(0, this.ps_0t, this.ps_0);
				}
				if (((this.ps_m & 2) 
							== 2))
				{
					state.SetPixelShaderSampler(1, this.ps_1t, this.ps_1);
				}
				this.ps_m = 0;
			}
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.id_0))
			{
				this.SetAmbient(ref value);
				return true;
			}
			return false;
		}
		
		protected override bool SetAttribute(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.id_1))
			{
				this.SetV_lights(value);
				return true;
			}
			if ((name_uid == ps2tns.id_2))
			{
				this.SetP_lights(value);
				return true;
			}
			return false;
		}
		
		protected override bool SetTexture(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Microsoft.Xna.Framework.Graphics.Texture2D texture)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.ptid_0))
			{
				this.CustomTexture = texture;
				return true;
			}
			if ((name_uid == ps2tns.ptid_1))
			{
				this.CustomNormalMap = texture;
				return true;
			}
			return false;
		}
		
		protected override bool SetSamplerState(Xen.Graphics.ShaderSystem.IShaderSystem state, int name_uid, Xen.Graphics.State.TextureSamplerState sampler)
		{
			if ((ps2tns.init_gd != state.DeviceUniqueIndex))
			{
				ps2tns._init(state);
			}
			if ((name_uid == ps2tns.psid_0))
			{
				this.CustomTextureSampler = sampler;
				return true;
			}
			if ((name_uid == ps2tns.psid_1))
			{
				this.CustomNormalMapSampler = sampler;
				return true;
			}
			return false;
		}
		
readonly 
		
		private static int[] _vinds = new int[0];
		
readonly 
		
		private static int[] _vusage = new int[0];
		
		protected override int GetVertexInputCount()
		{
			return 0;
		}
		
		protected override void GetVertexInput(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			index = ps2tns._vinds[i];
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2tns._vusage[i]));
		}
		
		protected override bool Changed()
		{
			return ((this.vreg.change || this.preg.change) 
						|| (this.ps_m != 0));
		}
		
		protected override int[] GetShaderConstantHash(bool ps)
		{
			if (ps)
			{
				return new int[] {0,262152,699171923,8};
			}
			else
			{
				return new int[] {0,524292,-1040038837,4,524292,-888819319,12,262145,1606226950,13,262145,1099918244,14,262168,699171593,38};
			}
		}
	}
}

namespace Xen.Ex.Material
{
	
	
	internal sealed class @__pool
	{
		
		public static byte[] _bx0 = new byte[] {4,16,42,17,1,131,0,5,168,0,0,1,72,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,8,0,81,0,2,138,0,2,88,198,131,0,1,1,131,0,1,1,131,0,5,6,0,0,2,144,131,0,49,4,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,15,0,0,16,18,0,0,16,13,0,0,16,16,0,0,16,17,0,0,16,19,132,0,2,63,128,186,0,0,1,16,1,1,1,16,1,4,1,0,1,0,1,18,2,0,196,133,0,0,1,96,2,5,48,3,11,18,0,1,18,135,0,0,1,96,2,14,194,2,0,18,133,0,1,16,2,20,0,2,0,34,133,0,1,5,1,248,131,0,2,36,6,1,136,132,0,2,200,1,2,0,1,132,0,2,175,0,3,4,0,200,3,2,0,1,132,0,3,175,0,5,4,0,200,4,0,1,1,132,0,4,175,0,6,0,4,200,8,0,1,132,0,4,175,0,7,0,4,200,1,0,2,132,0,1,175,131,0,4,200,2,0,2,132,0,3,175,0,1,4,0,200,4,0,1,2,132,0,4,175,0,2,0,4,200,8,0,2,132,0,4,175,0,3,0,5,200,3,128,2,0,6,12,12,0,34,8,8,5,0,200,15,128,62,132,0,6,226,1,1,0,200,15,1,128,133,0,5,34,13,13,0,200,6,15,128,3,0,108,108,7,0,34,8,8,0,200,15,2,128,4,132,0,7,226,2,2,0,200,15,128,8,1,0,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx1 = new byte[] {3,16,42,17,132,0,1,76,131,0,1,60,143,0,1,36,143,0,4,60,16,0,1,132,0,1,4,134,0,6,32,66,0,3,0,3,131,0,9,1,0,0,240,80,0,0,241,81,132,0,5,16,2,196,0,18,133,0,5,16,3,0,0,34,133,0,3,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx2 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,1,84,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,20,0,81,0,3,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,4,0,48,80,5,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,16,0,0,16,19,0,0,16,14,0,11,0,16,17,0,0,16,18,0,0,16,20,132,0,2,63,128,186,0,0,1,48,1,5,1,32,1,4,1,0,1,0,2,18,0,1,196,133,0,1,96,2,6,48,3,12,18,0,1,18,135,0,0,1,96,2,15,194,2,0,18,133,0,1,16,2,21,0,2,0,34,133,0,1,5,2,248,32,3,0,0,36,2,6,136,132,0,2,3,248,131,0,3,36,6,136,132,0,2,200,1,2,0,1,132,0,2,175,2,3,4,0,200,3,2,0,1,132,0,3,175,2,5,4,0,200,4,0,1,1,132,0,4,175,2,6,0,4,200,8,0,1,132,0,4,175,2,7,0,4,200,1,0,3,132,0,4,175,2,0,0,4,200,2,0,3,132,0,4,175,2,1,0,4,200,4,0,3,132,0,4,175,2,2,0,4,200,8,0,3,132,0,4,175,2,3,0,4,200,3,128,2,132,0,1,226,131,0,4,200,15,128,62,132,0,3,226,1,1,4,0,200,15,128,133,0,2,34,13,3,13,0,200,4,15,128,3,0,5,108,108,0,34,8,6,8,0,200,15,128,4,132,0,5,226,3,3,0,200,6,15,128,1,0,177,177,7,0,34,8,8,0,200,15,2,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx3 = new byte[] {3,16,42,17,132,0,1,80,131,0,1,84,143,0,1,36,143,0,4,84,16,2,2,132,0,1,4,134,0,6,40,99,0,7,0,7,131,0,22,1,0,0,240,80,0,0,241,81,0,0,50,82,0,1,16,2,0,0,18,0,196,133,0,7,32,3,16,5,18,0,34,131,0,15,144,0,32,65,31,255,246,136,0,0,64,0,200,15,1,133,0,7,225,2,0,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx4 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,1,84,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,20,0,81,0,3,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,4,0,48,160,5,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,16,0,0,16,19,0,0,16,14,0,11,0,16,17,0,0,16,18,0,0,16,20,192,0,0,1,48,1,5,1,32,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,48,1,12,2,18,0,1,18,135,0,0,1,96,1,15,2,194,0,1,18,133,0,1,16,2,21,0,2,0,34,133,0,1,5,2,248,32,3,0,0,36,2,6,136,132,0,2,3,248,131,0,3,36,6,136,132,0,2,200,1,2,0,1,132,0,2,175,2,3,4,0,200,3,2,0,1,132,0,3,175,2,5,4,0,200,4,0,1,1,132,0,4,175,2,6,0,4,200,8,0,1,132,0,4,175,2,7,0,4,200,1,0,3,132,0,4,175,2,0,0,4,200,2,0,3,132,0,4,175,2,1,0,4,200,4,0,3,132,0,4,175,2,2,0,4,200,8,0,3,132,0,4,175,2,3,0,5,200,3,128,2,0,6,12,12,0,34,8,8,5,0,200,15,128,62,132,0,6,226,1,1,0,200,15,1,128,133,0,5,34,13,13,0,200,6,15,128,3,0,108,108,7,0,34,8,8,0,200,15,2,128,4,132,0,7,226,3,3,0,200,15,128,1,1,132,0,1,226,131,0,4,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx5 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,1,96,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,32,0,81,0,4,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,4,0,0,160,5,0,48,80,6,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,17,0,0,16,20,0,15,0,16,15,0,0,16,18,0,0,16,19,0,0,16,21,192,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,48,1,13,2,18,0,1,18,135,0,0,1,96,1,16,2,194,0,1,18,133,0,1,16,2,22,0,2,0,34,133,0,1,5,2,248,48,3,0,0,36,2,6,136,132,0,3,3,248,32,4,0,0,36,6,1,136,132,0,2,1,248,131,0,3,36,6,136,132,0,3,200,1,0,1,1,132,0,3,175,3,4,4,0,200,2,0,1,1,132,0,4,175,3,5,0,4,200,4,0,1,132,0,4,175,3,6,0,4,200,8,0,1,132,0,4,175,3,7,0,4,200,1,0,4,132,0,4,175,3,0,0,4,200,2,0,4,132,0,4,175,3,1,0,4,200,4,0,4,132,0,4,175,3,2,0,4,200,8,0,4,132,0,4,175,3,3,0,4,200,3,128,2,132,0,1,226,131,0,4,200,15,128,62,132,0,3,226,1,1,4,0,200,15,128,133,0,2,34,13,3,13,0,200,4,15,128,3,0,5,108,108,0,34,8,6,8,0,200,15,128,4,132,0,5,226,4,4,0,200,3,15,128,1,132,0,5,226,2,2,0,200,3,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx6 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,1,144,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,80,0,81,0,3,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,4,0,32,48,5,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,21,0,0,16,24,0,0,16,19,0,11,0,16,22,0,0,16,23,0,0,16,25,132,0,2,63,128,186,0,0,1,48,1,5,1,32,1,4,1,0,1,0,2,18,0,1,196,133,0,1,96,2,6,96,3,12,18,0,1,18,133,0,2,32,18,3,0,0,18,2,0,194,133,0,2,96,20,3,16,26,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,200,1,0,3,132,0,3,175,2,4,4,0,200,2,0,1,3,132,0,4,175,2,5,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,4,2,0,3,132,0,3,175,2,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,3,132,0,2,175,2,3,7,128,20,1,135,132,0,3,27,108,193,4,0,0,8,200,3,1,0,1,132,0,4,175,2,0,0,4,200,2,0,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,8,0,1,132,0,4,175,2,3,0,5,200,3,128,2,0,6,12,12,0,34,8,8,5,0,200,15,128,62,132,0,6,226,3,3,0,200,15,1,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,1,226,131,0,4,200,15,128,4,132,0,4,226,1,1,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx7 = new byte[] {3,16,42,17,132,0,1,68,131,0,1,60,143,0,1,36,143,0,2,60,16,150,0,1,1,132,0,5,16,2,196,0,18,133,0,5,16,3,0,0,34,133,0,3,200,15,128,133,0,5,34,15,15,0,200,135,0,1,226,142,0,1,0};
		
		public static byte[] _bx8 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,2,188,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,124,0,81,0,6,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,6,0,32,48,7,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,46,0,0,16,49,0,0,16,44,0,11,0,16,47,0,0,16,48,0,0,16,50,132,0,2,63,128,186,0,0,1,48,1,5,1,32,1,6,1,0,1,0,2,18,0,1,196,133,0,1,96,2,8,96,3,14,18,0,1,18,133,0,2,96,20,3,96,26,18,2,0,18,133,0,2,96,32,3,96,38,18,2,0,18,133,0,2,16,44,3,0,0,18,2,0,194,133,0,2,96,45,3,16,51,18,2,0,34,131,0,4,5,248,16,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,200,1,0,6,132,0,3,175,1,4,4,0,200,2,0,1,6,132,0,4,175,1,5,0,4,200,4,0,6,132,0,4,175,1,6,0,4,200,8,0,6,132,0,4,175,1,7,0,4,200,8,0,5,132,0,4,175,1,3,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,7,3,0,4,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,4,132,0,6,240,4,4,0,80,136,2,0,1,132,0,6,240,1,1,132,80,135,2,4,5,132,0,6,226,0,0,129,68,135,7,4,1,0,0,27,0,225,8,1,4,4,200,7,0,4,0,9,27,0,0,235,0,4,1,200,1,134,0,6,240,4,4,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,4,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,4,132,0,4,225,2,3,0,5,200,8,0,4,0,6,0,128,64,139,4,17,3,17,201,8,134,0,4,240,0,4,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,4,68,128,4,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,4,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,108,193,6,4,1,8,200,7,0,1,2,132,0,6,226,4,4,0,200,8,2,0,1,132,0,6,225,4,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,8,128,2,0,12,12,0,34,8,6,8,0,200,15,128,62,132,0,7,226,6,6,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,5,226,2,2,0,200,3,15,128,4,132,0,5,226,5,5,0,200,6,15,128,1,0,177,177,7,0,34,8,8,0,200,15,2,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx9 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,4,180,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,4,116,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,9,0,32,48,10,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,88,0,0,16,91,0,0,16,86,0,11,0,16,89,0,0,16,90,0,0,16,92,132,0,2,63,128,186,0,0,1,48,1,5,1,32,1,9,1,0,1,0,2,18,0,1,196,133,0,1,96,2,11,96,3,17,18,0,1,18,133,0,2,96,23,3,96,29,18,2,0,18,133,0,2,96,35,3,96,41,18,2,0,18,133,0,2,96,47,3,96,53,18,2,0,18,133,0,2,96,59,3,96,65,18,2,0,18,133,0,2,96,71,3,96,77,18,2,0,18,133,0,2,64,83,3,0,0,18,2,0,194,133,0,2,96,87,3,16,93,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,200,1,0,6,132,0,3,175,2,4,4,0,200,2,0,1,6,132,0,4,175,2,5,0,4,200,4,0,6,132,0,4,175,2,6,0,4,200,8,0,6,132,0,4,175,2,7,0,4,200,8,0,7,132,0,4,175,2,3,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,8,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,8,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,8,5,200,7,0,4,0,6,0,27,0,235,0,8,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,8,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,8,0,0,200,8,0,8,132,0,6,225,3,0,0,201,8,134,0,7,240,0,8,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,8,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,8,132,0,9,240,8,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,136,68,136,8,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,8,0,201,8,134,0,4,240,8,4,0,2,200,8,134,0,2,225,8,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,8,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,8,7,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,8,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,8,2,1,200,8,134,0,5,225,8,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,5,23,1,20,128,8,132,0,7,108,194,0,0,8,200,7,134,0,5,224,0,1,0,20,1,135,133,0,4,27,128,0,13,5,13,200,3,128,2,6,0,12,12,0,34,8,6,8,0,200,15,128,62,132,0,6,226,6,6,0,200,15,1,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,8,8,0,4,200,15,128,4,132,0,4,226,7,7,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx10 = new byte[] {4,16,42,17,1,131,0,5,172,0,0,7,144,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,7,80,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,2,131,0,50,6,0,0,2,144,0,16,0,14,0,32,48,15,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,149,0,0,16,152,0,0,16,147,0,11,0,16,150,0,0,16,151,0,0,16,153,132,0,2,63,128,186,0,0,1,48,1,5,1,32,1,14,1,0,1,0,2,18,0,1,196,133,0,1,96,2,16,96,3,22,18,0,1,18,133,0,2,96,28,3,96,34,18,2,0,18,133,0,2,96,40,3,96,46,18,2,0,18,133,0,2,96,52,3,96,58,18,2,0,18,133,0,2,96,64,3,96,70,18,2,0,18,133,0,2,96,76,3,96,82,18,2,0,18,133,0,2,96,88,3,96,94,18,2,0,18,133,0,2,96,100,3,96,106,18,2,0,18,133,0,2,96,112,3,96,118,18,2,0,18,133,0,2,96,124,3,96,130,18,2,0,18,133,0,2,96,136,3,96,142,18,2,0,18,135,0,0,1,96,2,148,194,2,0,18,133,0,1,16,2,154,0,2,0,34,133,0,1,5,2,248,16,3,0,0,36,2,6,136,132,0,3,3,248,96,4,0,0,36,6,1,136,132,0,4,200,1,0,7,132,0,3,175,1,4,4,0,200,2,0,1,7,132,0,4,175,1,5,0,4,200,4,0,7,132,0,4,175,1,6,0,4,200,8,0,7,132,0,4,175,1,7,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,8,2,0,8,132,0,3,175,1,3,4,0,200,7,0,5,1,2,0,27,0,6,139,0,14,14,200,8,2,0,1,132,0,6,240,1,1,0,80,135,3,9,2,4,131,0,7,160,0,12,129,200,1,0,1,3,132,0,7,240,2,2,0,80,113,3,1,4,131,0,8,64,176,6,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,7,0,9,9,0,0,27,0,235,1,9,2,68,3,129,5,3,132,0,1,240,131,9,4,80,114,3,4,131,0,9,64,176,6,1,3,200,7,0,5,132,0,8,225,9,3,0,200,4,0,4,132,0,7,176,6,2,0,200,1,0,1,3,132,0,7,240,4,4,0,80,112,3,132,0,6,64,226,0,0,3,200,3,7,0,9,132,0,6,225,4,3,0,200,8,7,0,5,0,0,128,64,139,7,5,17,17,201,4,0,5,132,0,7,240,9,5,0,200,8,0,8,5,0,0,192,0,171,1,17,4,5,64,128,3,132,0,8,192,226,0,0,133,68,136,4,9,3,0,0,27,0,161,3,15,5,10,56,136,1,3,0,21,21,0,226,4,11,4,3,200,7,0,1,0,27,0,0,225,7,9,1,0,200,8,0,9,132,0,8,225,4,1,0,201,8,0,1,132,0,10,240,1,9,0,200,7,0,3,2,0,10,27,0,139,0,18,18,200,8,0,1,132,0,8,225,1,3,0,200,8,0,3,132,0,9,240,3,3,0,80,135,1,1,0,10,27,0,0,161,1,16,131,200,7,0,11,1,0,27,0,0,171,9,15,1,68,128,1,9,133,0,10,226,0,0,1,200,8,0,9,0,0,11,128,64,139,9,21,21,200,7,0,4,0,12,0,27,0,235,3,1,2,200,8,0,3,0,11,0,192,0,171,3,21,9,68,129,9,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,8,225,4,5,0,201,8,0,3,132,0,9,240,4,9,0,200,7,0,3,0,10,27,0,0,225,1,3,0,64,128,4,133,0,8,226,0,0,131,200,8,0,4,9,0,0,27,0,161,4,19,0,56,2,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,9,1,0,201,8,0,1,1,132,0,7,240,9,3,0,200,8,0,1,1,132,0,7,225,9,1,0,200,7,0,8,3,2,0,27,0,139,0,22,9,22,200,7,0,4,0,27,0,0,8,161,1,20,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,19,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,25,25,201,8,0,1,9,132,0,10,240,9,4,0,200,8,0,3,0,0,9,192,0,171,1,25,3,64,128,4,133,0,9,226,0,0,137,68,136,9,4,0,10,0,27,0,161,4,23,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,9,0,201,8,0,1,1,132,0,7,240,9,3,0,200,8,0,1,1,132,0,7,225,9,1,0,200,7,0,8,3,2,0,27,0,139,0,26,9,26,200,7,0,4,0,27,0,0,8,161,1,24,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,23,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,29,29,201,8,0,1,9,132,0,10,240,9,4,0,200,8,0,3,0,0,9,192,0,171,1,29,3,64,128,4,133,0,9,226,0,0,137,68,136,9,4,0,10,0,27,0,161,4,27,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,9,0,201,8,0,1,1,132,0,7,240,9,3,0,200,8,0,1,1,132,0,7,225,9,1,0,200,7,0,8,3,2,0,27,0,139,0,30,9,30,200,7,0,4,0,27,0,0,8,161,1,28,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,27,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,33,33,201,8,0,1,9,132,0,10,240,9,4,0,200,8,0,3,0,0,9,192,0,171,1,33,3,64,128,4,133,0,9,226,0,0,137,68,136,9,4,0,10,0,27,0,161,4,31,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,9,0,201,8,0,1,1,132,0,7,240,9,3,0,200,8,0,1,1,132,0,7,225,9,1,0,200,7,0,8,3,2,0,27,0,139,0,34,9,34,200,7,0,4,0,27,0,0,8,161,1,32,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,31,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,2,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,4,132,0,7,240,2,2,3,80,112,4,132,0,9,64,226,0,0,4,200,7,0,2,132,0,9,225,2,4,0,200,8,0,3,0,9,0,128,64,139,3,37,37,201,8,134,0,7,240,9,2,0,200,8,0,8,1,0,0,192,0,171,1,37,5,3,68,135,9,8,132,0,8,226,0,0,1,65,136,0,2,132,0,6,240,3,9,128,200,8,132,0,6,27,0,161,0,35,0,3,56,136,1,133,0,5,225,9,2,0,200,3,8,0,1,132,0,5,225,9,1,0,200,1,7,131,0,6,27,0,0,161,0,36,3,0,200,7,131,0,7,27,0,0,171,1,35,0,3,20,128,9,132,0,7,108,194,0,0,8,200,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,3,5,128,2,0,12,12,6,0,34,8,8,0,200,3,15,128,62,132,0,6,226,7,7,0,200,15,1,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,9,9,0,4,200,15,128,4,132,0,4,226,8,8,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx11 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,1,156,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,92,0,81,0,4,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,4,0,0,48,5,0,32,80,6,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,22,0,0,16,25,0,15,0,16,20,0,0,16,23,0,0,16,24,0,0,16,26,132,0,2,63,128,186,0,0,1,112,1,21,1,48,1,4,1,0,1,0,2,18,0,1,196,133,0,1,96,2,7,96,3,13,18,0,1,18,133,0,2,32,19,3,0,0,18,2,0,194,133,0,2,96,21,3,16,27,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,48,0,4,0,36,6,136,132,0,4,200,1,0,4,132,0,3,175,2,4,4,0,200,2,0,1,4,132,0,4,175,2,5,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,4,2,0,4,132,0,3,175,2,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,4,132,0,2,175,2,3,7,128,20,1,135,132,0,3,27,108,193,4,0,0,8,200,3,1,0,1,132,0,4,175,2,0,0,4,200,2,0,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,8,0,1,132,0,4,175,2,3,0,4,200,3,128,2,132,0,4,226,3,3,0,4,200,15,128,62,132,0,4,226,4,4,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,1,1,4,0,200,15,128,5,1,0,177,177,0,6,34,8,8,0,200,15,2,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx12 = new byte[] {3,16,42,17,132,0,1,68,131,0,1,108,143,0,1,36,143,0,4,108,16,0,1,148,0,10,1,0,112,64,2,0,0,18,0,196,133,0,7,16,6,16,7,18,0,34,131,0,2,200,15,134,0,8,34,15,15,0,200,15,0,1,132,0,31,34,15,15,0,144,0,0,1,31,255,246,136,0,0,64,0,152,16,16,33,31,255,246,136,0,0,64,0,200,15,128,133,0,5,225,0,1,0,200,135,0,1,226,142,0,1,0};
		
		public static byte[] _bx13 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,2,200,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,136,0,81,0,7,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,6,0,0,48,7,0,32,80,8,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,47,0,0,16,50,0,15,0,16,45,0,0,16,48,0,0,16,49,0,0,16,51,132,0,2,63,128,186,0,0,1,112,1,21,1,48,1,6,1,0,1,0,2,18,0,1,196,133,0,1,96,2,9,96,3,15,18,0,1,18,133,0,2,96,21,3,96,27,18,2,0,18,133,0,2,96,33,3,96,39,18,2,0,18,133,0,2,16,45,3,0,0,18,2,0,194,133,0,2,96,46,3,16,52,18,2,0,34,131,0,4,5,248,16,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,1,248,64,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,1,4,4,0,200,2,0,1,7,132,0,4,175,1,5,0,4,200,4,0,7,132,0,4,175,1,6,0,4,200,8,0,7,132,0,4,175,1,7,0,4,200,8,0,6,132,0,4,175,1,3,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,7,3,0,5,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,5,132,0,6,240,5,5,0,80,136,2,0,1,132,0,6,240,1,1,133,80,135,2,5,6,132,0,6,226,0,0,129,68,135,7,5,1,0,0,27,0,225,8,1,5,5,200,7,0,5,0,9,27,0,0,235,0,5,1,200,1,134,0,6,240,5,5,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,5,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,5,132,0,4,225,2,3,0,5,200,8,0,5,0,6,0,128,64,139,5,17,3,17,201,8,134,0,4,240,0,5,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,5,68,128,5,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,5,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,108,193,6,5,1,8,200,7,0,1,2,132,0,6,226,5,5,0,200,8,2,0,1,132,0,6,225,5,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,2,128,2,132,0,7,226,4,4,0,200,15,128,1,62,132,0,7,226,7,7,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,2,2,0,4,200,15,128,4,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx14 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,4,192,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,4,128,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,9,0,0,48,10,0,32,80,11,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,89,0,0,16,92,0,15,0,16,87,0,0,16,90,0,0,16,91,0,0,16,93,132,0,2,63,128,186,0,0,1,112,1,21,1,48,1,9,1,0,1,0,2,18,0,1,196,133,0,1,96,2,12,96,3,18,18,0,1,18,133,0,2,96,24,3,96,30,18,2,0,18,133,0,2,96,36,3,96,42,18,2,0,18,133,0,2,96,48,3,96,54,18,2,0,18,133,0,2,96,60,3,96,66,18,2,0,18,133,0,2,96,72,3,96,78,18,2,0,18,133,0,2,64,84,3,0,0,18,2,0,194,133,0,2,96,88,3,16,94,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,96,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,2,4,4,0,200,2,0,1,7,132,0,4,175,2,5,0,4,200,4,0,7,132,0,4,175,2,6,0,4,200,8,0,7,132,0,4,175,2,7,0,4,200,8,0,8,132,0,4,175,2,3,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,9,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,9,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,9,5,200,7,0,4,0,6,0,27,0,235,0,9,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,9,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,9,0,0,200,8,0,9,132,0,6,225,3,0,0,201,8,134,0,7,240,0,9,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,9,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,9,132,0,9,240,9,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,137,68,136,9,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,9,0,201,8,134,0,4,240,9,4,0,2,200,8,134,0,2,225,9,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,9,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,9,8,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,9,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,9,2,1,200,8,134,0,5,225,9,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,5,23,1,20,128,9,132,0,7,108,194,0,0,8,200,7,134,0,5,224,0,1,0,20,1,135,133,0,4,27,128,0,13,5,13,200,3,128,2,132,0,4,226,6,6,0,4,200,15,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,9,9,4,0,200,15,128,1,4,132,0,4,226,8,8,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx15 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,7,156,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,7,92,0,81,0,10,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,14,0,0,48,15,0,32,80,16,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,150,0,0,16,153,0,15,0,16,148,0,0,16,151,0,0,16,152,0,0,16,154,132,0,2,63,128,186,0,0,1,112,1,21,1,48,1,14,1,0,1,0,2,18,0,1,196,133,0,1,96,2,17,96,3,23,18,0,1,18,133,0,2,96,29,3,96,35,18,2,0,18,133,0,2,96,41,3,96,47,18,2,0,18,133,0,2,96,53,3,96,59,18,2,0,18,133,0,2,96,65,3,96,71,18,2,0,18,133,0,2,96,77,3,96,83,18,2,0,18,133,0,2,96,89,3,96,95,18,2,0,18,133,0,2,96,101,3,96,107,18,2,0,18,133,0,2,96,113,3,96,119,18,2,0,18,133,0,2,96,125,3,96,131,18,2,0,18,133,0,2,96,137,3,96,143,18,2,0,18,135,0,0,1,96,2,149,194,2,0,18,133,0,1,16,2,155,0,2,0,34,133,0,1,5,2,248,16,3,0,0,36,2,6,136,132,0,3,3,248,96,4,0,0,36,6,1,136,132,0,4,1,248,112,0,4,0,36,6,136,132,0,4,200,1,0,8,132,0,3,175,1,4,4,0,200,2,0,1,8,132,0,4,175,1,5,0,4,200,4,0,8,132,0,4,175,1,6,0,4,200,8,0,8,132,0,4,175,1,7,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,8,2,0,9,132,0,3,175,1,3,4,0,200,7,0,5,1,2,0,27,0,6,139,0,14,14,200,8,2,0,1,132,0,6,240,1,1,0,80,135,3,10,2,4,131,0,7,160,0,12,129,200,1,0,1,3,132,0,7,240,2,2,0,80,113,3,1,4,131,0,8,64,176,6,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,7,0,10,9,0,0,27,0,235,1,10,2,68,3,129,5,3,132,0,1,240,131,10,4,80,114,3,4,131,0,9,64,176,6,1,3,200,7,0,5,132,0,8,225,10,3,0,200,4,0,4,132,0,7,176,6,2,0,200,1,0,1,3,132,0,7,240,4,4,0,80,112,3,132,0,6,64,226,0,0,3,200,3,7,0,10,132,0,6,225,4,3,0,200,8,7,0,5,0,0,128,64,139,7,5,17,17,201,4,0,5,132,0,7,240,10,5,0,200,8,0,8,5,0,0,192,0,171,1,17,4,5,64,128,3,132,0,8,192,226,0,0,133,68,136,4,9,3,0,0,27,0,161,3,15,5,10,56,136,1,3,0,21,21,0,226,4,11,4,3,200,7,0,1,0,27,0,0,225,7,10,1,0,200,8,0,10,132,0,8,225,4,1,0,201,8,0,1,132,0,10,240,1,10,0,200,7,0,3,2,0,10,27,0,139,0,18,18,200,8,0,1,132,0,8,225,1,3,0,200,8,0,3,132,0,9,240,3,3,0,80,135,1,1,0,10,27,0,0,161,1,16,131,200,7,0,11,1,0,27,0,0,171,10,15,1,68,128,1,10,133,0,10,226,0,0,1,200,8,0,10,0,0,11,128,64,139,10,21,21,200,7,0,4,0,12,0,27,0,235,3,1,2,200,8,0,3,0,11,0,192,0,171,3,21,10,68,129,10,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,8,225,4,5,0,201,8,0,3,132,0,9,240,4,10,0,200,7,0,3,0,10,27,0,0,225,1,3,0,64,128,4,133,0,8,226,0,0,131,200,8,0,4,9,0,0,27,0,161,4,19,0,56,2,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,10,1,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,22,9,22,200,7,0,4,0,27,0,0,8,161,1,20,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,19,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,25,25,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,25,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,23,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,26,9,26,200,7,0,4,0,27,0,0,8,161,1,24,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,23,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,29,29,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,29,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,27,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,30,9,30,200,7,0,4,0,27,0,0,8,161,1,28,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,27,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,33,33,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,33,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,31,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,34,9,34,200,7,0,4,0,27,0,0,8,161,1,32,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,31,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,2,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,4,132,0,7,240,2,2,3,80,112,4,132,0,9,64,226,0,0,4,200,7,0,2,132,0,9,225,2,4,0,200,8,0,3,0,9,0,128,64,139,3,37,37,201,8,134,0,7,240,10,2,0,200,8,0,8,1,0,0,192,0,171,1,37,5,3,68,135,10,9,132,0,8,226,0,0,1,65,136,0,2,132,0,6,240,3,10,128,200,8,132,0,6,27,0,161,0,35,0,3,56,136,1,133,0,5,225,10,2,0,200,3,8,0,1,132,0,5,225,10,1,0,200,1,7,131,0,6,27,0,0,161,0,36,3,0,200,7,131,0,7,27,0,0,171,1,35,0,3,20,128,10,132,0,7,108,194,0,0,8,200,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,3,2,128,2,132,0,4,226,7,7,0,4,200,15,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,10,10,4,0,200,15,128,1,4,132,0,4,226,9,9,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx16 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,1,156,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,92,0,81,0,4,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,4,0,0,48,5,0,32,160,6,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,22,0,0,16,25,0,15,0,16,20,0,0,16,23,0,0,16,24,0,0,16,26,192,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,2,18,0,1,18,133,0,1,32,2,19,0,3,0,18,0,1,194,133,0,2,96,21,3,16,27,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,48,0,4,0,36,6,136,132,0,4,200,1,0,4,132,0,3,175,2,4,4,0,200,2,0,1,4,132,0,4,175,2,5,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,4,2,0,4,132,0,3,175,2,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,4,132,0,2,175,2,3,7,128,20,1,135,132,0,3,27,108,193,4,0,0,8,200,3,1,0,1,132,0,4,175,2,0,0,4,200,2,0,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,8,0,1,132,0,4,175,2,3,0,5,200,3,128,2,0,6,12,12,0,34,8,8,5,0,200,15,128,62,132,0,6,226,4,4,0,200,15,1,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,1,226,131,0,4,200,15,128,4,132,0,4,226,1,1,0,4,200,15,128,1,132,0,4,226,3,3,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx17 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,2,200,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,136,0,81,0,7,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,6,0,0,48,7,0,32,160,8,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,47,0,0,16,50,0,15,0,16,45,0,0,16,48,0,0,16,49,0,0,16,51,192,0,0,1,112,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,2,18,0,1,18,133,0,1,96,2,21,96,3,27,18,0,1,18,133,0,2,96,33,3,96,39,18,2,0,18,133,0,2,16,45,3,0,0,18,2,0,194,133,0,2,96,46,3,16,52,18,2,0,34,131,0,4,5,248,16,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,1,248,64,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,1,4,4,0,200,2,0,1,7,132,0,4,175,1,5,0,4,200,4,0,7,132,0,4,175,1,6,0,4,200,8,0,7,132,0,4,175,1,7,0,4,200,8,0,6,132,0,4,175,1,3,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,7,3,0,5,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,5,132,0,6,240,5,5,0,80,136,2,0,1,132,0,6,240,1,1,133,80,135,2,5,6,132,0,6,226,0,0,129,68,135,7,5,1,0,0,27,0,225,8,1,5,5,200,7,0,5,0,9,27,0,0,235,0,5,1,200,1,134,0,6,240,5,5,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,5,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,5,132,0,4,225,2,3,0,5,200,8,0,5,0,6,0,128,64,139,5,17,3,17,201,8,134,0,4,240,0,5,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,5,68,128,5,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,5,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,108,193,6,5,1,8,200,7,0,1,2,132,0,6,226,5,5,0,200,8,2,0,1,132,0,6,225,5,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,8,128,2,0,12,12,0,34,8,6,8,0,200,15,128,62,132,0,7,226,7,7,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,5,226,2,2,0,200,3,15,128,4,132,0,5,226,6,6,0,200,3,15,128,1,132,0,5,226,4,4,0,200,3,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx18 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,4,192,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,4,128,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,9,0,0,48,10,0,32,160,11,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,89,0,0,16,92,0,15,0,16,87,0,0,16,90,0,0,16,91,0,0,16,93,192,0,0,1,112,1,21,1,48,1,9,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,2,18,0,1,18,133,0,1,96,2,24,96,3,30,18,0,1,18,133,0,2,96,36,3,96,42,18,2,0,18,133,0,2,96,48,3,96,54,18,2,0,18,133,0,2,96,60,3,96,66,18,2,0,18,133,0,2,96,72,3,96,78,18,2,0,18,133,0,2,64,84,3,0,0,18,2,0,194,133,0,2,96,88,3,16,94,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,96,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,2,4,4,0,200,2,0,1,7,132,0,4,175,2,5,0,4,200,4,0,7,132,0,4,175,2,6,0,4,200,8,0,7,132,0,4,175,2,7,0,4,200,8,0,8,132,0,4,175,2,3,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,9,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,9,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,9,5,200,7,0,4,0,6,0,27,0,235,0,9,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,9,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,9,0,0,200,8,0,9,132,0,6,225,3,0,0,201,8,134,0,7,240,0,9,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,9,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,9,132,0,9,240,9,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,137,68,136,9,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,9,0,201,8,134,0,4,240,9,4,0,2,200,8,134,0,2,225,9,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,9,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,9,8,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,9,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,9,2,1,200,8,134,0,5,225,9,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,5,23,1,20,128,9,132,0,7,108,194,0,0,8,200,7,134,0,5,224,0,1,0,20,1,135,133,0,4,27,128,0,13,5,13,200,3,128,2,6,0,12,12,0,34,8,6,8,0,200,15,128,62,132,0,6,226,7,7,0,200,15,1,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,9,9,0,4,200,15,128,4,132,0,4,226,8,8,0,4,200,15,128,1,132,0,4,226,6,6,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx19 = new byte[] {4,16,42,17,1,131,0,5,176,0,0,7,156,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,7,92,0,81,0,10,138,0,2,88,198,131,0,1,1,131,0,1,3,131,0,50,6,0,0,2,144,0,16,0,14,0,0,48,15,0,32,160,16,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,150,0,0,16,153,0,15,0,16,148,0,0,16,151,0,0,16,152,0,0,16,154,192,0,0,1,112,1,21,1,48,1,14,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,17,1,96,1,23,2,18,0,1,18,133,0,1,96,2,29,96,3,35,18,0,1,18,133,0,2,96,41,3,96,47,18,2,0,18,133,0,2,96,53,3,96,59,18,2,0,18,133,0,2,96,65,3,96,71,18,2,0,18,133,0,2,96,77,3,96,83,18,2,0,18,133,0,2,96,89,3,96,95,18,2,0,18,133,0,2,96,101,3,96,107,18,2,0,18,133,0,2,96,113,3,96,119,18,2,0,18,133,0,2,96,125,3,96,131,18,2,0,18,133,0,2,96,137,3,96,143,18,2,0,18,135,0,0,1,96,2,149,194,2,0,18,133,0,1,16,2,155,0,2,0,34,133,0,1,5,2,248,16,3,0,0,36,2,6,136,132,0,3,3,248,96,4,0,0,36,6,1,136,132,0,4,1,248,112,0,4,0,36,6,136,132,0,4,200,1,0,8,132,0,3,175,1,4,4,0,200,2,0,1,8,132,0,4,175,1,5,0,4,200,4,0,8,132,0,4,175,1,6,0,4,200,8,0,8,132,0,4,175,1,7,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,8,2,0,9,132,0,3,175,1,3,4,0,200,7,0,5,1,2,0,27,0,6,139,0,14,14,200,8,2,0,1,132,0,6,240,1,1,0,80,135,3,10,2,4,131,0,7,160,0,12,129,200,1,0,1,3,132,0,7,240,2,2,0,80,113,3,1,4,131,0,8,64,176,6,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,7,0,10,9,0,0,27,0,235,1,10,2,68,3,129,5,3,132,0,1,240,131,10,4,80,114,3,4,131,0,9,64,176,6,1,3,200,7,0,5,132,0,8,225,10,3,0,200,4,0,4,132,0,7,176,6,2,0,200,1,0,1,3,132,0,7,240,4,4,0,80,112,3,132,0,6,64,226,0,0,3,200,3,7,0,10,132,0,6,225,4,3,0,200,8,7,0,5,0,0,128,64,139,7,5,17,17,201,4,0,5,132,0,7,240,10,5,0,200,8,0,8,5,0,0,192,0,171,1,17,4,5,64,128,3,132,0,8,192,226,0,0,133,68,136,4,9,3,0,0,27,0,161,3,15,5,10,56,136,1,3,0,21,21,0,226,4,11,4,3,200,7,0,1,0,27,0,0,225,7,10,1,0,200,8,0,10,132,0,8,225,4,1,0,201,8,0,1,132,0,10,240,1,10,0,200,7,0,3,2,0,10,27,0,139,0,18,18,200,8,0,1,132,0,8,225,1,3,0,200,8,0,3,132,0,9,240,3,3,0,80,135,1,1,0,10,27,0,0,161,1,16,131,200,7,0,11,1,0,27,0,0,171,10,15,1,68,128,1,10,133,0,10,226,0,0,1,200,8,0,10,0,0,11,128,64,139,10,21,21,200,7,0,4,0,12,0,27,0,235,3,1,2,200,8,0,3,0,11,0,192,0,171,3,21,10,68,129,10,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,8,225,4,5,0,201,8,0,3,132,0,9,240,4,10,0,200,7,0,3,0,10,27,0,0,225,1,3,0,64,128,4,133,0,8,226,0,0,131,200,8,0,4,9,0,0,27,0,161,4,19,0,56,2,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,10,1,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,22,9,22,200,7,0,4,0,27,0,0,8,161,1,20,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,19,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,25,25,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,25,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,23,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,26,9,26,200,7,0,4,0,27,0,0,8,161,1,24,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,23,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,29,29,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,29,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,27,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,30,9,30,200,7,0,4,0,27,0,0,8,161,1,28,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,27,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,33,33,201,8,0,1,10,132,0,10,240,10,4,0,200,8,0,3,0,0,9,192,0,171,1,33,3,64,128,4,133,0,9,226,0,0,138,68,136,10,4,0,10,0,27,0,161,4,31,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,10,0,201,8,0,1,1,132,0,7,240,10,3,0,200,8,0,1,1,132,0,7,225,10,1,0,200,7,0,8,3,2,0,27,0,139,0,34,9,34,200,7,0,4,0,27,0,0,8,161,1,32,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,31,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,2,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,4,132,0,7,240,2,2,3,80,112,4,132,0,9,64,226,0,0,4,200,7,0,2,132,0,9,225,2,4,0,200,8,0,3,0,9,0,128,64,139,3,37,37,201,8,134,0,7,240,10,2,0,200,8,0,8,1,0,0,192,0,171,1,37,5,3,68,135,10,9,132,0,8,226,0,0,1,65,136,0,2,132,0,6,240,3,10,128,200,8,132,0,6,27,0,161,0,35,0,3,56,136,1,133,0,5,225,10,2,0,200,3,8,0,1,132,0,5,225,10,1,0,200,1,7,131,0,6,27,0,0,161,0,36,3,0,200,7,131,0,7,27,0,0,171,1,35,0,3,20,128,10,132,0,7,108,194,0,0,8,200,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,3,5,128,2,0,12,12,6,0,34,8,8,0,200,3,15,128,62,132,0,6,226,8,8,0,200,15,1,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,10,10,0,4,200,15,128,4,132,0,4,226,9,9,0,4,200,15,128,1,132,0,4,226,7,7,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx20 = new byte[] {4,16,42,17,1,131,0,5,180,0,0,1,168,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,1,104,0,81,0,5,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,50,6,0,0,2,144,0,16,0,4,0,0,48,5,0,0,160,6,0,32,80,7,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,23,0,19,0,16,26,0,0,16,21,0,0,16,24,0,0,16,25,0,0,16,27,192,0,0,1,240,1,85,1,64,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,8,1,96,1,14,2,18,0,1,18,133,0,1,32,2,20,0,3,0,18,0,1,194,133,0,2,96,22,3,16,28,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,48,0,4,0,36,6,136,132,0,4,5,232,64,0,4,0,36,6,136,132,0,4,200,1,0,5,132,0,3,175,2,4,4,0,200,2,0,1,5,132,0,4,175,2,5,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,4,2,0,5,132,0,3,175,2,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,5,132,0,2,175,2,3,7,128,20,1,135,132,0,3,27,108,193,4,0,0,8,200,3,1,0,1,132,0,4,175,2,0,0,4,200,2,0,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,8,0,1,132,0,4,175,2,3,0,4,200,3,128,2,132,0,4,226,4,4,0,4,200,15,128,62,132,0,4,226,5,5,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,1,1,4,0,200,15,128,1,1,132,0,4,226,3,3,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx21 = new byte[] {4,16,42,17,1,131,0,5,180,0,0,2,212,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,148,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,50,6,0,0,2,144,0,16,0,6,0,0,48,7,0,0,160,8,0,32,80,9,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,48,0,19,0,16,51,0,0,16,46,0,0,16,49,0,0,16,50,0,0,16,52,192,0,0,1,240,1,85,1,64,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,10,1,96,1,16,2,18,0,1,18,133,0,1,96,2,22,96,3,28,18,0,1,18,133,0,2,96,34,3,96,40,18,2,0,18,133,0,2,16,46,3,0,0,18,2,0,194,133,0,2,96,47,3,16,53,18,2,0,34,131,0,4,5,248,16,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,1,248,80,0,4,0,36,6,136,132,0,4,5,232,64,0,4,0,36,6,136,132,0,4,200,1,0,8,132,0,3,175,1,4,4,0,200,2,0,1,8,132,0,4,175,1,5,0,4,200,4,0,8,132,0,4,175,1,6,0,4,200,8,0,8,132,0,4,175,1,7,0,4,200,8,0,7,132,0,4,175,1,3,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,7,3,0,6,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,6,132,0,6,240,6,6,0,80,136,2,0,1,132,0,6,240,1,1,134,80,135,2,6,7,132,0,6,226,0,0,129,68,135,7,6,1,0,0,27,0,225,8,1,6,6,200,7,0,6,0,9,27,0,0,235,0,6,1,200,1,134,0,6,240,6,6,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,6,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,6,132,0,4,225,2,3,0,5,200,8,0,6,0,6,0,128,64,139,6,17,3,17,201,8,134,0,4,240,0,6,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,6,68,128,6,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,6,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,108,193,6,6,1,8,200,7,0,1,2,132,0,6,226,6,6,0,200,8,2,0,1,132,0,6,225,6,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,2,128,2,132,0,7,226,4,4,0,200,15,128,1,62,132,0,7,226,8,8,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,2,2,0,4,200,15,128,4,132,0,4,226,7,7,0,4,200,15,128,1,132,0,4,226,5,5,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx22 = new byte[] {4,16,42,17,1,131,0,5,180,0,0,4,204,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,4,140,0,81,0,10,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,50,6,0,0,2,144,0,16,0,9,0,0,48,10,0,0,160,11,0,32,80,12,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,90,0,19,0,16,93,0,0,16,88,0,0,16,91,0,0,16,92,0,0,16,94,192,0,0,1,240,1,85,1,64,1,9,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,13,1,96,1,19,2,18,0,1,18,133,0,1,96,2,25,96,3,31,18,0,1,18,133,0,2,96,37,3,96,43,18,2,0,18,133,0,2,96,49,3,96,55,18,2,0,18,133,0,2,96,61,3,96,67,18,2,0,18,133,0,2,96,73,3,96,79,18,2,0,18,133,0,2,64,85,3,0,0,18,2,0,194,133,0,2,96,89,3,16,95,18,2,0,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,16,0,4,0,36,6,136,132,0,4,1,248,96,0,4,0,36,6,136,132,0,4,5,232,112,0,4,0,36,6,136,132,0,4,200,1,0,8,132,0,3,175,2,4,4,0,200,2,0,1,8,132,0,4,175,2,5,0,4,200,4,0,8,132,0,4,175,2,6,0,4,200,8,0,8,132,0,4,175,2,7,0,4,200,8,0,9,132,0,4,175,2,3,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,10,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,10,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,10,5,200,7,0,4,0,6,0,27,0,235,0,10,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,10,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,10,0,0,200,8,0,10,132,0,6,225,3,0,0,201,8,134,0,7,240,0,10,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,10,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,10,132,0,9,240,10,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,138,68,136,10,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,10,0,201,8,134,0,4,240,10,4,0,2,200,8,134,0,2,225,10,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,10,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,10,9,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,10,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,10,2,1,200,8,134,0,5,225,10,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,5,23,1,20,128,10,132,0,7,108,194,0,0,8,200,7,134,0,5,224,0,1,0,20,1,135,133,0,4,27,128,0,13,5,13,200,3,128,2,132,0,4,226,7,7,0,4,200,15,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,10,10,4,0,200,15,128,1,4,132,0,4,226,9,9,0,4,200,15,128,1,132,0,4,226,6,6,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx23 = new byte[] {4,16,42,17,1,131,0,5,180,0,0,7,168,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,7,104,0,81,0,11,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,50,6,0,0,2,144,0,16,0,14,0,0,48,15,0,0,160,16,0,32,80,17,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,151,0,19,0,16,154,0,0,16,149,0,0,16,152,0,0,16,153,0,0,16,155,192,0,0,1,240,1,85,1,64,1,14,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,18,1,96,1,24,2,18,0,1,18,133,0,1,96,2,30,96,3,36,18,0,1,18,133,0,2,96,42,3,96,48,18,2,0,18,133,0,2,96,54,3,96,60,18,2,0,18,133,0,2,96,66,3,96,72,18,2,0,18,133,0,2,96,78,3,96,84,18,2,0,18,133,0,2,96,90,3,96,96,18,2,0,18,133,0,2,96,102,3,96,108,18,2,0,18,133,0,2,96,114,3,96,120,18,2,0,18,133,0,2,96,126,3,96,132,18,2,0,18,133,0,2,96,138,3,96,144,18,2,0,18,135,0,0,1,96,2,150,194,2,0,18,133,0,1,16,2,156,0,2,0,34,133,0,1,5,2,248,16,3,0,0,36,2,6,136,132,0,3,3,248,96,4,0,0,36,6,1,136,132,0,4,1,248,112,0,4,0,36,6,136,132,0,4,5,232,128,0,4,0,36,6,136,132,0,4,200,1,0,9,132,0,3,175,1,4,4,0,200,2,0,1,9,132,0,4,175,1,5,0,4,200,4,0,9,132,0,4,175,1,6,0,4,200,8,0,9,132,0,4,175,1,7,0,2,200,1,134,0,2,175,1,3,0,0,200,1,2,134,0,1,175,2,1,1,3,0,200,4,134,0,0,1,175,2,1,2,3,0,200,8,2,0,10,132,0,3,175,1,3,4,0,200,7,0,5,1,2,0,27,0,6,139,0,14,14,200,8,2,0,1,132,0,6,240,1,1,0,80,135,3,11,2,4,131,0,7,160,0,12,129,200,1,0,1,3,132,0,7,240,2,2,0,80,113,3,1,4,131,0,8,64,176,6,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,7,0,11,9,0,0,27,0,235,1,11,2,68,3,129,5,3,132,0,1,240,131,11,4,80,114,3,4,131,0,9,64,176,6,1,3,200,7,0,5,132,0,8,225,11,3,0,200,4,0,4,132,0,7,176,6,2,0,200,1,0,1,3,132,0,7,240,4,4,0,80,112,3,132,0,6,64,226,0,0,3,200,3,7,0,11,132,0,6,225,4,3,0,200,8,7,0,5,0,0,128,64,139,7,5,17,17,201,4,0,5,132,0,7,240,11,5,0,200,8,0,8,5,0,0,192,0,171,1,17,4,5,64,128,3,132,0,8,192,226,0,0,133,68,136,4,9,3,0,0,27,0,161,3,15,5,10,56,136,1,3,0,21,21,0,226,4,11,4,3,200,7,0,1,0,27,0,0,225,7,11,1,0,200,8,0,11,132,0,8,225,4,1,0,201,8,0,1,132,0,10,240,1,11,0,200,7,0,3,2,0,10,27,0,139,0,18,18,200,8,0,1,132,0,8,225,1,3,0,200,8,0,3,132,0,9,240,3,3,0,80,135,1,1,0,10,27,0,0,161,1,16,131,200,7,0,11,1,0,27,0,0,171,11,15,1,68,128,1,11,133,0,10,226,0,0,1,200,8,0,11,0,0,11,128,64,139,11,21,21,200,7,0,4,0,12,0,27,0,235,3,1,2,200,8,0,3,0,11,0,192,0,171,3,21,11,68,129,11,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,8,225,4,5,0,201,8,0,3,132,0,9,240,4,11,0,200,7,0,3,0,10,27,0,0,225,1,3,0,64,128,4,133,0,8,226,0,0,131,200,8,0,4,9,0,0,27,0,161,4,19,0,56,2,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,11,1,0,201,8,0,1,1,132,0,7,240,11,3,0,200,8,0,1,1,132,0,7,225,11,1,0,200,7,0,8,3,2,0,27,0,139,0,22,9,22,200,7,0,4,0,27,0,0,8,161,1,20,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,19,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,25,25,201,8,0,1,11,132,0,10,240,11,4,0,200,8,0,3,0,0,9,192,0,171,1,25,3,64,128,4,133,0,9,226,0,0,139,68,136,11,4,0,10,0,27,0,161,4,23,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,11,0,201,8,0,1,1,132,0,7,240,11,3,0,200,8,0,1,1,132,0,7,225,11,1,0,200,7,0,8,3,2,0,27,0,139,0,26,9,26,200,7,0,4,0,27,0,0,8,161,1,24,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,23,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,29,29,201,8,0,1,11,132,0,10,240,11,4,0,200,8,0,3,0,0,9,192,0,171,1,29,3,64,128,4,133,0,9,226,0,0,139,68,136,11,4,0,10,0,27,0,161,4,27,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,11,0,201,8,0,1,1,132,0,7,240,11,3,0,200,8,0,1,1,132,0,7,225,11,1,0,200,7,0,8,3,2,0,27,0,139,0,30,9,30,200,7,0,4,0,27,0,0,8,161,1,28,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,27,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,4,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,5,132,0,7,240,4,4,3,80,112,5,132,0,9,64,226,0,0,5,200,7,0,4,132,0,9,225,4,5,0,200,8,0,3,0,10,0,128,64,139,3,33,33,201,8,0,1,11,132,0,10,240,11,4,0,200,8,0,3,0,0,9,192,0,171,1,33,3,64,128,4,133,0,9,226,0,0,139,68,136,11,4,0,10,0,27,0,161,4,31,3,56,128,1,133,0,8,226,0,0,4,200,8,0,3,132,0,7,225,1,11,0,201,8,0,1,1,132,0,7,240,11,3,0,200,8,0,1,1,132,0,7,225,11,1,0,200,7,0,8,3,2,0,27,0,139,0,34,9,34,200,7,0,4,0,27,0,0,8,161,1,32,0,200,8,0,1,132,0,9,240,3,3,0,200,7,0,4,0,10,27,0,0,171,3,31,4,80,135,3,1,1,132,0,10,224,1,4,129,200,7,0,2,0,0,11,27,0,235,3,3,2,200,7,0,3,0,11,0,27,0,225,3,3,0,68,129,3,4,132,0,7,240,2,2,3,80,112,4,132,0,9,64,226,0,0,4,200,7,0,2,132,0,9,225,2,4,0,200,8,0,3,0,9,0,128,64,139,3,37,37,201,8,134,0,7,240,11,2,0,200,8,0,8,1,0,0,192,0,171,1,37,5,3,68,135,11,10,132,0,8,226,0,0,1,65,136,0,2,132,0,6,240,3,11,128,200,8,132,0,6,27,0,161,0,35,0,3,56,136,1,133,0,5,225,11,2,0,200,3,8,0,1,132,0,5,225,11,1,0,200,1,7,131,0,6,27,0,0,161,0,36,3,0,200,7,131,0,7,27,0,0,171,1,35,0,3,20,128,11,132,0,7,108,194,0,0,8,200,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,3,2,128,2,132,0,4,226,8,8,0,4,200,15,128,62,132,0,4,226,9,9,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,11,11,4,0,200,15,128,1,4,132,0,4,226,10,10,0,4,200,15,128,1,132,0,4,226,7,7,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx24 = new byte[] {4,16,42,17,1,131,0,5,204,0,0,2,92,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,28,0,113,0,7,138,0,2,121,8,131,0,1,1,131,0,1,6,131,0,50,8,0,0,2,144,0,16,0,5,0,0,48,6,0,0,112,7,0,0,96,8,0,0,160,9,0,32,80,10,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,43,5,245,85,0,6,246,86,0,7,247,87,0,0,16,36,0,0,16,38,0,0,16,34,0,0,16,37,0,0,16,39,0,0,16,40,0,0,16,41,0,0,16,42,192,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,11,1,96,1,17,2,18,0,1,18,133,0,1,96,2,23,96,3,29,18,0,1,18,135,0,0,1,96,2,35,194,2,0,18,133,0,1,32,2,41,16,3,43,18,0,1,34,131,0,4,5,248,80,0,4,0,36,6,136,132,0,4,3,248,96,0,4,0,36,6,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,64,0,4,0,36,6,136,132,0,4,3,232,48,0,4,0,36,6,136,132,0,4,1,232,32,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,5,4,4,0,200,2,0,1,7,132,0,4,175,5,5,0,2,200,1,134,0,2,176,6,3,0,0,200,1,2,134,0,1,176,2,6,1,3,0,200,4,134,0,0,1,176,2,6,2,3,0,200,4,2,0,7,132,0,3,175,5,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,7,132,0,2,175,5,3,7,128,20,4,135,6,6,0,5,0,27,108,193,0,4,0,8,200,1,134,0,3,176,1,0,3,0,200,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,8,2,0,1,132,0,1,240,131,0,3,200,1,0,1,1,132,0,3,176,4,0,4,0,200,2,0,1,1,132,0,4,176,4,1,0,4,200,4,0,1,132,0,4,176,4,2,0,4,80,136,0,1,132,0,4,240,1,1,129,5,80,135,1,4,0,6,0,27,0,225,0,0,4,129,20,135,4,131,0,7,27,108,193,1,1,8,20,3,129,0,1,131,0,8,108,143,5,0,8,200,2,0,1,1,132,0,8,175,5,1,0,200,4,0,1,132,0,7,175,5,2,0,200,8,0,1,1,132,0,7,175,5,3,0,200,3,128,1,2,132,0,7,226,2,2,0,200,15,128,1,62,132,0,7,226,7,7,0,200,15,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,5,226,1,1,0,200,3,15,128,1,132,0,5,226,3,3,0,200,3,15,128,4,132,0,5,226,6,6,0,200,3,15,128,5,132,0,5,226,4,4,0,200,3,15,128,6,132,0,1,226,131,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx25 = new byte[] {4,16,42,17,1,131,0,5,204,0,0,3,136,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,3,72,0,113,0,10,138,0,2,121,8,131,0,1,1,131,0,1,6,131,0,50,8,0,0,2,144,0,16,0,7,0,0,48,8,0,0,112,9,0,0,96,10,0,0,160,11,0,32,80,12,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,43,5,245,85,0,6,246,86,0,7,247,87,0,0,16,61,0,0,16,63,0,0,16,59,0,0,16,62,0,0,16,64,0,0,16,65,0,0,16,66,0,0,16,67,192,0,0,1,245,1,85,1,96,1,7,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,13,1,96,1,19,2,18,0,1,18,133,0,1,96,2,25,96,3,31,18,0,1,18,133,0,2,96,37,3,96,43,18,2,0,18,133,0,2,96,49,3,80,55,18,2,0,18,135,0,0,1,96,2,60,194,2,0,18,133,0,1,32,2,66,16,3,68,18,0,1,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,96,0,4,0,36,6,136,132,0,4,3,232,80,0,4,0,36,6,136,132,0,4,1,232,64,0,4,0,36,6,136,132,0,4,200,1,0,10,132,0,3,175,2,4,4,0,200,2,0,1,10,132,0,4,175,2,5,0,4,200,4,0,10,132,0,4,175,2,6,0,4,200,8,0,10,132,0,4,175,2,7,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,176,6,0,4,0,200,2,0,1,1,132,0,4,176,6,1,0,4,200,4,0,1,132,0,4,176,6,2,0,2,200,8,134,0,1,240,131,0,2,80,136,2,0,1,132,0,2,240,1,3,1,128,80,4,135,1,9,0,5,0,27,0,225,0,6,0,129,20,135,9,8,7,0,0,27,108,193,1,1,5,8,20,136,8,7,131,0,7,108,143,2,3,8,200,1,134,0,5,175,2,0,0,200,1,2,134,0,3,175,2,1,3,0,200,4,134,0,1,175,2,2,2,3,0,200,7,3,0,6,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,6,132,0,6,240,6,6,0,80,136,2,0,1,132,0,6,240,1,1,134,80,135,2,6,7,132,0,6,226,0,0,129,68,135,7,6,1,0,0,27,0,225,8,1,6,6,200,7,0,6,0,9,27,0,0,235,0,6,1,200,1,134,0,6,240,6,6,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,6,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,6,132,0,4,225,2,3,0,5,200,8,0,6,0,6,0,128,64,139,6,17,3,17,201,8,134,0,4,240,0,6,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,6,68,128,6,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,6,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,108,193,6,6,1,8,200,7,0,1,2,132,0,6,226,6,6,0,200,8,2,0,1,132,0,6,225,6,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,2,128,2,132,0,7,226,4,4,0,200,15,128,1,62,132,0,7,226,10,10,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,7,7,0,4,200,15,128,1,132,0,4,226,5,5,0,4,200,15,128,4,132,0,4,226,2,2,0,4,200,15,128,5,132,0,4,226,9,9,0,4,200,15,128,6,132,0,4,226,8,8,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx26 = new byte[] {4,16,42,17,1,131,0,5,204,0,0,5,140,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,5,76,0,113,0,12,138,0,2,121,8,131,0,1,1,131,0,1,6,131,0,50,8,0,0,2,144,0,16,0,11,0,0,48,12,0,0,112,13,0,0,96,14,0,0,160,15,0,32,80,16,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,43,5,245,85,0,6,246,86,0,7,247,87,0,0,16,104,0,0,16,106,0,0,16,102,0,0,16,105,0,0,16,107,0,0,16,108,0,0,16,109,0,0,16,110,192,0,0,1,245,1,85,1,96,1,11,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,17,1,96,1,23,2,18,0,1,18,133,0,1,96,2,29,96,3,35,18,0,1,18,133,0,2,96,41,3,96,47,18,2,0,18,133,0,2,96,53,3,96,59,18,2,0,18,133,0,2,96,65,3,96,71,18,2,0,18,133,0,2,96,77,3,96,83,18,2,0,18,133,0,2,96,89,3,96,95,18,2,0,18,133,0,2,32,101,3,0,0,18,2,0,194,133,0,2,96,103,3,32,109,18,2,0,18,133,0,2,16,111,3,0,0,34,133,0,1,5,2,248,32,3,0,0,36,2,6,136,132,0,3,3,248,48,4,0,0,36,6,1,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,64,0,4,0,36,6,136,132,0,4,3,232,96,0,4,0,36,6,136,132,0,4,1,232,112,0,4,0,36,6,136,132,0,4,200,1,0,8,132,0,3,175,2,4,4,0,200,2,0,1,8,132,0,4,175,2,5,0,4,200,4,0,8,132,0,4,175,2,6,0,4,200,8,0,8,132,0,4,175,2,7,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,8,2,0,1,132,0,1,240,131,0,3,200,1,0,1,1,132,0,3,176,4,0,4,0,200,2,0,1,1,132,0,4,176,4,1,0,4,200,4,0,1,132,0,4,176,4,2,0,4,80,136,0,1,132,0,4,240,1,1,129,5,80,135,1,9,0,6,0,27,0,225,0,0,7,129,20,135,9,10,0,0,8,27,108,193,1,1,8,20,136,2,10,11,131,0,7,108,143,2,3,8,200,1,134,0,6,176,3,0,0,200,2,134,0,3,176,3,1,3,0,200,4,134,0,1,176,2,3,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,12,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,12,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,12,5,200,7,0,4,0,6,0,27,0,235,0,12,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,12,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,12,0,0,200,8,0,12,132,0,6,225,3,0,0,201,8,134,0,7,240,0,12,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,12,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,12,132,0,9,240,12,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,140,68,136,12,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,12,0,201,8,134,0,4,240,12,4,0,2,200,8,134,0,2,225,12,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,12,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,12,11,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,12,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,12,2,1,200,8,134,0,5,225,12,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,4,23,1,200,7,134,0,6,224,0,1,0,20,128,1,12,132,0,6,108,194,0,0,8,20,1,135,133,0,5,27,128,0,13,13,4,200,3,128,2,132,0,5,226,7,7,0,200,3,15,128,62,132,0,5,226,8,8,0,200,2,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,3,226,11,11,4,0,200,15,128,1,1,132,0,4,226,6,6,0,4,200,15,128,4,132,0,4,226,12,12,0,4,200,15,128,5,132,0,4,226,9,9,0,4,200,15,128,6,132,0,4,226,10,10,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx27 = new byte[] {};
		
		public static byte[] _bx28 = new byte[] {4,16,42,17,1,131,0,5,200,0,0,2,80,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,2,16,0,113,0,6,138,0,2,121,8,131,0,1,1,131,0,1,5,131,0,50,8,0,0,2,144,0,16,0,5,0,0,48,6,0,0,112,7,0,0,96,8,0,32,80,9,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,41,6,246,86,0,7,247,87,0,0,16,35,0,0,16,37,0,0,16,33,0,0,16,36,0,0,16,38,0,0,16,39,0,0,16,40,0,0,16,41,63,128,190,0,0,1,241,1,85,1,80,1,5,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,10,2,96,16,3,18,0,18,133,0,1,96,2,22,96,3,28,18,0,1,18,135,0,0,1,96,2,34,194,2,0,18,133,0,1,32,2,40,16,3,42,18,0,1,34,131,0,4,5,248,64,0,4,0,36,6,136,132,0,4,3,248,80,0,4,0,36,6,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,48,0,4,0,36,6,136,132,0,4,3,232,32,0,4,0,36,6,136,132,0,4,200,1,0,6,132,0,3,175,4,4,4,0,200,2,0,1,6,132,0,4,175,4,5,0,2,200,1,134,0,2,176,5,3,0,0,200,1,2,134,0,1,176,2,5,1,3,0,200,4,134,0,0,1,176,2,5,2,3,0,200,4,2,0,6,132,0,3,175,4,6,3,0,200,8,134,0,1,240,131,0,1,80,2,136,0,1,6,132,0,2,175,4,3,7,128,20,4,135,5,5,0,5,0,27,177,193,0,4,0,8,200,1,134,0,3,176,1,0,3,0,200,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,8,2,0,1,132,0,1,240,131,0,3,200,1,0,1,1,132,0,3,176,3,0,4,0,200,2,0,1,1,132,0,4,176,3,1,0,4,200,4,0,1,132,0,4,176,3,2,0,4,80,136,0,1,132,0,4,240,1,1,129,5,80,135,1,3,0,6,0,27,0,225,0,0,4,129,20,135,3,131,0,7,27,177,193,1,1,8,20,3,129,0,1,131,0,8,177,143,4,0,8,200,2,0,1,1,132,0,8,175,4,1,0,200,4,0,1,132,0,7,175,4,2,0,200,8,0,1,1,132,0,7,175,4,3,0,200,3,128,1,2,132,0,7,226,2,2,0,200,15,128,1,62,132,0,7,226,6,6,0,200,15,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,5,226,1,1,0,200,6,15,128,1,0,108,108,7,0,34,8,8,0,200,15,2,128,4,132,0,7,226,5,5,0,200,15,128,1,5,132,0,7,226,3,3,0,200,15,128,1,6,132,0,1,226,131,0,4,200,15,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx29 = new byte[] {4,16,42,17,1,131,0,5,200,0,0,3,124,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,3,60,0,113,0,9,138,0,2,121,8,131,0,1,1,131,0,1,5,131,0,50,8,0,0,2,144,0,16,0,7,0,0,48,8,0,0,112,9,0,0,96,10,0,32,80,11,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,41,6,246,86,0,7,247,87,0,0,16,60,0,0,16,62,0,0,16,58,0,0,16,61,0,0,16,63,0,0,16,64,0,0,16,65,0,0,16,66,63,128,190,0,0,1,241,1,85,1,80,1,7,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,12,2,96,18,3,18,0,18,133,0,1,96,2,24,96,3,30,18,0,1,18,133,0,2,96,36,3,96,42,18,2,0,18,133,0,2,96,48,3,80,54,18,2,0,18,135,0,0,1,96,2,59,194,2,0,18,133,0,1,32,2,65,16,3,67,18,0,1,34,131,0,4,5,248,32,0,4,0,36,6,136,132,0,4,3,248,48,0,4,0,36,6,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,80,0,4,0,36,6,136,132,0,4,3,232,64,0,4,0,36,6,136,132,0,4,200,1,0,9,132,0,3,175,2,4,4,0,200,2,0,1,9,132,0,4,175,2,5,0,4,200,4,0,9,132,0,4,175,2,6,0,4,200,8,0,9,132,0,4,175,2,7,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,3,176,5,0,4,0,200,2,0,1,1,132,0,4,176,5,1,0,4,200,4,0,1,132,0,4,176,5,2,0,2,200,8,134,0,1,240,131,0,2,80,136,2,0,1,132,0,2,240,1,3,1,128,80,4,135,1,8,0,5,0,27,0,225,0,6,0,129,20,135,8,7,7,0,0,27,177,193,1,1,5,8,20,136,7,6,131,0,7,177,143,2,3,8,200,1,134,0,5,175,2,0,0,200,1,2,134,0,3,175,2,1,3,0,200,4,134,0,1,175,2,2,2,3,0,200,7,3,0,5,4,131,0,4,160,0,12,0,5,200,7,0,1,2,6,0,27,0,139,0,14,5,14,200,8,0,5,132,0,6,240,5,5,0,80,136,2,0,1,132,0,6,240,1,1,133,80,135,2,5,6,132,0,6,226,0,0,129,68,135,7,5,1,0,0,27,0,225,8,1,5,5,200,7,0,5,0,9,27,0,0,235,0,5,1,200,1,134,0,6,240,5,5,0,80,113,2,0,2,131,0,7,64,176,3,0,0,200,7,134,0,4,225,5,0,0,4,200,2,0,2,132,0,4,176,3,1,0,4,200,4,0,2,132,0,4,176,3,2,0,4,200,1,0,3,132,0,4,240,2,2,0,3,80,112,3,132,0,4,64,226,0,0,5,3,200,7,0,5,132,0,4,225,2,3,0,5,200,8,0,5,0,6,0,128,64,139,5,17,3,17,201,8,134,0,4,240,0,5,0,5,200,8,0,1,0,6,0,192,0,171,1,17,4,5,68,128,5,133,0,5,226,0,0,1,65,3,132,0,1,132,0,5,240,1,5,128,200,1,8,132,0,5,27,0,161,0,15,4,0,56,128,1,133,0,1,226,131,0,4,20,132,2,1,5,0,16,0,177,193,6,5,1,8,200,7,0,1,2,132,0,6,226,5,5,0,200,8,2,0,1,132,0,6,225,5,1,0,200,7,7,0,1,0,6,0,0,161,5,1,16,0,200,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,3,2,128,2,132,0,7,226,4,4,0,200,15,128,1,62,132,0,7,226,9,9,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,6,6,0,5,200,15,128,1,0,6,108,108,0,34,8,8,5,0,200,15,128,4,132,0,6,226,2,2,0,200,15,2,128,5,132,0,6,226,8,8,0,200,15,2,128,6,132,0,6,226,7,7,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx30 = new byte[] {4,16,42,17,1,131,0,5,200,0,0,5,128,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,0,8,0,16,147,0,9,64,0,0,5,64,0,113,0,11,138,0,2,121,8,131,0,1,1,131,0,1,5,131,0,50,8,0,0,2,144,0,16,0,11,0,0,48,12,0,0,112,13,0,0,96,14,0,32,80,15,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,41,6,246,86,0,7,247,87,0,0,16,103,0,0,16,105,0,0,16,101,0,0,16,104,0,0,16,106,0,0,16,107,0,0,16,108,0,0,16,109,63,128,190,0,0,1,241,1,85,1,80,1,11,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,16,2,96,22,3,18,0,18,133,0,1,96,2,28,96,3,34,18,0,1,18,133,0,2,96,40,3,96,46,18,2,0,18,133,0,2,96,52,3,96,58,18,2,0,18,133,0,2,96,64,3,96,70,18,2,0,18,133,0,2,96,76,3,96,82,18,2,0,18,133,0,2,96,88,3,96,94,18,2,0,18,133,0,2,32,100,3,0,0,18,2,0,194,133,0,2,96,102,3,32,108,18,2,0,18,133,0,2,16,110,3,0,0,34,133,0,1,5,2,248,32,3,0,0,36,2,6,136,132,0,3,3,248,48,4,0,0,36,6,1,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,64,0,4,0,36,6,136,132,0,4,3,232,96,0,4,0,36,6,136,132,0,4,200,1,0,7,132,0,3,175,2,4,4,0,200,2,0,1,7,132,0,4,175,2,5,0,4,200,4,0,7,132,0,4,175,2,6,0,4,200,8,0,7,132,0,4,175,2,7,0,2,200,1,134,0,2,176,1,3,0,0,200,1,2,134,0,1,176,2,1,1,3,0,200,4,134,0,0,1,176,2,1,2,3,0,200,8,2,0,1,132,0,1,240,131,0,3,200,1,0,1,1,132,0,3,176,4,0,4,0,200,2,0,1,1,132,0,4,176,4,1,0,4,200,4,0,1,132,0,4,176,4,2,0,4,80,136,0,1,132,0,4,240,1,1,129,5,80,135,1,8,0,6,0,27,0,225,0,0,7,129,20,135,8,9,0,0,8,27,177,193,1,1,8,20,136,2,9,10,131,0,7,177,143,2,3,8,200,1,134,0,6,176,3,0,0,200,2,134,0,3,176,3,1,3,0,200,4,134,0,1,176,2,3,2,3,0,200,1,2,0,1,132,0,3,175,2,0,4,0,200,2,0,1,1,132,0,4,175,2,1,0,4,200,4,0,1,132,0,4,175,2,2,0,4,200,1,0,2,132,0,1,240,131,0,4,80,119,2,3,5,4,0,0,64,160,6,1,12,2,200,7,0,1,11,132,0,6,225,0,2,0,200,7,7,0,0,2,0,27,0,139,5,1,14,14,200,8,134,0,1,240,131,0,4,80,129,11,2,132,0,4,240,3,3,128,3,80,112,2,132,0,4,64,226,0,0,5,2,68,135,3,2,132,0,4,225,3,2,11,5,200,7,0,4,0,6,0,27,0,235,0,11,5,2,200,1,0,5,132,0,6,240,4,4,0,80,112,1,5,132,0,6,64,226,0,0,5,200,3,7,0,3,132,0,6,225,4,5,0,200,8,7,0,3,0,0,128,64,139,7,3,17,17,201,4,0,3,132,0,7,240,11,3,0,200,8,0,8,3,0,0,192,0,171,0,17,4,3,64,128,4,132,0,8,192,226,0,0,131,68,136,3,9,4,0,0,27,0,161,4,15,3,10,56,136,0,4,0,21,21,0,226,3,4,3,4,200,7,131,0,11,27,0,0,225,11,0,0,200,8,0,11,132,0,6,225,3,0,0,201,8,134,0,7,240,0,11,0,200,7,0,8,4,2,0,27,0,139,1,18,3,18,200,4,131,0,9,16,16,0,225,0,4,0,200,8,134,0,6,240,4,4,0,200,7,131,0,6,6,0,0,161,0,16,4,0,80,128,4,133,0,5,226,0,0,128,200,1,7,131,0,6,27,0,0,171,11,15,7,0,200,7,0,3,0,0,8,27,0,235,4,4,2,200,7,9,0,4,0,0,27,0,225,4,4,5,0,68,129,4,5,132,0,7,240,3,3,4,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,3,132,0,8,225,3,5,0,200,8,0,4,9,0,0,128,64,139,4,21,21,201,3,8,0,11,132,0,9,240,11,3,0,200,8,0,4,0,10,0,192,0,171,0,21,4,64,128,3,133,0,8,226,0,0,139,68,136,11,3,9,0,0,27,0,161,3,19,4,56,1,128,134,0,7,226,0,0,3,200,8,0,1,4,132,0,6,225,0,11,0,201,8,134,0,4,240,11,4,0,2,200,8,134,0,2,225,11,3,0,0,200,4,7,0,4,2,5,0,27,0,139,1,6,22,22,200,7,0,3,7,0,27,0,0,161,0,20,3,0,200,8,134,0,5,240,4,4,0,200,6,7,0,3,0,27,0,7,0,171,4,19,3,80,135,1,4,133,0,6,224,0,3,128,200,7,7,0,2,0,0,27,0,235,8,4,4,2,200,7,0,4,0,9,0,27,0,225,4,4,0,68,129,2,4,3,132,0,7,240,2,2,4,80,112,3,132,0,8,64,226,0,0,3,200,7,0,1,2,132,0,8,225,2,3,0,200,8,0,4,9,0,0,128,64,139,4,25,25,201,3,8,0,1,132,0,6,240,11,2,0,200,8,132,0,8,192,0,171,0,25,4,68,135,2,11,10,132,0,8,226,1,1,0,65,136,1,2,132,0,7,240,4,11,129,200,8,0,8,1,0,0,27,0,161,1,23,5,0,56,136,0,1,132,0,6,225,11,2,1,200,8,134,0,5,225,11,0,0,200,6,7,0,1,0,27,0,7,0,161,1,24,0,200,7,8,0,1,0,27,0,0,171,0,4,23,1,200,7,134,0,6,224,0,1,0,20,128,1,11,132,0,6,177,194,0,0,8,20,1,135,133,0,5,27,128,0,13,13,4,200,3,128,2,132,0,5,226,6,6,0,200,3,15,128,62,132,0,5,226,7,7,0,200,2,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,3,226,10,10,4,0,200,15,128,5,1,0,108,108,0,6,34,8,8,0,200,15,2,128,4,132,0,6,226,11,11,0,200,15,2,128,5,132,0,6,226,8,8,0,200,15,2,128,6,132,0,6,226,9,9,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx31 = new byte[] {};
		
		public static byte[] _bx32 = new byte[] {4,16,42,17,1,131,0,5,188,0,0,3,152,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,3,24,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,56,6,0,0,2,144,0,16,0,7,0,0,48,8,0,0,16,9,0,48,32,10,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,59,0,0,16,62,0,0,16,19,15,0,0,16,60,0,0,16,61,0,0,16,63,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,240,1,85,1,64,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,96,1,47,1,80,1,53,1,18,1,0,1,18,135,0,0,1,96,1,58,1,194,1,0,1,18,133,0,0,1,16,1,64,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,1,1,248,1,128,1,0,1,0,1,36,1,6,1,136,132,0,0,1,5,1,232,131,0,0,1,36,2,6,136,132,0,1,200,1,15,132,0,1,108,2,0,161,3,0,8,0,2,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,8,38,0,200,15,0,8,1,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,8,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,8,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,8,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,8,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,1,0,3,132,0,8,175,2,0,0,200,2,0,3,132,0,7,175,2,1,0,200,4,0,1,3,132,0,7,175,2,2,0,200,8,0,1,3,132,0,7,175,2,3,0,200,1,0,1,2,132,0,7,175,3,4,0,200,2,0,1,2,132,0,7,175,3,5,0,200,4,0,1,2,132,0,6,175,3,6,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,8,2,0,2,132,0,3,175,3,7,3,0,200,8,134,0,1,240,131,0,1,80,2,128,1,133,0,0,1,226,2,0,0,3,128,20,135,132,0,2,27,198,3,193,0,1,4,8,200,15,128,1,62,132,0,4,226,2,2,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,3,3,4,0,200,15,128,5,1,0,177,177,0,6,34,8,8,0,200,15,2,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx33 = new byte[] {4,16,42,17,1,131,0,5,188,0,0,4,196,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,68,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,56,6,0,0,2,144,0,16,0,9,0,0,48,10,0,0,16,11,0,48,32,12,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,84,0,0,16,87,0,0,16,19,17,0,0,16,85,0,0,16,86,0,0,16,88,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,240,1,85,1,64,1,9,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,96,1,61,1,96,1,67,1,18,1,0,1,18,133,0,0,1,96,1,73,1,64,1,79,1,18,1,0,1,18,135,0,0,1,96,1,83,1,194,1,0,1,18,133,0,0,1,16,1,89,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,1,1,2,248,128,3,0,0,36,2,6,136,132,0,2,5,232,131,0,3,36,6,136,132,0,2,200,15,132,0,1,108,2,0,161,3,0,8,0,2,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,8,38,0,200,15,0,8,1,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,8,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,8,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,8,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,8,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,8,0,4,132,0,8,175,2,3,0,200,1,0,4,132,0,7,175,2,0,0,200,2,0,1,4,132,0,7,175,2,1,0,200,4,0,1,4,132,0,7,175,2,2,0,200,1,0,1,5,132,0,7,175,4,4,0,200,2,0,1,5,132,0,7,175,4,5,0,200,4,0,1,5,132,0,7,175,4,6,0,200,8,0,1,5,132,0,6,175,4,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,4,12,1,4,200,7,0,3,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,4,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,3,1,0,0,27,7,192,225,0,2,129,68,135,8,2,6,0,64,64,0,226,3,9,3,2,200,7,0,2,0,27,0,10,0,235,3,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,6,132,0,6,240,3,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,3,1,131,0,5,198,193,2,0,8,4,200,7,0,3,132,0,5,226,6,6,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,6,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,6,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,5,5,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,3,3,0,4,200,15,128,4,132,0,4,226,4,4,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx34 = new byte[] {4,16,42,17,1,131,0,5,188,0,0,6,152,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,6,24,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,56,6,0,0,2,144,0,16,0,12,0,0,48,13,0,0,16,14,0,48,32,15,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,123,0,0,16,126,0,0,16,19,20,0,0,16,124,0,0,16,125,0,0,16,127,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,240,1,85,1,64,1,12,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,16,1,96,1,22,1,18,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,96,1,82,1,18,1,0,1,18,133,0,0,1,96,1,88,1,96,1,94,1,18,1,0,1,18,133,0,0,1,96,1,100,1,96,1,106,1,18,1,0,1,18,133,0,0,1,96,1,112,1,64,1,118,1,18,1,0,1,18,135,0,0,1,96,1,122,1,194,1,0,1,18,133,0,0,1,16,1,128,2,0,0,1,34,133,0,1,5,2,248,96,3,0,0,36,2,6,136,132,0,3,3,248,112,4,0,0,36,6,1,136,132,0,4,1,248,128,0,4,0,36,6,136,132,0,2,5,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,8,38,0,200,15,0,8,1,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,8,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,8,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,8,40,0,200,15,0,0,160,10,27,0,0,171,8,39,3,92,2,0,1,2,131,0,9,64,239,0,6,4,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,108,7,0,0,171,8,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,8,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,8,6,40,0,20,132,2,2,131,0,9,177,207,0,6,8,200,8,0,6,132,0,8,175,2,3,0,200,1,0,6,132,0,7,175,2,0,0,200,2,0,1,6,132,0,7,175,2,1,0,200,4,0,1,6,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,7,0,200,1,0,1,7,132,0,7,175,6,4,0,200,2,0,1,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,8,0,1,7,132,0,6,175,6,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,6,14,6,14,200,7,0,2,4,131,0,6,160,6,12,0,200,8,2,0,8,132,0,6,240,1,1,0,200,7,2,0,8,132,0,6,226,6,6,0,80,129,2,1,3,132,0,6,240,2,2,136,80,113,2,3,4,131,0,7,64,240,0,0,3,80,119,2,3,2,131,0,8,64,225,2,3,4,20,135,0,1,9,131,0,9,27,225,0,3,1,200,7,0,3,10,0,0,27,0,235,1,1,2,200,7,132,0,9,27,0,225,1,1,0,68,129,0,1,1,132,0,7,240,3,3,0,80,112,1,132,0,8,64,226,0,0,1,200,7,0,1,1,132,0,6,225,3,1,0,200,8,132,0,7,128,64,139,0,17,17,201,3,8,0,9,132,0,6,240,9,1,0,200,8,132,0,6,192,0,171,8,17,0,3,64,128,1,133,0,5,226,0,0,137,68,6,136,9,1,0,0,27,7,0,161,1,15,0,57,136,1,8,133,0,6,240,0,9,1,200,8,2,0,8,132,0,6,225,8,9,0,200,8,134,0,3,225,9,0,4,0,200,7,0,5,1,2,0,27,0,6,139,8,18,18,200,7,131,0,6,27,0,0,161,0,16,3,0,200,8,134,0,4,240,1,1,0,5,200,7,0,3,0,6,27,0,0,171,8,15,4,0,80,128,8,133,0,5,226,0,0,128,200,6,7,0,0,2,0,27,7,0,139,8,22,22,68,64,1,8,133,0,6,226,0,0,8,200,4,7,0,8,0,0,48,32,139,8,8,21,21,200,7,0,4,0,9,0,27,0,235,1,8,2,200,8,132,0,8,192,192,171,0,21,8,68,129,2,0,5,132,0,7,240,4,4,0,80,112,5,132,0,7,64,226,0,0,5,200,7,2,0,8,132,0,7,225,4,5,0,201,8,0,1,9,132,0,7,240,9,8,0,64,135,4,8,1,0,0,27,0,225,1,8,9,137,200,8,0,4,0,0,27,0,7,161,4,19,0,56,128,1,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,1,0,201,8,0,1,1,132,0,7,240,1,9,0,200,4,0,8,1,0,16,16,0,225,0,1,5,0,200,8,0,1,132,0,1,240,131,0,8,200,7,0,1,0,6,0,0,6,161,1,20,0,80,128,134,0,6,226,0,0,129,200,7,7,0,1,0,27,0,0,171,8,9,19,1,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,25,5,25,201,8,0,3,132,0,5,240,9,2,0,200,6,8,0,1,0,0,192,7,0,171,1,25,0,68,128,1,9,133,0,6,226,0,0,1,65,136,1,2,133,0,5,240,0,9,131,200,6,8,0,2,0,0,27,7,0,161,2,23,0,56,136,1,1,133,0,6,225,9,0,2,200,8,2,0,1,132,0,6,225,9,1,0,200,7,131,0,6,27,0,0,161,0,24,5,0,200,7,0,1,132,0,6,224,3,1,0,200,7,131,0,6,27,0,0,171,1,23,4,0,20,128,9,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,9,9,4,0,200,15,128,1,4,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx35 = new byte[] {4,16,42,17,1,131,0,5,188,0,0,9,68,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,8,196,0,81,0,10,138,0,2,88,198,131,0,1,1,131,0,1,4,131,0,56,6,0,0,2,144,0,16,0,16,0,0,48,17,0,0,16,18,0,48,32,19,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,180,0,0,16,183,0,0,16,19,24,0,0,16,181,0,0,16,182,0,0,16,184,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,240,1,85,1,64,1,16,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,96,1,32,1,96,1,38,1,18,1,0,1,18,133,0,0,1,96,1,44,1,96,1,50,1,18,1,0,1,18,133,0,0,1,96,1,56,1,96,1,62,1,18,1,0,1,18,133,0,0,1,96,1,68,1,96,1,74,1,18,1,0,1,18,133,0,0,1,96,1,80,1,96,1,86,1,18,1,0,1,18,133,0,0,1,96,1,92,1,96,1,98,1,18,1,0,1,18,133,0,0,1,96,1,104,1,96,1,110,1,18,1,0,1,18,133,0,0,1,96,1,116,1,96,1,122,1,18,1,0,1,18,133,0,0,1,96,1,128,1,96,2,134,18,2,0,18,133,0,1,96,2,140,96,3,146,18,0,1,18,133,0,2,96,152,3,96,158,18,2,0,18,133,0,2,96,164,3,96,170,18,2,0,18,133,0,2,48,176,3,0,0,18,2,0,194,133,0,2,96,179,3,16,185,18,2,0,34,131,0,4,5,248,96,0,4,0,36,6,136,132,0,4,3,248,112,0,4,0,36,6,136,132,0,4,1,248,128,0,4,0,36,6,136,132,0,2,5,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,8,38,0,200,15,0,8,1,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,8,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,8,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,8,40,0,200,15,0,0,160,10,27,0,0,171,8,39,3,92,2,0,1,2,131,0,9,64,239,0,6,4,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,108,7,0,0,171,8,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,8,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,8,6,40,0,20,132,2,2,131,0,9,177,207,0,6,8,200,8,0,6,132,0,8,175,2,3,0,200,1,0,6,132,0,7,175,2,0,0,200,2,0,1,6,132,0,7,175,2,1,0,200,4,0,1,6,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,7,0,200,1,0,1,7,132,0,7,175,6,4,0,200,2,0,1,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,8,0,1,7,132,0,6,175,6,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,6,14,5,14,200,8,0,8,132,0,5,240,1,1,0,200,3,7,0,8,132,0,5,226,6,6,0,80,4,135,1,2,4,131,0,6,160,8,12,136,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,9,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,9,132,0,6,240,9,0,0,200,8,7,0,4,0,0,192,0,171,5,8,17,4,64,128,134,0,5,226,0,0,137,68,2,136,9,131,0,6,27,0,161,0,15,4,3,57,136,8,133,0,5,240,4,9,0,200,3,8,0,1,132,0,5,225,8,9,0,200,6,7,0,1,2,0,27,7,0,139,8,18,18,200,8,2,0,8,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,9,0,136,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,9,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,9,0,0,128,64,9,139,9,21,21,200,8,0,8,0,10,0,192,0,171,8,21,9,68,135,9,11,3,0,0,27,0,225,1,0,8,201,8,2,0,8,132,0,11,240,3,9,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,8,132,0,11,225,9,8,0,200,7,0,3,0,27,0,9,0,161,8,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,8,132,0,8,240,9,1,0,200,7,0,1,9,2,0,27,0,139,8,22,22,64,3,136,4,8,132,0,9,240,1,1,136,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,9,132,0,7,225,9,0,136,200,7,0,8,3,0,27,0,0,171,9,19,4,3,68,135,9,133,0,7,224,0,3,0,200,8,0,8,9,0,0,128,64,139,9,25,9,25,200,8,0,8,0,0,192,0,10,171,8,25,9,68,135,2,3,0,0,10,27,0,225,1,0,8,201,8,0,8,132,0,10,240,9,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,8,132,0,10,225,2,8,0,200,7,0,3,0,27,11,0,0,161,8,24,0,200,7,0,4,2,11,0,27,0,139,8,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,8,1,132,0,8,225,1,5,128,201,8,0,9,132,0,8,240,9,1,0,64,135,1,5,9,0,0,27,0,225,4,8,137,68,10,136,9,1,0,0,27,0,161,1,23,4,8,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,9,9,0,0,128,64,139,9,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,9,200,7,134,0,7,224,1,0,0,68,135,0,8,10,0,64,64,0,226,8,8,9,0,200,7,0,1,0,0,27,0,8,235,4,8,2,201,8,0,10,132,0,8,240,9,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,10,131,0,8,64,225,0,10,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,9,132,0,7,240,9,1,0,64,135,3,8,1,0,27,0,0,161,10,28,9,137,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,10,133,0,8,226,0,0,3,200,8,0,10,132,0,7,225,0,10,0,200,7,0,8,3,2,0,27,0,139,10,30,9,30,200,7,0,1,0,27,0,0,6,171,10,27,1,200,8,134,0,7,240,3,3,0,80,135,10,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,10,34,4,34,68,64,10,133,0,7,226,0,0,10,200,4,0,8,10,0,0,48,32,139,10,33,9,33,200,7,0,4,0,0,27,0,6,235,3,10,2,200,8,132,0,9,192,192,171,0,33,10,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,10,132,0,8,225,4,5,0,201,8,0,9,132,0,7,240,9,10,0,64,135,4,8,3,0,0,27,0,225,3,10,9,137,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,9,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,9,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,9,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,9,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,9,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,9,0,2,200,8,2,0,3,132,0,6,225,9,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,4,0,20,128,9,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,3,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,9,9,4,0,200,15,128,1,4,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx36 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,3,164,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,3,36,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,7,0,0,48,8,0,0,80,9,0,0,16,10,0,48,32,11,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,60,0,0,16,16,63,0,0,16,16,0,0,16,61,0,0,16,62,0,0,16,131,64,4,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,7,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,80,1,54,1,18,1,0,1,18,135,0,0,1,96,1,59,1,194,1,0,1,18,133,0,0,1,16,1,65,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,1,1,248,1,16,1,0,1,0,1,36,1,6,1,136,132,0,0,1,5,1,232,1,128,2,0,0,3,36,6,136,132,0,2,3,232,131,0,2,36,6,1,136,132,0,2,200,15,132,0,1,108,2,0,161,3,0,8,0,2,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,8,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,8,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,8,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,1,0,3,132,0,8,175,2,0,0,200,2,0,3,132,0,7,175,2,1,0,200,4,0,1,3,132,0,7,175,2,2,0,200,8,0,1,3,132,0,7,175,2,3,0,200,1,0,1,2,132,0,7,175,3,4,0,200,2,0,1,2,132,0,7,175,3,5,0,200,4,0,1,2,132,0,6,175,3,6,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,8,2,0,2,132,0,3,175,3,7,3,0,200,8,134,0,1,240,131,0,1,80,2,128,1,133,0,0,1,226,2,0,0,3,128,20,135,132,0,2,27,198,3,193,0,1,4,8,200,15,128,1,62,132,0,4,226,2,2,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,3,3,4,0,200,15,128,5,1,0,177,177,0,6,34,8,8,0,200,15,2,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx37 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,4,208,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,80,0,81,0,8,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,9,0,0,48,10,0,0,80,11,0,0,16,12,0,48,32,13,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,85,0,0,16,23,88,0,0,16,18,0,0,16,86,0,0,16,87,0,0,16,89,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,9,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,96,1,62,1,96,1,68,1,18,1,0,1,18,133,0,0,1,96,1,74,1,64,1,80,1,18,1,0,1,18,135,0,0,1,96,1,84,1,194,1,0,1,18,133,0,0,1,16,1,90,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,1,1,2,248,16,3,0,0,36,2,6,136,132,0,3,5,232,128,4,0,0,36,6,1,136,132,0,2,3,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,8,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,8,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,8,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,8,0,4,132,0,8,175,2,3,0,200,1,0,4,132,0,7,175,2,0,0,200,2,0,1,4,132,0,7,175,2,1,0,200,4,0,1,4,132,0,7,175,2,2,0,200,1,0,1,5,132,0,7,175,4,4,0,200,2,0,1,5,132,0,7,175,4,5,0,200,4,0,1,5,132,0,7,175,4,6,0,200,8,0,1,5,132,0,6,175,4,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,4,12,1,4,200,7,0,3,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,4,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,3,1,0,0,27,7,192,225,0,2,129,68,135,8,2,6,0,64,64,0,226,3,9,3,2,200,7,0,2,0,27,0,10,0,235,3,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,6,132,0,6,240,3,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,3,1,131,0,5,198,193,2,0,8,4,200,7,0,3,132,0,5,226,6,6,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,6,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,6,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,5,5,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,3,3,0,4,200,15,128,4,132,0,4,226,4,4,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx38 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,6,164,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,6,36,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,12,0,0,48,13,0,0,80,14,0,0,16,15,0,48,32,16,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,124,0,0,16,23,127,0,0,16,21,0,0,16,125,0,0,16,126,0,0,16,128,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,12,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,17,1,96,1,23,1,18,1,0,1,18,133,0,0,1,96,1,29,1,96,1,35,1,18,1,0,1,18,133,0,0,1,96,1,41,1,96,1,47,1,18,1,0,1,18,133,0,0,1,96,1,53,1,96,1,59,1,18,1,0,1,18,133,0,0,1,96,1,65,1,96,1,71,1,18,1,0,1,18,133,0,0,1,96,1,77,1,96,1,83,1,18,1,0,1,18,133,0,0,1,96,1,89,1,96,1,95,1,18,1,0,1,18,133,0,0,1,96,1,101,1,96,1,107,1,18,1,0,1,18,133,0,0,1,96,1,113,1,64,1,119,1,18,1,0,1,18,135,0,0,1,96,1,123,1,194,1,0,1,18,133,0,0,1,16,1,129,2,0,0,1,34,133,0,1,5,2,248,96,3,0,0,36,2,6,136,132,0,3,3,248,112,4,0,0,36,6,1,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,128,0,4,0,36,6,136,132,0,2,3,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,8,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,8,40,0,200,15,0,0,160,10,27,0,0,171,8,39,3,92,2,0,1,2,131,0,9,64,239,0,6,4,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,108,7,0,0,171,8,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,8,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,8,6,40,0,20,132,2,2,131,0,9,177,207,0,6,8,200,8,0,6,132,0,8,175,2,3,0,200,1,0,6,132,0,7,175,2,0,0,200,2,0,1,6,132,0,7,175,2,1,0,200,4,0,1,6,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,7,0,200,1,0,1,7,132,0,7,175,6,4,0,200,2,0,1,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,8,0,1,7,132,0,6,175,6,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,6,14,6,14,200,7,0,2,4,131,0,6,160,6,12,0,200,8,2,0,8,132,0,6,240,1,1,0,200,7,2,0,8,132,0,6,226,6,6,0,80,129,2,1,3,132,0,6,240,2,2,136,80,113,2,3,4,131,0,7,64,240,0,0,3,80,119,2,3,2,131,0,8,64,225,2,3,4,20,135,0,1,9,131,0,9,27,225,0,3,1,200,7,0,3,10,0,0,27,0,235,1,1,2,200,7,132,0,9,27,0,225,1,1,0,68,129,0,1,1,132,0,7,240,3,3,0,80,112,1,132,0,8,64,226,0,0,1,200,7,0,1,1,132,0,6,225,3,1,0,200,8,132,0,7,128,64,139,0,17,17,201,3,8,0,9,132,0,6,240,9,1,0,200,8,132,0,6,192,0,171,8,17,0,3,64,128,1,133,0,5,226,0,0,137,68,6,136,9,1,0,0,27,7,0,161,1,15,0,57,136,1,8,133,0,6,240,0,9,1,200,8,2,0,8,132,0,6,225,8,9,0,200,8,134,0,3,225,9,0,4,0,200,7,0,5,1,2,0,27,0,6,139,8,18,18,200,7,131,0,6,27,0,0,161,0,16,3,0,200,8,134,0,4,240,1,1,0,5,200,7,0,3,0,6,27,0,0,171,8,15,4,0,80,128,8,133,0,5,226,0,0,128,200,6,7,0,0,2,0,27,7,0,139,8,22,22,68,64,1,8,133,0,6,226,0,0,8,200,4,7,0,8,0,0,48,32,139,8,8,21,21,200,7,0,4,0,9,0,27,0,235,1,8,2,200,8,132,0,8,192,192,171,0,21,8,68,129,2,0,5,132,0,7,240,4,4,0,80,112,5,132,0,7,64,226,0,0,5,200,7,2,0,8,132,0,7,225,4,5,0,201,8,0,1,9,132,0,7,240,9,8,0,64,135,4,8,1,0,0,27,0,225,1,8,9,137,200,8,0,4,0,0,27,0,7,161,4,19,0,56,128,1,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,1,0,201,8,0,1,1,132,0,7,240,1,9,0,200,4,0,8,1,0,16,16,0,225,0,1,5,0,200,8,0,1,132,0,1,240,131,0,8,200,7,0,1,0,6,0,0,6,161,1,20,0,80,128,134,0,6,226,0,0,129,200,7,7,0,1,0,27,0,0,171,8,9,19,1,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,25,5,25,201,8,0,3,132,0,5,240,9,2,0,200,6,8,0,1,0,0,192,7,0,171,1,25,0,68,128,1,9,133,0,6,226,0,0,1,65,136,1,2,133,0,5,240,0,9,131,200,6,8,0,2,0,0,27,7,0,161,2,23,0,56,136,1,1,133,0,6,225,9,0,2,200,8,2,0,1,132,0,6,225,9,1,0,200,7,131,0,6,27,0,0,161,0,24,5,0,200,7,0,1,132,0,6,224,3,1,0,200,7,131,0,6,27,0,0,171,1,23,4,0,20,128,9,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,1,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,9,9,4,0,200,15,128,1,4,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx39 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,9,80,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,8,208,0,81,0,10,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,16,0,0,48,17,0,0,80,18,0,0,16,19,0,48,32,20,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,181,0,0,16,23,184,0,0,16,25,0,0,16,182,0,0,16,183,0,0,16,185,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,16,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,96,1,57,1,96,1,63,1,18,1,0,1,18,133,0,0,1,96,1,69,1,96,1,75,1,18,1,0,1,18,133,0,0,1,96,1,81,1,96,1,87,1,18,1,0,1,18,133,0,0,1,96,1,93,1,96,1,99,1,18,1,0,1,18,133,0,0,1,96,1,105,1,96,1,111,1,18,1,0,1,18,133,0,0,1,96,1,117,1,96,1,123,1,18,1,0,1,18,133,0,0,1,96,1,129,1,96,2,135,18,2,0,18,133,0,1,96,2,141,96,3,147,18,0,1,18,133,0,2,96,153,3,96,159,18,2,0,18,133,0,2,96,165,3,96,171,18,2,0,18,133,0,2,48,177,3,0,0,18,2,0,194,133,0,2,96,180,3,16,186,18,2,0,34,131,0,4,5,248,96,0,4,0,36,6,136,132,0,4,3,248,112,0,4,0,36,6,136,132,0,4,1,248,16,0,4,0,36,6,136,132,0,4,5,232,128,0,4,0,36,6,136,132,0,2,3,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,8,39,0,200,10,15,0,3,160,108,0,0,171,8,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,8,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,8,40,0,200,15,0,0,160,10,27,0,0,171,8,39,3,92,2,0,1,2,131,0,9,64,239,0,6,4,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,108,7,0,0,171,8,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,8,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,8,6,40,0,20,132,2,2,131,0,9,177,207,0,6,8,200,8,0,6,132,0,8,175,2,3,0,200,1,0,6,132,0,7,175,2,0,0,200,2,0,1,6,132,0,7,175,2,1,0,200,4,0,1,6,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,7,0,200,1,0,1,7,132,0,7,175,6,4,0,200,2,0,1,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,8,0,1,7,132,0,6,175,6,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,6,14,5,14,200,8,0,8,132,0,5,240,1,1,0,200,3,7,0,8,132,0,5,226,6,6,0,80,4,135,1,2,4,131,0,6,160,8,12,136,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,9,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,9,132,0,6,240,9,0,0,200,8,7,0,4,0,0,192,0,171,5,8,17,4,64,128,134,0,5,226,0,0,137,68,2,136,9,131,0,6,27,0,161,0,15,4,3,57,136,8,133,0,5,240,4,9,0,200,3,8,0,1,132,0,5,225,8,9,0,200,6,7,0,1,2,0,27,7,0,139,8,18,18,200,8,2,0,8,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,9,0,136,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,9,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,9,0,0,128,64,9,139,9,21,21,200,8,0,8,0,10,0,192,0,171,8,21,9,68,135,9,11,3,0,0,27,0,225,1,0,8,201,8,2,0,8,132,0,11,240,3,9,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,8,132,0,11,225,9,8,0,200,7,0,3,0,27,0,9,0,161,8,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,8,132,0,8,240,9,1,0,200,7,0,1,9,2,0,27,0,139,8,22,22,64,3,136,4,8,132,0,9,240,1,1,136,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,9,132,0,7,225,9,0,136,200,7,0,8,3,0,27,0,0,171,9,19,4,3,68,135,9,133,0,7,224,0,3,0,200,8,0,8,9,0,0,128,64,139,9,25,9,25,200,8,0,8,0,0,192,0,10,171,8,25,9,68,135,2,3,0,0,10,27,0,225,1,0,8,201,8,0,8,132,0,10,240,9,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,8,132,0,10,225,2,8,0,200,7,0,3,0,27,11,0,0,161,8,24,0,200,7,0,4,2,11,0,27,0,139,8,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,8,1,132,0,8,225,1,5,128,201,8,0,9,132,0,8,240,9,1,0,64,135,1,5,9,0,0,27,0,225,4,8,137,68,10,136,9,1,0,0,27,0,161,1,23,4,8,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,9,9,0,0,128,64,139,9,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,9,200,7,134,0,7,224,1,0,0,68,135,0,8,10,0,64,64,0,226,8,8,9,0,200,7,0,1,0,0,27,0,8,235,4,8,2,201,8,0,10,132,0,8,240,9,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,10,131,0,8,64,225,0,10,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,9,132,0,7,240,9,1,0,64,135,3,8,1,0,27,0,0,161,10,28,9,137,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,10,133,0,8,226,0,0,3,200,8,0,10,132,0,7,225,0,10,0,200,7,0,8,3,2,0,27,0,139,10,30,9,30,200,7,0,1,0,27,0,0,6,171,10,27,1,200,8,134,0,7,240,3,3,0,80,135,10,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,10,34,4,34,68,64,10,133,0,7,226,0,0,10,200,4,0,8,10,0,0,48,32,139,10,33,9,33,200,7,0,4,0,0,27,0,6,235,3,10,2,200,8,132,0,9,192,192,171,0,33,10,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,10,132,0,8,225,4,5,0,201,8,0,9,132,0,7,240,9,10,0,64,135,4,8,3,0,0,27,0,225,3,10,9,137,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,9,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,9,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,9,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,9,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,9,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,9,0,2,200,8,2,0,3,132,0,6,225,9,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,4,0,20,128,9,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,3,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,9,9,4,0,200,15,128,1,4,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,8,8,5,0,200,15,128,5,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx40 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,3,164,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,3,36,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,7,0,0,48,8,0,0,160,9,0,0,16,10,0,48,32,11,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,60,0,0,16,16,63,0,0,16,16,0,0,16,61,0,0,16,62,0,0,16,131,64,4,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,7,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,80,1,54,1,18,1,0,1,18,135,0,0,1,96,1,59,1,194,1,0,1,18,133,0,0,1,16,1,65,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,1,1,248,1,128,1,0,1,0,1,36,1,6,1,136,132,0,0,1,5,1,232,1,144,2,0,0,3,36,6,136,132,0,2,3,232,131,0,2,36,6,1,136,132,0,2,200,15,132,0,1,108,2,0,161,3,0,8,0,2,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,9,38,0,200,15,0,8,1,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,9,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,9,40,0,200,15,0,0,160,198,0,9,0,171,9,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,9,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,9,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,9,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,9,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,1,0,3,132,0,8,175,2,0,0,200,2,0,3,132,0,7,175,2,1,0,200,4,0,1,3,132,0,7,175,2,2,0,200,8,0,1,3,132,0,7,175,2,3,0,200,1,0,1,2,132,0,7,175,3,4,0,200,2,0,1,2,132,0,7,175,3,5,0,200,4,0,1,2,132,0,6,175,3,6,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,8,2,0,2,132,0,3,175,3,7,3,0,200,8,134,0,1,240,131,0,1,80,2,128,1,133,0,0,1,226,2,0,0,3,128,20,135,132,0,2,27,198,3,193,0,1,4,8,200,15,128,1,62,132,0,4,226,2,2,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,3,3,4,0,200,15,128,1,1,132,0,4,226,8,8,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx41 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,4,208,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,80,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,9,0,0,48,10,0,0,160,11,0,0,16,12,0,48,32,13,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,85,0,0,16,23,88,0,0,16,18,0,0,16,86,0,0,16,87,0,0,16,89,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,9,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,96,1,62,1,96,1,68,1,18,1,0,1,18,133,0,0,1,96,1,74,1,64,1,80,1,18,1,0,1,18,135,0,0,1,96,1,84,1,194,1,0,1,18,133,0,0,1,16,1,90,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,1,1,2,248,128,3,0,0,36,2,6,136,132,0,3,5,232,144,4,0,0,36,6,1,136,132,0,2,3,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,9,38,0,200,15,0,8,1,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,9,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,9,40,0,200,15,0,0,160,198,0,9,0,171,9,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,9,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,9,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,9,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,9,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,8,0,4,132,0,8,175,2,3,0,200,1,0,4,132,0,7,175,2,0,0,200,2,0,1,4,132,0,7,175,2,1,0,200,4,0,1,4,132,0,7,175,2,2,0,200,1,0,1,5,132,0,7,175,4,4,0,200,2,0,1,5,132,0,7,175,4,5,0,200,4,0,1,5,132,0,7,175,4,6,0,200,8,0,1,5,132,0,6,175,4,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,4,12,1,4,200,7,0,3,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,4,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,3,1,0,0,27,7,192,225,0,2,129,68,135,8,2,6,0,64,64,0,226,3,9,3,2,200,7,0,2,0,27,0,10,0,235,3,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,6,132,0,6,240,3,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,3,1,131,0,5,198,193,2,0,8,4,200,7,0,3,132,0,5,226,6,6,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,6,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,6,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,5,5,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,3,3,0,4,200,15,128,4,132,0,4,226,4,4,0,4,200,15,128,1,132,0,4,226,8,8,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx42 = new byte[] {};
		
		public static byte[] _bx43 = new byte[] {4,16,42,17,1,131,0,5,192,0,0,9,80,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,8,208,0,81,0,11,138,0,2,88,198,131,0,1,1,131,0,1,5,131,0,56,6,0,0,2,144,0,16,0,16,0,0,48,17,0,0,160,18,0,0,16,19,0,48,32,20,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,181,0,0,16,23,184,0,0,16,25,0,0,16,182,0,0,16,183,0,0,16,185,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,241,1,85,1,80,1,16,1,0,1,0,1,18,1,1,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,96,1,57,1,96,1,63,1,18,1,0,1,18,133,0,0,1,96,1,69,1,96,1,75,1,18,1,0,1,18,133,0,0,1,96,1,81,1,96,1,87,1,18,1,0,1,18,133,0,0,1,96,1,93,1,96,1,99,1,18,1,0,1,18,133,0,0,1,96,1,105,1,96,1,111,1,18,1,0,1,18,133,0,0,1,96,1,117,1,96,1,123,1,18,1,0,1,18,133,0,0,1,96,1,129,1,96,2,135,18,2,0,18,133,0,1,96,2,141,96,3,147,18,0,1,18,133,0,2,96,153,3,96,159,18,2,0,18,133,0,2,96,165,3,96,171,18,2,0,18,133,0,2,48,177,3,0,0,18,2,0,194,133,0,2,96,180,3,16,186,18,2,0,34,131,0,4,5,248,112,0,4,0,36,6,136,132,0,4,3,248,128,0,4,0,36,6,136,132,0,4,1,248,96,0,4,0,36,6,136,132,0,4,5,232,144,0,4,0,36,6,136,132,0,2,3,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,3,128,2,0,4,6,6,0,34,5,8,8,0,92,31,6,0,1,160,177,0,64,7,161,9,38,0,200,15,0,8,1,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,7,200,15,0,1,160,198,0,7,0,171,9,38,1,92,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,1,132,0,8,240,1,8,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,9,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,9,40,0,200,15,0,0,160,10,27,0,0,171,9,39,3,92,2,0,1,2,131,0,9,64,239,0,7,4,200,2,0,1,132,0,10,240,0,8,0,200,15,0,0,160,108,7,0,0,171,9,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,9,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,9,6,40,0,20,132,2,2,131,0,9,177,207,0,7,8,200,8,0,7,132,0,8,175,2,3,0,200,1,0,7,132,0,7,175,2,0,0,200,2,0,1,7,132,0,7,175,2,1,0,200,4,0,1,7,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,8,0,200,1,0,1,8,132,0,7,175,7,4,0,200,2,0,1,8,132,0,7,175,7,5,0,200,4,0,1,8,132,0,7,175,7,6,0,200,8,0,1,8,132,0,6,175,7,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,7,14,5,14,200,8,0,9,132,0,5,240,1,1,0,200,3,7,0,9,132,0,5,226,7,7,0,80,4,135,1,2,4,131,0,6,160,9,12,137,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,10,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,10,132,0,6,240,10,0,0,200,8,7,0,4,0,0,192,0,171,5,9,17,4,64,128,134,0,5,226,0,0,138,68,2,136,10,131,0,6,27,0,161,0,15,4,3,57,136,9,133,0,5,240,4,10,0,200,3,8,0,1,132,0,5,225,9,10,0,200,6,7,0,1,2,0,27,7,0,139,9,18,18,200,8,2,0,9,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,10,0,137,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,10,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,10,0,0,128,64,9,139,10,21,21,200,8,0,9,0,10,0,192,0,171,9,21,10,68,135,10,11,3,0,0,27,0,225,1,0,9,201,8,2,0,9,132,0,11,240,3,10,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,9,132,0,11,225,10,9,0,200,7,0,3,0,27,0,9,0,161,9,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,9,132,0,8,240,10,1,0,200,7,0,1,9,2,0,27,0,139,9,22,22,64,3,136,4,9,132,0,9,240,1,1,137,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,10,132,0,7,225,10,0,137,200,7,0,8,3,0,27,0,0,171,10,19,4,3,68,135,10,133,0,7,224,0,3,0,200,8,0,8,10,0,0,128,64,139,10,25,9,25,200,8,0,9,0,0,192,0,10,171,9,25,10,68,135,2,3,0,0,10,27,0,225,1,0,9,201,8,0,9,132,0,10,240,10,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,9,132,0,10,225,2,9,0,200,7,0,3,0,27,11,0,0,161,9,24,0,200,7,0,4,2,11,0,27,0,139,9,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,9,1,132,0,8,225,1,5,128,201,8,0,10,132,0,8,240,10,1,0,64,135,1,5,9,0,0,27,0,225,4,9,138,68,10,136,10,1,0,0,27,0,161,1,23,4,9,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,10,9,0,0,128,64,139,10,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,10,200,7,134,0,7,224,1,0,0,68,135,0,8,11,0,64,64,0,226,9,9,9,0,200,7,0,1,0,0,27,0,8,235,4,9,2,201,8,0,11,132,0,8,240,10,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,11,131,0,8,64,225,0,11,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,10,132,0,7,240,10,1,0,64,135,3,8,1,0,27,0,0,161,11,28,9,138,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,11,133,0,8,226,0,0,3,200,8,0,11,132,0,7,225,0,11,0,200,7,0,8,3,2,0,27,0,139,11,30,9,30,200,7,0,1,0,27,0,0,6,171,11,27,1,200,8,134,0,7,240,3,3,0,80,135,11,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,11,34,4,34,68,64,11,133,0,7,226,0,0,11,200,4,0,8,11,0,0,48,32,139,11,33,9,33,200,7,0,4,0,0,27,0,6,235,3,11,2,200,8,132,0,9,192,192,171,0,33,11,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,11,132,0,8,225,4,5,0,201,8,0,10,132,0,7,240,10,11,0,64,135,4,8,3,0,0,27,0,225,3,11,9,138,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,10,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,10,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,10,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,10,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,10,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,10,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,10,0,2,200,8,2,0,3,132,0,6,225,10,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,4,0,20,128,10,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,3,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,10,10,4,0,200,15,128,1,4,132,0,4,226,7,7,0,4,200,15,128,1,132,0,4,226,6,6,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx44 = new byte[] {4,16,42,17,1,131,0,5,196,0,0,3,176,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,3,48,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,6,131,0,56,6,0,0,2,144,0,16,0,7,0,0,48,8,0,0,160,9,0,0,80,10,0,0,16,11,0,48,32,12,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,27,61,0,0,16,64,0,0,16,17,0,0,16,62,0,0,16,63,0,0,16,65,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,245,1,85,1,96,1,7,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,80,1,55,1,18,1,0,1,18,135,0,0,1,96,1,60,1,194,1,0,1,18,133,0,0,1,16,1,66,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,1,1,248,1,128,1,0,1,0,1,36,1,6,1,136,132,0,0,1,5,1,232,1,16,2,0,0,3,36,6,136,132,0,2,3,232,3,144,0,0,3,36,6,136,132,0,2,1,232,131,0,3,36,6,136,132,0,2,200,15,132,0,1,108,2,0,161,3,0,8,0,2,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,9,6,38,0,200,15,0,1,7,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,9,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,9,40,0,200,15,0,0,160,198,0,9,0,171,9,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,9,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,9,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,9,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,9,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,1,0,3,132,0,8,175,2,0,0,200,2,0,3,132,0,7,175,2,1,0,200,4,0,1,3,132,0,7,175,2,2,0,200,8,0,1,3,132,0,7,175,2,3,0,200,1,0,1,2,132,0,7,175,3,4,0,200,2,0,1,2,132,0,7,175,3,5,0,200,4,0,1,2,132,0,6,175,3,6,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,8,2,0,2,132,0,3,175,3,7,3,0,200,8,134,0,1,240,131,0,1,80,2,128,1,133,0,0,1,226,2,0,0,3,128,20,135,132,0,2,27,198,3,193,0,1,4,8,200,15,128,1,62,132,0,4,226,2,2,0,3,200,15,128,133,0,3,34,13,13,4,0,200,15,128,1,3,132,0,1,226,131,0,4,200,15,128,4,132,0,3,226,3,3,4,0,200,15,128,1,1,132,0,4,226,8,8,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx45 = new byte[] {4,16,42,17,1,131,0,5,196,0,0,4,220,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,92,0,81,0,9,138,0,2,88,198,131,0,1,1,131,0,1,6,131,0,56,6,0,0,2,144,0,16,0,9,0,0,48,10,0,0,160,11,0,0,80,12,0,0,16,13,0,48,32,14,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,27,86,0,0,16,89,0,0,16,19,0,0,16,87,0,0,16,88,0,0,16,90,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,245,1,85,1,96,1,9,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,96,1,75,1,64,1,81,1,18,1,0,1,18,135,0,0,1,96,1,85,1,194,1,0,1,18,133,0,0,1,16,1,91,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,1,1,2,248,128,3,0,0,36,2,6,136,132,0,3,5,232,16,4,0,0,36,6,1,136,132,0,4,3,232,144,0,4,0,36,6,136,132,0,2,1,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,9,6,38,0,200,15,0,1,7,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,9,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,6,0,200,1,0,1,1,132,0,8,240,1,7,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,5,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,9,92,79,4,5,160,177,0,194,161,10,9,40,0,200,15,0,0,160,198,0,9,0,171,9,39,3,200,15,0,3,132,0,8,226,4,4,0,92,15,3,3,131,0,2,64,226,131,4,10,200,15,0,5,160,108,0,0,171,9,6,40,5,200,15,0,3,132,0,7,226,4,4,0,92,128,3,132,0,9,3,226,0,0,4,200,15,0,0,10,160,27,0,0,171,9,39,0,92,2,2,0,2,131,0,9,194,239,0,6,3,200,2,0,1,132,0,10,240,0,7,0,200,15,0,0,160,198,7,0,0,171,9,40,5,92,134,0,8,3,226,0,0,3,200,15,0,9,0,160,27,0,0,171,9,40,0,4,20,132,2,2,131,0,9,177,207,0,6,8,200,4,0,1,132,0,8,240,0,7,0,200,8,0,4,132,0,8,175,2,3,0,200,1,0,4,132,0,7,175,2,0,0,200,2,0,1,4,132,0,7,175,2,1,0,200,4,0,1,4,132,0,7,175,2,2,0,200,1,0,1,5,132,0,7,175,4,4,0,200,2,0,1,5,132,0,7,175,4,5,0,200,4,0,1,5,132,0,7,175,4,6,0,200,8,0,1,5,132,0,6,175,4,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,4,12,1,4,200,7,0,3,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,4,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,3,1,0,0,27,7,192,225,0,2,129,68,135,8,2,6,0,64,64,0,226,3,9,3,2,200,7,0,2,0,27,0,10,0,235,3,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,6,132,0,6,240,3,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,3,1,131,0,5,198,193,2,0,8,4,200,7,0,3,132,0,5,226,6,6,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,6,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,6,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,5,5,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,3,3,0,4,200,15,128,4,132,0,4,226,4,4,0,4,200,15,128,1,132,0,4,226,8,8,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx46 = new byte[] {};
		
		public static byte[] _bx47 = new byte[] {4,16,42,17,1,131,0,5,196,0,0,9,92,139,0,1,36,131,0,1,84,136,0,1,32,134,0,1,1,139,0,5,28,0,8,0,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,8,220,0,81,0,11,138,0,2,88,198,131,0,1,1,131,0,1,6,131,0,56,6,0,0,2,144,0,16,0,16,0,0,48,17,0,0,160,18,0,0,80,19,0,0,16,20,0,48,32,21,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,85,0,0,16,27,182,0,0,16,185,0,0,16,26,0,0,16,183,0,0,16,184,0,0,16,186,64,64,0,0,63,128,229,0,0,133,0,0,1,63,143,0,0,1,245,1,85,1,96,1,16,1,0,1,0,1,18,1,3,1,196,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,96,1,40,1,18,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,96,1,76,1,18,1,0,1,18,133,0,0,1,96,1,82,1,96,1,88,1,18,1,0,1,18,133,0,0,1,96,1,94,1,96,1,100,1,18,1,0,1,18,133,0,0,1,96,1,106,1,96,1,112,1,18,1,0,1,18,133,0,0,1,96,1,118,1,96,1,124,1,18,1,0,1,18,133,0,0,1,96,1,130,1,96,2,136,18,2,0,18,133,0,1,96,2,142,96,3,148,18,0,1,18,133,0,2,96,154,3,96,160,18,2,0,18,133,0,2,96,166,3,96,172,18,2,0,18,133,0,2,48,178,3,0,0,18,2,0,194,133,0,2,96,181,3,16,187,18,2,0,34,131,0,4,5,248,112,0,4,0,36,6,136,132,0,4,3,248,128,0,4,0,36,6,136,132,0,4,1,248,96,0,4,0,36,6,136,132,0,4,5,232,16,0,4,0,36,6,136,132,0,4,3,232,144,0,4,0,36,6,136,132,0,2,1,232,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,8,3,0,200,15,132,0,3,108,0,160,4,0,255,0,200,1,15,134,0,1,234,131,0,2,92,32,133,0,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,1,3,1,0,92,4,31,0,1,160,5,177,0,64,161,9,6,38,0,200,15,0,1,7,160,108,0,0,171,9,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,9,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,9,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,1,132,0,8,240,1,8,0,92,31,0,3,9,160,177,0,64,161,9,39,0,200,10,15,0,3,160,108,0,0,171,9,39,3,3,92,64,133,0,2,194,226,131,0,9,200,15,0,3,160,198,0,0,171,7,9,39,3,200,15,0,4,132,0,1,226,131,0,4,92,15,4,4,131,0,2,129,226,131,0,4,200,15,0,4,132,0,1,226,131,0,8,92,143,4,5,160,177,0,3,9,161,9,40,0,200,15,0,0,160,10,27,0,0,171,9,39,3,92,2,0,1,2,131,0,9,64,239,0,7,4,200,2,0,1,132,0,10,240,0,8,0,200,15,0,0,160,108,7,0,0,171,9,40,5,92,134,0,8,194,226,0,0,4,200,15,0,9,0,160,198,0,0,171,9,40,0,1,92,134,0,7,3,226,0,0,4,200,15,8,0,0,160,27,0,0,171,9,6,40,0,20,132,2,2,131,0,9,177,207,0,7,8,200,8,0,7,132,0,8,175,2,3,0,200,1,0,7,132,0,7,175,2,0,0,200,2,0,1,7,132,0,7,175,2,1,0,200,4,0,1,7,132,0,7,175,2,2,0,200,4,0,1,1,132,0,7,240,0,8,0,200,1,0,1,8,132,0,7,175,7,4,0,200,2,0,1,8,132,0,7,175,7,5,0,200,4,0,1,8,132,0,7,175,7,6,0,200,8,0,1,8,132,0,6,175,7,7,0,200,1,134,0,4,176,1,0,0,2,200,2,134,0,2,176,1,3,1,0,200,1,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,7,14,5,14,200,8,0,9,132,0,5,240,1,1,0,200,3,7,0,9,132,0,5,226,7,7,0,80,4,135,1,2,4,131,0,6,160,9,12,137,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,10,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,10,132,0,6,240,10,0,0,200,8,7,0,4,0,0,192,0,171,5,9,17,4,64,128,134,0,5,226,0,0,138,68,2,136,10,131,0,6,27,0,161,0,15,4,3,57,136,9,133,0,5,240,4,10,0,200,3,8,0,1,132,0,5,225,9,10,0,200,6,7,0,1,2,0,27,7,0,139,9,18,18,200,8,2,0,9,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,10,0,137,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,10,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,10,0,0,128,64,9,139,10,21,21,200,8,0,9,0,10,0,192,0,171,9,21,10,68,135,10,11,3,0,0,27,0,225,1,0,9,201,8,2,0,9,132,0,11,240,3,10,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,9,132,0,11,225,10,9,0,200,7,0,3,0,27,0,9,0,161,9,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,9,132,0,8,240,10,1,0,200,7,0,1,9,2,0,27,0,139,9,22,22,64,3,136,4,9,132,0,9,240,1,1,137,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,10,132,0,7,225,10,0,137,200,7,0,8,3,0,27,0,0,171,10,19,4,3,68,135,10,133,0,7,224,0,3,0,200,8,0,8,10,0,0,128,64,139,10,25,9,25,200,8,0,9,0,0,192,0,10,171,9,25,10,68,135,2,3,0,0,10,27,0,225,1,0,9,201,8,0,9,132,0,10,240,10,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,9,132,0,10,225,2,9,0,200,7,0,3,0,27,11,0,0,161,9,24,0,200,7,0,4,2,11,0,27,0,139,9,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,9,1,132,0,8,225,1,5,128,201,8,0,10,132,0,8,240,10,1,0,64,135,1,5,9,0,0,27,0,225,4,9,138,68,10,136,10,1,0,0,27,0,161,1,23,4,9,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,10,9,0,0,128,64,139,10,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,10,200,7,134,0,7,224,1,0,0,68,135,0,8,11,0,64,64,0,226,9,9,9,0,200,7,0,1,0,0,27,0,8,235,4,9,2,201,8,0,11,132,0,8,240,10,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,11,131,0,8,64,225,0,11,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,10,132,0,7,240,10,1,0,64,135,3,8,1,0,27,0,0,161,11,28,9,138,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,11,133,0,8,226,0,0,3,200,8,0,11,132,0,7,225,0,11,0,200,7,0,8,3,2,0,27,0,139,11,30,9,30,200,7,0,1,0,27,0,0,6,171,11,27,1,200,8,134,0,7,240,3,3,0,80,135,11,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,11,34,4,34,68,64,11,133,0,7,226,0,0,11,200,4,0,8,11,0,0,48,32,139,11,33,9,33,200,7,0,4,0,0,27,0,6,235,3,11,2,200,8,132,0,9,192,192,171,0,33,11,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,11,132,0,8,225,4,5,0,201,8,0,10,132,0,7,240,10,11,0,64,135,4,8,3,0,0,27,0,225,3,11,9,138,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,10,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,10,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,10,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,10,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,10,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,10,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,10,0,2,200,8,2,0,3,132,0,6,225,10,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,4,0,20,128,10,132,0,6,198,194,0,0,8,200,1,7,134,0,4,224,3,0,0,2,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,10,10,4,0,200,15,128,1,4,132,0,4,226,7,7,0,4,200,15,128,1,132,0,4,226,6,6,0,4,200,15,128,5,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx48 = new byte[] {4,16,42,17,1,131,0,5,220,0,0,4,184,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,56,0,113,0,12,138,0,2,121,8,131,0,1,1,131,0,1,8,131,0,56,8,0,0,2,144,0,16,0,9,0,0,48,10,0,0,112,11,0,0,96,12,0,0,160,13,0,32,80,14,0,16,16,15,0,48,32,16,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,45,84,0,5,245,85,0,6,246,86,0,7,247,87,0,0,16,81,0,0,16,83,0,0,16,23,0,0,16,82,0,0,16,84,0,0,16,85,0,0,16,86,0,0,16,87,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,9,1,32,1,15,1,18,1,3,1,18,1,0,1,48,1,7,132,0,0,1,96,1,17,1,196,1,0,1,18,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,96,1,47,1,96,1,53,1,18,1,0,1,18,133,0,0,1,96,1,59,1,96,1,65,1,18,1,0,1,18,133,0,0,1,96,1,71,1,48,1,77,1,18,1,0,1,18,135,0,0,1,96,1,80,1,194,1,0,1,18,133,0,0,1,32,1,86,1,16,1,88,1,18,1,0,1,34,131,0,0,1,5,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,2,248,128,3,0,0,36,2,6,136,132,0,3,1,248,144,4,0,0,36,6,1,136,132,0,4,5,232,160,0,4,0,36,6,136,132,0,4,3,232,176,0,4,0,36,6,136,132,0,4,1,232,32,0,4,0,36,6,136,132,0,4,5,216,192,0,4,0,36,6,136,132,0,2,3,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,12,6,38,0,200,15,0,1,7,160,108,0,0,171,12,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,12,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,12,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,8,0,92,31,0,4,9,160,177,0,64,161,12,39,0,200,10,15,0,4,160,108,0,0,171,12,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,12,40,0,200,15,0,0,160,198,0,9,0,171,12,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,12,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,12,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,8,0,200,15,0,5,160,198,10,0,0,171,12,40,6,92,1,0,4,131,0,9,3,240,1,9,4,200,1,0,1,132,0,10,240,1,10,0,200,15,0,5,160,27,10,0,0,171,12,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,3,132,0,7,240,5,8,0,200,4,0,1,7,132,0,7,175,6,6,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,7,132,0,7,175,6,7,0,200,8,0,1,5,132,0,7,240,2,2,0,80,130,5,1,4,132,0,7,240,0,9,133,20,135,3,8,3,0,0,27,198,193,2,5,5,3,200,2,0,1,132,0,8,240,0,10,0,200,4,0,4,132,0,7,240,5,9,0,200,4,0,1,1,132,0,6,240,5,10,0,200,1,134,0,4,176,4,0,0,2,200,2,134,0,2,176,4,3,1,0,200,1,4,134,0,1,176,2,4,2,3,0,200,8,2,0,2,132,0,1,240,131,0,3,200,1,0,1,2,132,0,3,176,1,0,4,0,200,2,0,1,2,132,0,4,176,1,1,0,4,200,4,0,2,132,0,4,176,1,2,0,4,80,136,0,2,132,0,4,240,2,2,130,3,80,135,2,131,0,5,27,0,225,0,0,6,130,20,135,0,1,0,7,0,27,198,193,2,2,3,3,20,128,1,132,0,7,198,194,0,0,3,200,15,2,128,62,132,0,7,226,7,7,0,200,15,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,5,226,6,6,0,200,3,15,128,1,132,0,5,226,11,11,0,200,3,15,128,4,132,0,5,226,3,3,0,200,3,15,128,5,132,0,1,226,131,0,4,200,15,128,6,132,0,4,226,1,1,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx49 = new byte[] {4,16,42,17,1,131,0,5,220,0,0,5,240,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,5,112,0,113,0,12,138,0,2,121,8,131,0,1,1,131,0,1,8,131,0,56,8,0,0,2,144,0,16,0,11,0,0,48,12,0,0,112,13,0,0,96,14,0,0,160,15,0,32,80,16,0,16,16,17,0,48,32,18,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,45,84,0,5,245,85,0,6,246,86,0,7,247,87,0,0,16,107,0,0,16,109,0,0,16,25,0,0,16,108,0,0,16,110,0,0,16,111,0,0,16,112,0,0,16,113,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,11,1,32,1,17,1,18,1,3,1,18,1,0,1,48,1,7,132,0,0,1,96,1,19,1,196,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,96,1,61,1,96,1,67,1,18,1,0,1,18,133,0,0,1,96,1,73,1,96,1,79,1,18,1,0,1,18,133,0,0,1,96,1,85,1,96,1,91,1,18,1,0,1,18,133,0,0,1,96,1,97,1,48,1,103,1,18,1,0,1,18,135,0,0,1,96,1,106,1,194,1,0,1,18,133,0,0,1,32,1,112,1,16,1,114,1,18,2,0,34,131,0,2,5,248,3,112,0,0,3,36,6,136,132,0,3,3,248,128,4,0,0,36,6,1,136,132,0,4,1,248,144,0,4,0,36,6,136,132,0,4,5,232,160,0,4,0,36,6,136,132,0,4,3,232,176,0,4,0,36,6,136,132,0,4,1,232,32,0,4,0,36,6,136,132,0,4,5,216,192,0,4,0,36,6,136,132,0,2,3,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,12,6,38,0,200,15,0,1,7,160,108,0,0,171,12,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,12,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,12,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,9,0,92,31,0,4,9,160,177,0,64,161,12,39,0,200,10,15,0,4,160,108,0,0,171,12,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,12,40,0,200,15,0,0,160,198,0,9,0,171,12,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,12,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,12,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,9,0,200,15,0,5,160,198,10,0,0,171,12,40,6,92,1,0,4,131,0,9,3,240,1,10,4,200,2,0,4,132,0,10,240,0,10,0,200,15,0,5,160,27,10,0,0,171,12,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,3,132,0,7,240,5,9,0,200,4,0,1,7,132,0,7,175,6,6,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,7,132,0,7,175,6,7,0,200,8,0,1,5,132,0,7,240,2,2,0,80,132,3,1,4,132,0,7,240,5,10,133,200,7,0,1,3,132,0,7,226,6,6,0,20,135,9,8,9,0,0,27,198,193,2,3,5,3,200,1,0,1,132,0,8,240,1,8,0,200,1,0,2,132,0,7,176,4,0,0,200,2,0,1,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,2,0,1,1,132,0,7,240,0,8,0,200,8,0,1,3,132,0,7,240,2,2,0,80,132,3,1,1,132,0,7,240,5,8,131,20,135,4,8,4,0,0,27,198,193,2,3,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,3,12,1,4,200,7,0,5,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,3,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,5,1,0,0,27,7,192,225,0,2,129,68,135,8,2,3,0,64,64,0,226,5,9,5,2,200,7,0,2,0,27,0,10,0,235,5,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,3,132,0,6,240,5,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,5,1,131,0,5,198,193,2,0,3,4,200,7,0,5,132,0,5,226,3,3,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,3,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,3,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,7,7,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,6,6,0,4,200,15,128,1,132,0,4,226,11,11,0,4,200,15,128,4,132,0,4,226,5,5,0,4,200,15,128,5,132,0,4,226,9,9,0,4,200,15,128,6,132,0,4,226,4,4,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx50 = new byte[] {4,16,42,17,1,131,0,5,220,0,0,7,208,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,7,80,0,113,0,12,138,0,2,121,8,131,0,1,1,131,0,1,8,131,0,56,8,0,0,2,144,0,16,0,14,0,0,48,15,0,0,112,16,0,0,96,17,0,0,160,18,0,32,80,19,0,16,16,20,0,48,32,21,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,45,84,0,5,245,85,0,6,246,86,0,7,247,87,0,0,16,147,0,0,16,149,0,0,16,28,0,0,16,148,0,0,16,150,0,0,16,151,0,0,16,152,0,0,16,153,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,14,1,32,1,20,1,18,1,3,1,18,1,0,1,48,1,7,132,0,0,1,96,1,22,1,196,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,96,1,82,1,18,1,0,1,18,133,0,0,1,96,1,88,1,96,1,94,1,18,1,0,1,18,133,0,0,1,96,1,100,1,96,1,106,1,18,1,0,1,18,133,0,0,1,96,1,112,1,96,1,118,1,18,1,0,1,18,133,0,0,1,96,2,124,96,3,130,18,0,1,18,133,0,2,96,136,3,64,142,18,2,0,18,135,0,0,1,96,2,146,194,2,0,18,133,0,1,32,2,152,16,3,154,18,0,1,34,131,0,4,5,248,112,0,4,0,36,6,136,132,0,4,3,248,144,0,4,0,36,6,136,132,0,4,1,248,160,0,4,0,36,6,136,132,0,4,5,232,192,0,4,0,36,6,136,132,0,4,3,232,176,0,4,0,36,6,136,132,0,4,1,232,32,0,4,0,36,6,136,132,0,4,5,216,128,0,4,0,36,6,136,132,0,2,3,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,10,0,92,31,0,4,9,160,177,0,64,161,8,39,0,200,10,15,0,4,160,108,0,0,171,8,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,8,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,10,0,200,15,0,5,160,198,10,0,0,171,8,40,6,92,1,0,4,131,0,9,3,240,1,12,4,200,2,0,4,132,0,10,240,0,12,0,200,15,0,5,160,27,10,0,0,171,8,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,7,132,0,8,175,2,0,0,200,2,0,7,132,0,8,175,2,1,0,20,132,7,7,131,0,9,177,143,2,2,3,200,1,0,8,132,0,8,175,7,4,0,200,2,0,8,132,0,7,175,7,5,0,200,4,0,1,8,132,0,7,175,7,6,0,200,4,0,1,3,132,0,7,240,5,10,0,200,8,0,1,8,132,0,7,175,7,7,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,10,132,0,7,240,2,2,0,200,7,0,1,10,132,0,7,226,7,7,0,80,132,10,1,4,132,0,7,240,5,12,138,20,135,12,8,12,0,0,27,198,193,2,10,5,3,200,1,0,2,132,0,8,176,4,0,0,200,2,0,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,1,0,1,1,132,0,7,240,1,9,0,200,8,0,1,10,132,0,7,240,2,2,0,80,130,10,1,1,132,0,7,240,0,9,138,200,4,0,1,1,132,0,7,240,5,9,0,20,135,6,8,6,0,0,27,198,193,2,10,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,10,14,6,14,200,7,0,2,4,131,0,6,160,10,12,0,200,8,2,0,10,132,0,6,240,1,1,0,80,129,2,1,3,132,0,6,240,2,2,138,80,113,2,3,4,131,0,7,64,240,0,0,3,80,119,2,3,2,131,0,8,64,225,2,3,4,20,135,0,1,9,131,0,9,27,225,0,3,1,200,7,0,3,10,0,0,27,0,235,1,1,2,200,7,132,0,9,27,0,225,1,1,0,68,129,0,1,1,132,0,7,240,3,3,0,80,112,1,132,0,8,64,226,0,0,1,200,7,0,1,1,132,0,6,225,3,1,0,200,8,132,0,7,128,64,139,0,17,17,201,3,8,0,9,132,0,6,240,9,1,0,200,8,132,0,6,192,0,171,10,17,0,3,64,128,1,133,0,5,226,0,0,137,68,6,136,9,1,0,0,27,7,0,161,1,15,0,57,136,1,10,133,0,6,240,0,9,1,200,8,2,0,10,132,0,6,225,10,9,0,200,8,134,0,3,225,9,0,4,0,200,7,0,5,1,2,0,27,0,6,139,10,18,18,200,7,131,0,6,27,0,0,161,0,16,3,0,200,8,134,0,4,240,1,1,0,5,200,7,0,3,0,6,27,0,0,171,10,15,4,0,80,128,10,133,0,5,226,0,0,128,200,6,7,0,0,2,0,27,7,0,139,10,22,22,68,64,1,10,133,0,6,226,0,0,10,200,4,7,0,10,0,0,48,32,139,8,10,21,21,200,7,0,4,0,9,0,27,0,235,1,10,2,200,8,132,0,8,192,192,171,0,21,10,68,129,2,0,5,132,0,7,240,4,4,0,80,112,5,132,0,7,64,226,0,0,5,200,7,2,0,10,132,0,7,225,4,5,0,201,8,0,1,9,132,0,7,240,9,10,0,64,135,4,8,1,0,0,27,0,225,1,10,9,137,200,8,0,4,0,0,27,0,7,161,4,19,0,56,128,1,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,1,0,201,8,0,1,1,132,0,7,240,1,9,0,200,4,0,8,1,0,16,16,0,225,0,1,5,0,200,8,0,1,132,0,1,240,131,0,8,200,7,0,1,0,6,0,0,6,161,1,20,0,80,128,134,0,6,226,0,0,129,200,7,7,0,1,0,27,0,0,171,8,9,19,1,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,25,5,25,201,8,0,3,132,0,5,240,9,2,0,200,6,8,0,1,0,0,192,7,0,171,1,25,0,68,128,1,9,133,0,6,226,0,0,1,65,136,1,2,133,0,5,240,0,9,131,200,6,8,0,2,0,0,27,7,0,161,2,23,0,56,136,1,1,133,0,6,225,9,0,2,200,8,2,0,1,132,0,6,225,9,1,0,200,7,131,0,6,27,0,0,161,0,24,5,0,200,7,0,1,132,0,6,224,3,1,0,200,7,131,0,6,27,0,0,171,1,23,3,0,200,7,134,0,4,224,1,0,0,3,20,128,9,132,0,4,198,194,0,0,3,3,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,7,7,4,0,200,15,128,1,1,132,0,4,226,11,11,0,4,200,15,128,4,132,0,4,226,9,9,0,4,200,15,128,5,132,0,4,226,12,12,0,4,200,15,128,6,132,0,4,226,6,6,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx51 = new byte[] {4,16,42,17,1,131,0,5,220,0,0,10,136,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,10,8,0,113,0,13,138,0,2,121,8,131,0,1,1,131,0,1,8,131,0,56,8,0,0,2,144,0,16,0,19,0,0,48,20,0,0,112,21,0,0,96,22,0,0,160,23,0,32,80,24,0,16,16,25,0,48,32,26,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,45,84,0,5,245,85,0,6,246,86,0,7,247,87,0,0,16,205,0,0,16,207,0,0,16,33,0,0,16,206,0,0,16,208,0,0,16,209,0,0,16,210,0,0,16,211,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,19,1,32,1,25,1,18,1,3,1,18,1,0,1,48,1,7,132,0,0,1,96,1,27,1,196,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,96,1,57,1,96,1,63,1,18,1,0,1,18,133,0,0,1,96,1,69,1,96,1,75,1,18,1,0,1,18,133,0,0,1,96,1,81,1,96,1,87,1,18,1,0,1,18,133,0,0,1,96,1,93,1,96,1,99,1,18,1,0,1,18,133,0,0,1,96,1,105,1,96,1,111,1,18,1,0,1,18,133,0,0,1,96,1,117,1,96,1,123,1,18,1,0,1,18,133,0,0,1,96,2,129,96,3,135,18,0,1,18,133,0,2,96,141,3,96,147,18,2,0,18,133,0,2,96,153,3,96,159,18,2,0,18,133,0,2,96,165,3,96,171,18,2,0,18,133,0,2,96,177,3,96,183,18,2,0,18,133,0,2,96,189,3,96,195,18,2,0,18,133,0,2,48,201,3,0,0,18,2,0,194,133,0,2,96,204,3,32,210,18,2,0,18,133,0,2,16,212,3,0,0,34,133,0,1,5,2,248,112,3,0,0,36,2,6,136,132,0,3,3,248,160,4,0,0,36,6,1,136,132,0,4,1,248,128,0,4,0,36,6,136,132,0,4,5,232,144,0,4,0,36,6,136,132,0,4,3,232,192,0,4,0,36,6,136,132,0,4,1,232,32,0,4,0,36,6,136,132,0,4,5,216,176,0,4,0,36,6,136,132,0,2,3,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,11,6,38,0,200,15,0,1,7,160,108,0,0,171,11,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,11,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,11,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,8,0,92,31,0,4,9,160,177,0,64,161,11,39,0,200,10,15,0,4,160,108,0,0,171,11,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,11,40,0,200,15,0,0,160,198,0,9,0,171,11,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,11,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,11,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,8,0,200,15,0,5,160,198,10,0,0,171,11,40,6,92,1,0,4,131,0,9,3,240,1,9,4,200,2,0,4,132,0,10,240,0,9,0,200,15,0,5,160,27,10,0,0,171,11,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,4,0,1,3,132,0,7,240,5,8,0,200,8,0,1,7,132,0,7,175,6,7,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,8,132,0,7,240,2,2,0,200,7,0,1,8,132,0,7,226,6,6,0,80,132,8,1,4,132,0,7,240,5,9,136,20,135,9,8,9,0,0,27,198,193,2,8,5,3,200,1,0,2,132,0,8,176,4,0,0,200,2,0,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,1,0,1,1,132,0,7,240,1,10,0,200,8,0,1,8,132,0,7,240,2,2,0,80,130,8,1,1,132,0,7,240,0,10,136,200,4,0,1,1,132,0,7,240,5,10,0,20,135,10,8,10,0,0,27,198,193,2,8,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,8,14,5,14,200,8,0,8,132,0,5,240,1,1,0,80,4,135,1,2,4,131,0,6,160,8,12,136,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,11,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,11,132,0,6,240,11,0,0,200,8,7,0,4,0,0,192,0,171,5,8,17,4,64,128,134,0,5,226,0,0,139,68,2,136,11,131,0,6,27,0,161,0,15,4,3,57,136,8,133,0,5,240,4,11,0,200,3,8,0,1,132,0,5,225,8,11,0,200,6,7,0,1,2,0,27,7,0,139,8,18,18,200,8,2,0,8,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,11,0,136,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,11,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,11,0,0,128,64,9,139,11,21,21,200,8,0,8,0,10,0,192,0,171,8,21,11,68,135,11,11,3,0,0,27,0,225,1,0,8,201,8,2,0,8,132,0,11,240,3,11,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,8,132,0,11,225,11,8,0,200,7,0,3,0,27,0,9,0,161,8,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,8,132,0,8,240,11,1,0,200,7,0,1,9,2,0,27,0,139,8,22,22,64,3,136,4,8,132,0,9,240,1,1,136,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,11,132,0,7,225,11,0,136,200,7,0,8,3,0,27,0,0,171,11,19,4,3,68,135,11,133,0,7,224,0,3,0,200,8,0,8,11,0,0,128,64,139,11,25,9,25,200,8,0,8,0,0,192,0,10,171,8,25,11,68,135,2,3,0,0,10,27,0,225,1,0,8,201,8,0,8,132,0,10,240,11,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,8,132,0,10,225,2,8,0,200,7,0,3,0,27,11,0,0,161,8,24,0,200,7,0,4,2,11,0,27,0,139,8,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,8,1,132,0,8,225,1,5,128,201,8,0,11,132,0,8,240,11,1,0,64,135,1,5,9,0,0,27,0,225,4,8,139,68,10,136,11,1,0,0,27,0,161,1,23,4,8,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,11,9,0,0,128,64,139,11,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,11,200,7,134,0,7,224,1,0,0,68,135,0,8,13,0,64,64,0,226,8,8,9,0,200,7,0,1,0,0,27,0,8,235,4,8,2,201,8,0,13,132,0,8,240,11,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,13,131,0,8,64,225,0,13,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,11,132,0,7,240,11,1,0,64,135,3,8,1,0,27,0,0,161,13,28,9,139,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,13,133,0,8,226,0,0,3,200,8,0,13,132,0,7,225,0,13,0,200,7,0,8,3,2,0,27,0,139,13,30,9,30,200,7,0,1,0,27,0,0,6,171,13,27,1,200,8,134,0,7,240,3,3,0,80,135,13,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,13,34,4,34,68,64,13,133,0,7,226,0,0,13,200,4,0,8,13,0,0,48,32,139,13,33,9,33,200,7,0,4,0,0,27,0,6,235,3,13,2,200,8,132,0,9,192,192,171,0,33,13,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,13,132,0,8,225,4,5,0,201,8,0,11,132,0,7,240,11,13,0,64,135,4,8,3,0,0,27,0,225,3,13,9,139,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,11,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,11,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,11,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,11,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,11,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,11,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,11,0,2,200,8,2,0,3,132,0,6,225,11,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,3,0,200,7,134,0,4,224,3,0,0,3,20,128,11,132,0,4,198,194,0,0,3,3,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,6,6,4,0,200,15,128,1,1,132,0,4,226,12,12,0,4,200,15,128,4,132,0,4,226,11,11,0,4,200,15,128,5,132,0,4,226,9,9,0,4,200,15,128,6,132,0,4,226,10,10,0,4,200,15,128,7,132,0,4,34,12,12,0,1,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx52 = new byte[] {4,16,42,17,1,131,0,5,216,0,0,4,172,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,4,44,0,113,0,11,138,0,2,121,8,131,0,1,1,131,0,1,7,131,0,56,8,0,0,2,144,0,16,0,9,0,0,48,10,0,0,112,11,0,0,96,12,0,0,80,13,0,32,16,14,0,0,32,15,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,41,85,0,6,246,86,0,7,247,87,0,0,16,80,0,0,16,82,0,0,16,22,0,0,16,81,0,0,16,83,0,0,16,84,0,0,16,85,0,0,16,86,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,9,1,16,1,15,1,18,1,3,1,18,1,0,1,16,1,3,132,0,0,1,96,1,16,1,196,1,0,1,18,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,96,1,40,1,18,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,48,1,76,1,18,1,0,1,18,135,0,0,1,96,1,79,1,194,1,0,1,18,133,0,0,1,32,1,85,1,16,1,87,1,18,1,0,1,34,131,0,0,1,5,1,248,1,112,1,0,1,0,1,36,1,6,1,136,132,0,0,1,3,2,248,128,3,0,0,36,2,6,136,132,0,3,1,248,144,4,0,0,36,6,1,136,132,0,4,5,232,160,0,4,0,36,6,136,132,0,4,3,232,32,0,4,0,36,6,136,132,0,4,1,232,176,0,4,0,36,6,136,132,0,2,5,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,11,6,38,0,200,15,0,1,7,160,108,0,0,171,11,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,11,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,11,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,8,0,92,31,0,4,9,160,177,0,64,161,11,39,0,200,10,15,0,4,160,108,0,0,171,11,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,11,40,0,200,15,0,0,160,198,0,9,0,171,11,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,11,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,11,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,8,0,200,15,0,5,160,198,10,0,0,171,11,40,6,92,1,0,4,131,0,9,3,240,1,9,4,200,1,0,1,132,0,10,240,1,10,0,200,15,0,5,160,27,10,0,0,171,11,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,3,132,0,7,240,5,8,0,200,4,0,1,7,132,0,7,175,6,6,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,7,132,0,7,175,6,7,0,200,8,0,1,5,132,0,7,240,2,2,0,80,130,5,1,4,132,0,7,240,0,9,133,20,135,3,8,3,0,0,27,198,193,2,5,5,3,200,2,0,1,132,0,8,240,0,10,0,200,4,0,4,132,0,7,240,5,9,0,200,4,0,1,1,132,0,6,240,5,10,0,200,1,134,0,4,176,4,0,0,2,200,2,134,0,2,176,4,3,1,0,200,1,4,134,0,1,176,2,4,2,3,0,200,8,2,0,2,132,0,1,240,131,0,3,200,1,0,1,2,132,0,3,176,1,0,4,0,200,2,0,1,2,132,0,4,176,1,1,0,4,200,4,0,2,132,0,4,176,1,2,0,4,80,136,0,2,132,0,4,240,2,2,130,3,80,135,2,131,0,5,27,0,225,0,0,6,130,20,135,0,1,0,7,0,27,198,193,2,2,3,3,20,128,1,132,0,7,198,194,0,0,3,200,15,2,128,62,132,0,7,226,7,7,0,200,15,128,133,0,5,34,13,13,0,200,3,15,128,3,132,0,5,226,6,6,0,200,6,15,128,1,0,177,177,7,0,34,3,3,0,200,15,2,128,4,132,0,7,226,3,3,0,200,15,128,1,5,132,0,1,226,131,0,4,200,15,128,6,132,0,6,226,1,1,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx53 = new byte[] {4,16,42,17,1,131,0,5,216,0,0,5,228,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,5,100,0,113,0,11,138,0,2,121,8,131,0,1,1,131,0,1,7,131,0,56,8,0,0,2,144,0,16,0,11,0,0,48,12,0,0,112,13,0,0,96,14,0,0,80,15,0,32,16,16,0,0,32,17,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,41,85,0,6,246,86,0,7,247,87,0,0,16,106,0,0,16,108,0,0,16,24,0,0,16,107,0,0,16,109,0,0,16,110,0,0,16,111,0,0,16,112,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,11,1,16,1,17,1,18,1,3,1,18,1,0,1,16,1,3,132,0,0,1,96,1,18,1,196,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,96,1,54,1,18,1,0,1,18,133,0,0,1,96,1,60,1,96,1,66,1,18,1,0,1,18,133,0,0,1,96,1,72,1,96,1,78,1,18,1,0,1,18,133,0,0,1,96,1,84,1,96,1,90,1,18,1,0,1,18,133,0,0,1,96,1,96,1,48,1,102,1,18,1,0,1,18,135,0,0,1,96,1,105,1,194,1,0,1,18,133,0,0,1,32,1,111,1,16,1,113,1,18,2,0,34,131,0,2,5,248,3,112,0,0,3,36,6,136,132,0,3,3,248,128,4,0,0,36,6,1,136,132,0,4,1,248,144,0,4,0,36,6,136,132,0,4,5,232,160,0,4,0,36,6,136,132,0,4,3,232,32,0,4,0,36,6,136,132,0,4,1,232,176,0,4,0,36,6,136,132,0,2,5,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,11,6,38,0,200,15,0,1,7,160,108,0,0,171,11,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,11,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,11,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,9,0,92,31,0,4,9,160,177,0,64,161,11,39,0,200,10,15,0,4,160,108,0,0,171,11,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,11,40,0,200,15,0,0,160,198,0,9,0,171,11,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,11,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,11,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,9,0,200,15,0,5,160,198,10,0,0,171,11,40,6,92,1,0,4,131,0,9,3,240,1,10,4,200,2,0,4,132,0,10,240,0,10,0,200,15,0,5,160,27,10,0,0,171,11,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,3,132,0,7,240,5,9,0,200,4,0,1,7,132,0,7,175,6,6,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,7,132,0,7,175,6,7,0,200,8,0,1,5,132,0,7,240,2,2,0,80,132,3,1,4,132,0,7,240,5,10,133,200,7,0,1,3,132,0,7,226,6,6,0,20,135,9,8,9,0,0,27,198,193,2,3,5,3,200,1,0,1,132,0,8,240,1,8,0,200,1,0,2,132,0,7,176,4,0,0,200,2,0,1,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,2,0,1,1,132,0,7,240,0,8,0,200,8,0,1,3,132,0,7,240,2,2,0,80,132,3,1,1,132,0,7,240,5,8,131,20,135,4,8,4,0,0,27,198,193,2,3,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,1,2,0,1,132,0,1,240,131,0,3,80,119,1,4,2,4,0,0,5,64,160,3,12,1,4,200,7,0,5,132,0,5,225,0,1,0,200,6,7,0,0,2,0,27,7,0,139,3,14,14,200,8,2,0,1,132,0,1,240,131,0,4,200,4,0,1,132,0,6,240,2,2,0,80,128,1,2,133,0,5,226,0,0,129,80,6,135,5,1,0,0,27,7,192,225,0,2,129,68,135,8,2,3,0,64,64,0,226,5,9,5,2,200,7,0,2,0,27,0,10,0,235,5,2,1,200,8,0,2,0,11,0,128,64,139,2,17,17,201,8,0,3,132,0,6,240,5,1,0,200,1,134,0,6,240,2,2,0,80,112,133,0,2,64,226,131,0,4,20,135,5,1,131,0,5,198,193,2,0,3,4,200,7,0,5,132,0,5,226,3,3,0,200,6,8,0,1,0,0,192,7,0,171,1,17,2,69,40,1,1,133,0,6,240,3,1,1,64,128,134,0,3,226,0,0,3,128,200,8,132,0,3,27,0,161,4,0,15,0,56,2,128,1,133,0,1,226,131,0,3,200,4,0,4,1,0,16,48,5,0,225,3,1,0,3,8,128,1,132,0,5,131,226,0,0,1,6,200,7,0,1,0,6,7,0,0,161,1,16,0,200,1,7,131,0,8,27,0,0,171,1,15,1,20,1,135,133,0,7,27,128,0,13,13,200,15,2,128,62,132,0,7,226,7,7,0,200,15,128,133,0,1,226,131,0,4,200,15,128,3,132,0,4,226,6,6,0,5,200,15,128,1,0,6,177,177,0,34,3,3,5,0,200,15,128,4,132,0,6,226,5,5,0,200,15,2,128,5,132,0,6,226,9,9,0,200,15,2,128,6,132,0,6,226,4,4,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx54 = new byte[] {4,16,42,17,1,131,0,5,216,0,0,7,196,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,7,68,0,113,0,11,138,0,2,121,8,131,0,1,1,131,0,1,7,131,0,56,8,0,0,2,144,0,16,0,14,0,0,48,15,0,0,112,16,0,0,96,17,0,0,80,18,0,32,16,19,0,0,32,20,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,41,85,0,6,246,86,0,7,247,87,0,0,16,146,0,0,16,148,0,0,16,27,0,0,16,147,0,0,16,149,0,0,16,150,0,0,16,151,0,0,16,152,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,14,1,16,1,20,1,18,1,3,1,18,1,0,1,16,1,3,132,0,0,1,96,1,21,1,196,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,96,1,75,1,96,1,81,1,18,1,0,1,18,133,0,0,1,96,1,87,1,96,1,93,1,18,1,0,1,18,133,0,0,1,96,1,99,1,96,1,105,1,18,1,0,1,18,133,0,0,1,96,1,111,1,96,1,117,1,18,1,0,1,18,133,0,0,1,96,2,123,96,3,129,18,0,1,18,133,0,2,96,135,3,64,141,18,2,0,18,135,0,0,1,96,2,145,194,2,0,18,133,0,1,32,2,151,16,3,153,18,0,1,34,131,0,4,5,248,112,0,4,0,36,6,136,132,0,4,3,248,144,0,4,0,36,6,136,132,0,4,1,248,160,0,4,0,36,6,136,132,0,4,5,232,176,0,4,0,36,6,136,132,0,4,3,232,32,0,4,0,36,6,136,132,0,4,1,232,128,0,4,0,36,6,136,132,0,2,5,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,8,6,38,0,200,15,0,1,7,160,108,0,0,171,8,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,8,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,8,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,10,0,92,31,0,4,9,160,177,0,64,161,8,39,0,200,10,15,0,4,160,108,0,0,171,8,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,8,40,0,200,15,0,0,160,198,0,9,0,171,8,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,8,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,8,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,10,0,200,15,0,5,160,198,10,0,0,171,8,40,6,92,1,0,4,131,0,9,3,240,1,11,4,200,2,0,4,132,0,10,240,0,11,0,200,15,0,5,160,27,10,0,0,171,8,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,7,132,0,8,175,2,0,0,200,2,0,7,132,0,8,175,2,1,0,20,132,7,7,131,0,9,177,143,2,2,3,200,1,0,8,132,0,8,175,7,4,0,200,2,0,8,132,0,7,175,7,5,0,200,4,0,1,8,132,0,7,175,7,6,0,200,4,0,1,3,132,0,7,240,5,10,0,200,8,0,1,8,132,0,7,175,7,7,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,10,132,0,7,240,2,2,0,200,7,0,1,10,132,0,7,226,7,7,0,80,132,10,1,4,132,0,7,240,5,11,138,20,135,11,8,11,0,0,27,198,193,2,10,5,3,200,1,0,2,132,0,8,176,4,0,0,200,2,0,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,1,0,1,1,132,0,7,240,1,9,0,200,8,0,1,10,132,0,7,240,2,2,0,80,130,10,1,1,132,0,7,240,0,9,138,200,4,0,1,1,132,0,7,240,5,9,0,20,135,6,8,6,0,0,27,198,193,2,10,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,10,14,6,14,200,7,0,2,4,131,0,6,160,10,12,0,200,8,2,0,10,132,0,6,240,1,1,0,80,129,2,1,3,132,0,6,240,2,2,138,80,113,2,3,4,131,0,7,64,240,0,0,3,80,119,2,3,2,131,0,8,64,225,2,3,4,20,135,0,1,9,131,0,9,27,225,0,3,1,200,7,0,3,10,0,0,27,0,235,1,1,2,200,7,132,0,9,27,0,225,1,1,0,68,129,0,1,1,132,0,7,240,3,3,0,80,112,1,132,0,8,64,226,0,0,1,200,7,0,1,1,132,0,6,225,3,1,0,200,8,132,0,7,128,64,139,0,17,17,201,3,8,0,9,132,0,6,240,9,1,0,200,8,132,0,6,192,0,171,10,17,0,3,64,128,1,133,0,5,226,0,0,137,68,6,136,9,1,0,0,27,7,0,161,1,15,0,57,136,1,10,133,0,6,240,0,9,1,200,8,2,0,10,132,0,6,225,10,9,0,200,8,134,0,3,225,9,0,4,0,200,7,0,5,1,2,0,27,0,6,139,10,18,18,200,7,131,0,6,27,0,0,161,0,16,3,0,200,8,134,0,4,240,1,1,0,5,200,7,0,3,0,6,27,0,0,171,10,15,4,0,80,128,10,133,0,5,226,0,0,128,200,6,7,0,0,2,0,27,7,0,139,10,22,22,68,64,1,10,133,0,6,226,0,0,10,200,4,7,0,10,0,0,48,32,139,8,10,21,21,200,7,0,4,0,9,0,27,0,235,1,10,2,200,8,132,0,8,192,192,171,0,21,10,68,129,2,0,5,132,0,7,240,4,4,0,80,112,5,132,0,7,64,226,0,0,5,200,7,2,0,10,132,0,7,225,4,5,0,201,8,0,1,9,132,0,7,240,9,10,0,64,135,4,8,1,0,0,27,0,225,1,10,9,137,200,8,0,4,0,0,27,0,7,161,4,19,0,56,128,1,133,0,8,226,0,0,4,200,8,0,9,132,0,7,225,0,1,0,201,8,0,1,1,132,0,7,240,1,9,0,200,4,0,8,1,0,16,16,0,225,0,1,5,0,200,8,0,1,132,0,1,240,131,0,8,200,7,0,1,0,6,0,0,6,161,1,20,0,80,128,134,0,6,226,0,0,129,200,7,7,0,1,0,27,0,0,171,8,9,19,1,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,25,5,25,201,8,0,3,132,0,5,240,9,2,0,200,6,8,0,1,0,0,192,7,0,171,1,25,0,68,128,1,9,133,0,6,226,0,0,1,65,136,1,2,133,0,5,240,0,9,131,200,6,8,0,2,0,0,27,7,0,161,2,23,0,56,136,1,1,133,0,6,225,9,0,2,200,8,2,0,1,132,0,6,225,9,1,0,200,7,131,0,6,27,0,0,161,0,24,5,0,200,7,0,1,132,0,6,224,3,1,0,200,7,131,0,6,27,0,0,171,1,23,3,0,200,7,134,0,4,224,1,0,0,3,20,128,9,132,0,4,198,194,0,0,3,3,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,8,8,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,7,7,4,0,200,15,128,5,1,0,177,177,0,6,34,3,3,0,200,15,2,128,4,132,0,6,226,9,9,0,200,15,2,128,5,132,0,6,226,11,11,0,200,15,2,128,6,132,0,6,226,6,6,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx55 = new byte[] {4,16,42,17,1,131,0,5,216,0,0,10,124,139,0,1,36,131,0,1,84,136,0,1,128,134,0,1,1,139,0,1,28,131,0,1,16,133,0,3,252,0,16,131,0,1,64,143,0,9,128,0,0,9,252,0,113,0,12,138,0,2,121,8,131,0,1,1,131,0,1,7,131,0,56,8,0,0,2,144,0,16,0,19,0,0,48,20,0,0,112,21,0,0,96,22,0,0,80,23,0,32,16,24,0,0,32,25,0,0,240,80,0,1,241,81,0,2,50,82,0,3,243,83,0,4,244,84,0,5,245,41,85,0,6,246,86,0,7,247,87,0,0,16,204,0,0,16,206,0,0,16,32,0,0,16,205,0,0,16,207,0,0,16,208,0,0,16,209,0,0,16,210,176,0,6,64,64,0,0,63,128,186,0,0,1,63,143,0,0,1,245,1,85,1,96,1,19,1,16,1,25,1,18,1,3,1,18,1,0,1,16,1,3,132,0,0,1,96,1,26,1,196,1,0,1,18,133,0,0,1,96,1,32,1,96,1,38,1,18,1,0,1,18,133,0,0,1,96,1,44,1,96,1,50,1,18,1,0,1,18,133,0,0,1,96,1,56,1,96,1,62,1,18,1,0,1,18,133,0,0,1,96,1,68,1,96,1,74,1,18,1,0,1,18,133,0,0,1,96,1,80,1,96,1,86,1,18,1,0,1,18,133,0,0,1,96,1,92,1,96,1,98,1,18,1,0,1,18,133,0,0,1,96,1,104,1,96,1,110,1,18,1,0,1,18,133,0,0,1,96,1,116,1,96,1,122,1,18,1,0,1,18,133,0,0,1,96,2,128,96,3,134,18,0,1,18,133,0,2,96,140,3,96,146,18,2,0,18,133,0,2,96,152,3,96,158,18,2,0,18,133,0,2,96,164,3,96,170,18,2,0,18,133,0,2,96,176,3,96,182,18,2,0,18,133,0,2,96,188,3,96,194,18,2,0,18,133,0,2,48,200,3,0,0,18,2,0,194,133,0,2,96,203,3,32,209,18,2,0,18,133,0,2,16,211,3,0,0,34,133,0,1,5,2,248,112,3,0,0,36,2,6,136,132,0,3,3,248,160,4,0,0,36,6,1,136,132,0,4,1,248,128,0,4,0,36,6,136,132,0,4,5,232,144,0,4,0,36,6,136,132,0,4,3,232,32,0,4,0,36,6,136,132,0,4,1,232,176,0,4,0,36,6,136,132,0,2,5,216,131,0,3,36,6,136,132,0,2,200,15,132,0,2,108,0,3,161,0,3,4,0,200,15,0,1,1,132,0,1,232,131,0,4,200,15,0,0,1,2,131,0,5,224,0,1,0,200,1,15,132,0,5,108,0,160,0,255,3,0,200,15,134,0,1,234,131,0,2,92,32,133,0,1,129,1,226,131,0,2,200,3,2,128,2,132,0,2,226,2,3,2,0,92,4,31,0,1,160,5,177,0,64,161,11,6,38,0,200,15,0,1,7,160,108,0,0,171,11,38,3,1,92,64,133,0,2,194,226,131,0,6,200,15,0,1,160,198,7,0,0,171,11,38,1,92,1,128,133,0,2,3,226,131,0,6,200,15,0,1,160,27,7,0,0,171,11,38,1,92,3,33,0,2,131,0,8,129,239,1,7,0,200,1,0,1,3,132,0,8,240,1,8,0,92,31,0,4,9,160,177,0,64,161,11,39,0,200,10,15,0,4,160,108,0,0,171,11,39,5,4,200,15,0,5,132,0,1,226,131,0,4,92,15,5,5,131,0,2,129,226,131,0,4,200,15,0,5,132,0,1,226,131,0,9,92,79,5,6,160,177,0,194,161,10,11,40,0,200,15,0,0,160,198,0,9,0,171,11,39,4,200,15,0,4,132,0,8,226,5,5,0,92,15,4,4,131,0,2,64,226,131,5,10,200,15,0,6,160,108,0,0,171,11,6,40,6,200,15,0,4,132,0,7,226,5,5,0,92,128,4,132,0,9,3,226,0,0,5,200,15,0,0,10,160,27,0,0,171,11,39,0,92,2,2,0,2,131,0,9,194,239,0,7,4,200,2,0,3,132,0,10,240,0,8,0,200,15,0,5,160,198,10,0,0,171,11,40,6,92,1,0,4,131,0,9,3,240,1,9,4,200,2,0,4,132,0,10,240,0,9,0,200,15,0,5,160,27,10,0,0,171,11,40,5,20,132,2,2,131,0,9,177,207,5,7,3,200,1,0,6,132,0,8,175,2,0,0,200,2,0,6,132,0,8,175,2,1,0,20,132,6,6,131,0,9,177,143,2,2,3,200,1,0,7,132,0,8,175,6,4,0,200,2,0,7,132,0,7,175,6,5,0,200,4,0,1,7,132,0,7,175,6,6,0,200,4,0,1,3,132,0,7,240,5,8,0,200,8,0,1,7,132,0,7,175,6,7,0,200,1,0,1,2,132,0,7,176,3,0,0,200,2,0,1,2,132,0,7,176,3,1,0,200,4,0,1,2,132,0,7,176,3,2,0,200,8,0,1,8,132,0,7,240,2,2,0,200,7,0,1,8,132,0,7,226,6,6,0,80,132,8,1,4,132,0,7,240,5,9,136,20,135,9,8,9,0,0,27,198,193,2,8,5,3,200,1,0,2,132,0,8,176,4,0,0,200,2,0,2,132,0,7,176,4,1,0,200,4,0,1,2,132,0,7,176,4,2,0,200,1,0,1,1,132,0,7,240,1,10,0,200,8,0,1,8,132,0,7,240,2,2,0,80,130,8,1,1,132,0,7,240,0,10,136,200,4,0,1,1,132,0,7,240,5,10,0,20,135,10,8,10,0,0,27,198,193,2,8,3,3,200,1,134,0,6,176,1,0,0,200,2,134,0,3,176,1,1,3,0,200,4,134,0,1,176,2,1,2,3,0,200,7,4,0,1,2,0,5,27,0,139,8,14,5,14,200,8,0,8,132,0,5,240,1,1,0,80,4,135,1,2,4,131,0,6,160,8,12,136,20,129,2,4,3,131,0,7,27,240,2,2,1,80,113,2,3,5,131,0,8,64,240,0,0,3,80,119,3,1,2,131,0,9,64,225,2,3,5,200,7,0,11,132,0,6,225,0,3,0,200,7,132,0,7,27,0,235,1,1,2,200,8,7,0,4,0,0,27,0,225,7,1,1,0,68,129,4,1,132,0,7,240,0,0,4,80,112,1,132,0,7,64,226,0,0,1,200,7,134,0,4,225,0,1,0,5,200,8,0,4,0,6,0,128,64,139,4,17,5,17,201,8,0,11,132,0,6,240,11,0,0,200,8,7,0,4,0,0,192,0,171,5,8,17,4,64,128,134,0,5,226,0,0,139,68,2,136,11,131,0,6,27,0,161,0,15,4,3,57,136,8,133,0,5,240,4,11,0,200,3,8,0,1,132,0,5,225,8,11,0,200,6,7,0,1,2,0,27,7,0,139,8,18,18,200,8,2,0,8,132,0,6,240,1,1,0,80,132,131,0,7,16,16,0,225,11,0,136,2,200,7,131,0,8,6,0,0,161,0,16,0,68,2,128,11,133,0,1,226,131,0,2,200,7,131,0,7,27,0,0,171,1,15,0,8,200,8,0,11,0,0,128,64,9,139,11,21,21,200,8,0,8,0,10,0,192,0,171,8,21,11,68,135,11,11,3,0,0,27,0,225,1,0,8,201,8,2,0,8,132,0,11,240,3,11,0,200,7,0,1,0,0,27,9,0,235,1,0,2,200,8,0,8,132,0,11,225,11,8,0,200,7,0,3,0,27,0,9,0,161,8,20,0,200,1,0,4,132,0,7,240,1,1,0,80,112,4,132,0,9,64,226,0,0,4,200,7,0,1,132,0,8,225,1,4,0,201,8,0,8,132,0,8,240,11,1,0,200,7,0,1,9,2,0,27,0,139,8,22,22,64,3,136,4,8,132,0,9,240,1,1,136,200,8,0,4,0,9,0,27,0,161,4,19,0,56,128,134,0,7,226,0,0,4,80,136,0,1,11,132,0,7,225,11,0,136,200,7,0,8,3,0,27,0,0,171,11,19,4,3,68,135,11,133,0,7,224,0,3,0,200,8,0,8,11,0,0,128,64,139,11,25,9,25,200,8,0,8,0,0,192,0,10,171,8,25,11,68,135,2,3,0,0,10,27,0,225,1,0,8,201,8,0,8,132,0,10,240,11,3,0,200,7,0,1,0,0,10,27,0,235,1,0,2,200,8,0,8,132,0,10,225,2,8,0,200,7,0,3,0,27,11,0,0,161,8,24,0,200,7,0,4,2,11,0,27,0,139,8,26,26,200,1,0,5,132,0,7,240,1,1,0,80,120,5,132,0,9,64,240,4,4,5,80,135,8,1,132,0,8,225,1,5,128,201,8,0,11,132,0,8,240,11,1,0,64,135,1,5,9,0,0,27,0,225,4,8,139,68,10,136,11,1,0,0,27,0,161,1,23,4,8,56,128,3,133,0,8,226,0,0,1,200,8,0,3,132,0,8,225,2,3,0,200,8,0,11,9,0,0,128,64,139,11,29,29,200,10,7,0,1,0,27,0,0,171,3,23,3,3,200,8,132,0,8,192,0,171,0,29,11,200,7,134,0,7,224,1,0,0,68,135,0,8,12,0,64,64,0,226,8,8,9,0,200,7,0,1,0,0,27,0,8,235,4,8,2,201,8,0,12,132,0,8,240,11,5,0,200,1,0,3,132,0,8,240,1,1,0,80,120,3,12,131,0,8,64,225,0,12,3,200,7,0,1,1,132,0,8,225,1,3,0,201,8,0,11,132,0,7,240,11,1,0,64,135,3,8,1,0,27,0,0,161,12,28,9,139,200,8,0,3,0,0,27,0,7,161,3,27,0,56,128,12,133,0,8,226,0,0,3,200,8,0,12,132,0,7,225,0,12,0,200,7,0,8,3,2,0,27,0,139,12,30,9,30,200,7,0,1,0,27,0,0,6,171,12,27,1,200,8,134,0,7,240,3,3,0,80,135,12,1,1,132,0,7,224,1,0,128,200,7,0,8,0,2,0,27,0,139,12,34,4,34,68,64,12,133,0,7,226,0,0,12,200,4,0,8,12,0,0,48,32,139,12,33,9,33,200,7,0,4,0,0,27,0,6,235,3,12,2,200,8,132,0,9,192,192,171,0,33,12,68,129,0,1,5,132,0,7,240,4,4,0,80,112,5,132,0,8,64,226,0,0,5,200,7,0,1,12,132,0,8,225,4,5,0,201,8,0,11,132,0,7,240,11,12,0,64,135,4,8,3,0,0,27,0,225,3,12,9,139,200,8,0,4,0,0,27,0,7,161,4,31,0,56,128,3,133,0,8,226,0,0,4,200,8,0,11,132,0,7,225,0,3,0,201,8,0,1,3,132,0,7,240,3,11,0,200,4,0,8,3,0,16,16,0,225,0,3,5,0,200,8,0,3,132,0,1,240,131,0,8,200,7,0,3,0,6,0,0,6,161,3,32,0,80,128,134,0,6,226,0,0,131,200,7,7,0,3,0,27,0,0,171,8,11,31,3,200,7,0,2,0,9,0,27,0,235,0,0,2,200,7,132,0,3,27,0,225,131,0,4,68,129,0,4,132,0,7,240,2,2,0,80,112,4,132,0,6,64,226,0,0,4,200,3,7,0,2,132,0,6,225,2,4,0,200,8,132,0,5,128,64,139,0,37,5,37,201,8,0,1,132,0,5,240,11,2,0,200,6,8,0,3,0,0,192,7,0,171,3,37,0,68,128,1,11,133,0,6,226,0,0,3,65,136,1,2,133,0,5,240,0,11,129,200,6,8,0,2,0,0,27,7,0,161,2,35,0,56,136,1,3,133,0,6,225,11,0,2,200,8,2,0,3,132,0,6,225,11,3,0,200,7,131,0,6,27,0,0,161,0,36,5,0,200,7,0,3,132,0,6,224,1,3,0,200,7,131,0,6,27,0,0,171,3,35,3,0,200,7,134,0,4,224,3,0,0,3,20,128,11,132,0,4,198,194,0,0,3,3,20,135,133,0,3,27,128,0,4,13,13,200,15,2,128,62,132,0,4,226,7,7,0,3,200,15,128,133,0,1,226,131,0,3,200,15,128,1,3,132,0,3,226,6,6,4,0,200,15,128,5,1,0,177,177,0,6,34,3,3,0,200,15,2,128,4,132,0,6,226,11,11,0,200,15,2,128,5,132,0,6,226,9,9,0,200,15,2,128,6,132,0,6,226,10,10,0,200,15,2,128,7,132,0,5,34,12,12,0,200,135,0,1,226,142,0,0,1,0};
		
		public static byte[] _bx56 = new byte[] {4,16,42,17,1,131,0,1,76,131,0,1,156,143,0,1,36,143,0,1,156,131,0,1,2,143,0,1,1,138,0,2,2,144,132,0,5,96,3,196,0,18,133,0,7,16,9,0,0,18,0,194,133,0,7,16,10,16,11,18,0,34,131,0,3,20,31,1,132,0,10,27,0,37,13,0,20,36,1,1,0,131,27,0,131,2,6,1,20,129,1,2,0,131,27,7,2,4,4,3,20,47,2,132,0,10,27,192,0,1,5,20,72,2,2,0,131,27,6,2,7,7,6,200,15,134,0,6,224,0,2,0,20,135,133,0,9,27,160,0,12,0,200,15,128,62,132,0,1,226,131,0,1,200,135,0,1,226,142,0,1,0};
		
		public static byte[] _bx57 = new byte[] {3,16,42,17,132,0,1,84,131,0,1,228,143,0,1,36,143,0,4,228,16,0,6,132,0,1,4,134,0,6,56,132,0,15,0,15,131,0,17,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,132,0,5,96,3,196,0,18,133,0,7,96,9,32,15,18,0,18,133,0,5,16,17,0,0,34,133,0,16,200,7,1,3,2,0,27,0,139,3,0,0,200,8,1,3,132,0,8,240,3,3,0,88,129,4,5,132,0,8,240,2,2,131,76,64,4,1,132,0,20,226,1,1,4,200,8,1,6,0,192,128,64,139,4,3,3,80,112,5,1,131,0,9,64,226,1,1,5,200,7,1,4,132,0,20,225,5,2,0,200,8,1,2,0,0,192,0,171,3,3,6,76,72,3,3,132,0,8,240,3,4,2,201,8,1,3,132,0,8,225,4,3,0,8,128,2,1,131,0,21,195,226,1,1,3,200,7,1,2,0,27,0,0,171,2,2,0,20,128,2,1,131,0,8,27,226,1,1,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx58 = new byte[] {3,16,42,17,132,0,5,84,0,0,1,68,143,0,1,36,142,0,5,1,68,16,0,6,132,0,1,4,134,0,6,56,132,0,15,0,15,131,0,17,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,132,0,5,96,3,196,0,18,133,0,7,96,9,96,15,18,0,18,133,0,7,64,21,16,25,18,0,34,131,0,16,200,7,1,4,2,0,27,0,139,3,4,4,200,8,1,5,132,0,8,240,4,4,0,88,129,4,6,132,0,8,240,2,2,133,76,64,5,1,132,0,44,226,1,1,4,200,4,1,5,0,0,48,32,139,5,7,7,200,8,1,5,0,0,192,192,171,5,7,5,200,7,1,3,2,0,27,0,139,3,0,0,76,72,5,5,132,0,8,240,3,3,5,80,112,6,1,131,0,9,64,226,1,1,6,200,7,1,2,132,0,8,225,6,2,0,88,136,2,3,132,0,8,240,4,2,133,77,136,3,4,132,0,25,225,4,3,2,200,8,1,4,0,192,0,0,225,5,4,0,200,4,1,4,0,16,48,32,139,131,3,4,200,8,1,3,132,0,20,240,2,3,0,200,4,1,3,0,16,0,0,171,5,3,4,201,8,1,3,132,0,20,225,2,3,0,76,135,2,3,0,27,0,192,161,4,6,3,200,8,1,3,132,0,20,225,2,3,0,200,7,1,2,0,27,0,0,171,3,2,3,20,135,2,2,131,0,8,27,224,2,0,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx59 = new byte[] {3,16,42,17,132,0,5,84,0,0,1,212,143,0,1,36,142,0,5,1,212,16,0,6,132,0,1,4,134,0,6,56,132,0,15,0,15,131,0,17,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,132,0,5,96,4,196,0,18,133,0,7,96,10,96,16,18,0,18,133,0,7,96,22,96,28,18,0,18,133,0,7,48,34,16,37,18,0,34,131,0,16,200,7,1,4,2,0,27,0,139,3,4,4,200,8,1,4,132,0,8,240,4,4,0,88,65,5,6,132,0,8,240,2,2,132,76,128,5,1,131,0,33,192,226,1,1,5,200,8,1,5,0,0,128,64,139,5,7,7,200,8,1,4,0,0,192,0,171,4,7,5,80,112,6,1,131,0,9,64,226,1,1,6,76,135,5,2,132,0,8,225,6,2,4,20,136,6,4,131,0,45,27,240,4,2,5,201,8,1,4,0,192,0,0,225,5,4,0,200,7,1,6,2,0,27,0,139,3,0,0,200,4,1,4,0,16,16,0,225,4,6,0,200,8,1,4,132,0,20,240,6,6,0,200,7,1,4,0,6,0,0,161,4,6,0,88,128,2,1,132,0,8,226,1,1,132,76,132,5,5,132,0,44,240,6,2,2,201,8,1,2,0,0,192,0,225,2,5,0,200,7,1,5,2,0,27,0,139,3,8,8,200,8,1,3,0,0,128,64,139,5,3,3,200,8,1,5,132,0,20,240,5,5,0,200,8,1,4,0,0,192,0,171,4,3,3,88,128,3,1,132,0,8,226,1,1,133,76,64,3,1,132,0,32,226,1,1,4,76,136,4,2,0,0,192,0,225,2,3,3,200,4,1,3,0,16,48,32,139,4,11,11,200,8,1,4,132,0,20,240,5,2,0,200,8,1,5,0,0,192,192,171,5,11,3,77,136,3,4,132,0,20,225,3,4,5,200,7,1,4,0,27,0,0,171,2,2,4,200,8,1,4,132,0,20,225,3,4,0,200,7,1,2,0,27,0,0,171,4,10,4,20,135,2,2,131,0,8,27,224,2,0,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx60 = new byte[] {3,16,42,17,132,0,5,84,0,0,2,88,143,0,1,36,142,0,5,2,88,16,0,7,132,0,1,4,134,0,6,56,132,0,15,0,15,131,0,17,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,132,0,5,96,5,196,0,18,133,0,7,96,11,96,17,18,0,18,133,0,7,96,23,96,29,18,0,18,133,0,7,96,35,96,41,18,0,18,133,0,7,16,47,16,48,18,0,34,131,0,16,200,7,1,4,2,0,27,0,139,3,4,4,200,8,1,4,132,0,8,240,4,4,0,88,129,5,6,132,0,8,240,2,2,132,76,64,5,1,132,0,32,226,1,1,5,200,4,1,5,0,0,48,32,139,5,7,7,200,8,1,4,0,0,192,192,171,4,7,5,76,128,7,1,132,0,8,226,1,1,4,80,112,6,1,131,0,9,64,226,1,1,6,200,7,1,7,132,0,8,225,6,2,0,200,8,1,2,132,0,20,240,4,7,0,200,7,1,5,2,0,27,0,139,3,0,0,201,8,1,2,132,0,8,225,2,5,0,200,8,1,5,132,0,8,240,5,5,0,88,136,7,2,132,0,20,225,7,2,133,76,135,4,2,0,27,0,0,161,2,6,7,200,8,1,2,132,0,20,240,5,7,0,200,4,1,5,0,16,48,32,139,4,3,3,201,8,1,2,132,0,20,225,7,2,0,200,8,1,4,0,0,192,192,171,5,3,5,76,128,4,1,132,0,20,226,1,1,4,200,7,1,4,2,0,27,0,139,3,8,8,200,8,1,4,132,0,8,225,2,4,0,200,8,1,2,132,0,20,240,4,4,0,200,7,1,2,0,27,0,0,171,4,2,2,88,128,7,1,132,0,8,226,1,1,130,76,132,4,4,132,0,44,240,4,7,7,201,8,1,7,0,0,192,0,225,7,4,0,200,7,1,4,2,0,27,0,139,3,12,12,200,8,1,3,0,0,128,64,139,4,11,11,200,8,1,4,132,0,20,240,4,4,0,200,8,1,2,0,0,192,0,171,2,11,3,88,128,3,1,132,0,8,226,1,1,132,76,64,3,1,132,0,32,226,1,1,2,76,136,2,7,0,0,192,0,225,7,3,3,200,4,1,3,0,16,48,32,139,2,15,15,200,8,1,2,132,0,20,240,4,7,0,200,8,1,4,0,0,192,192,171,4,15,3,77,136,3,2,132,0,20,225,3,2,4,200,7,1,2,0,27,0,0,171,7,10,2,200,8,1,2,132,0,20,225,3,2,0,200,7,1,2,0,27,0,0,171,2,14,2,20,135,2,2,131,0,8,27,224,2,0,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx61 = new byte[] {3,16,42,17,132,0,1,88,131,0,1,252,143,0,1,36,143,0,4,252,16,2,7,132,0,1,4,134,0,6,64,165,0,31,0,31,131,0,30,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,1,16,3,0,0,18,0,196,133,0,7,96,4,96,10,18,0,18,133,0,7,48,16,16,19,18,0,34,131,0,28,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,4,2,0,27,0,139,4,0,0,200,8,1,4,132,0,8,240,4,4,0,88,129,5,6,132,0,8,240,3,3,132,76,64,5,1,132,0,20,226,1,1,5,200,8,1,7,0,192,128,64,139,5,3,3,80,112,6,1,131,0,9,64,226,1,1,6,200,7,1,5,132,0,20,225,6,3,0,200,8,1,3,0,0,192,0,171,4,3,7,76,72,4,4,132,0,8,240,4,5,3,201,8,1,4,132,0,8,225,5,4,0,8,128,3,1,131,0,21,195,226,1,1,4,200,7,1,3,0,27,0,0,171,3,2,0,20,128,3,1,131,0,8,27,226,1,1,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx62 = new byte[] {3,16,42,17,132,0,5,88,0,0,1,104,143,0,1,36,142,0,5,1,104,16,2,7,132,0,1,4,134,0,6,64,165,0,31,0,31,131,0,30,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,1,16,4,0,0,18,0,196,133,0,7,96,5,96,11,18,0,18,133,0,7,96,17,80,23,18,0,18,133,0,5,16,28,0,0,34,133,0,21,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,5,2,0,27,0,139,131,4,4,200,8,1,6,132,0,8,240,5,5,0,88,129,5,7,132,0,8,240,3,3,134,76,64,6,1,132,0,44,226,1,1,5,200,4,1,6,0,0,48,32,139,6,7,7,200,8,1,6,0,0,192,192,171,6,7,6,200,7,1,4,2,0,27,0,139,4,0,0,76,72,6,6,132,0,8,240,4,4,6,80,112,7,1,131,0,9,64,226,1,1,7,200,7,1,3,132,0,8,225,7,3,0,88,136,3,4,132,0,8,240,5,3,134,77,136,4,5,132,0,32,225,5,4,3,200,8,1,5,0,192,0,0,225,6,5,0,200,4,1,5,0,16,48,32,139,4,3,3,200,8,1,4,132,0,20,240,3,4,0,200,4,1,4,0,16,0,0,171,6,3,5,201,8,1,4,132,0,20,225,3,4,0,76,135,3,4,0,27,0,192,161,5,6,4,200,8,1,4,132,0,20,225,3,4,0,200,7,1,3,0,27,0,0,171,4,2,4,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx63 = new byte[] {3,16,42,17,132,0,5,88,0,0,1,248,143,0,1,36,142,0,5,1,248,16,2,7,132,0,1,4,134,0,6,64,165,0,31,0,31,131,0,30,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,1,16,5,0,0,18,0,196,133,0,7,96,6,96,12,18,0,18,133,0,7,96,18,96,24,18,0,18,133,0,7,96,30,64,36,18,0,18,133,0,5,16,40,0,0,34,133,0,21,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,5,2,0,27,0,139,131,4,4,200,8,1,5,132,0,8,240,5,5,0,88,65,6,7,132,0,8,240,3,3,133,76,128,6,1,131,0,33,192,226,1,1,6,200,8,1,6,0,0,128,64,139,6,7,7,200,8,1,5,0,0,192,0,171,5,7,6,80,112,7,1,131,0,9,64,226,1,1,7,76,135,6,3,132,0,8,225,7,3,5,20,136,7,5,131,0,45,27,240,5,3,6,201,8,1,5,0,192,0,0,225,6,5,0,200,7,1,7,2,0,27,0,139,4,0,0,200,4,1,5,0,16,16,0,225,5,7,0,200,8,1,5,132,0,20,240,7,7,0,200,7,1,5,0,6,0,0,161,5,6,0,88,128,3,1,132,0,8,226,1,1,133,76,132,6,6,132,0,44,240,7,3,3,201,8,1,3,0,0,192,0,225,3,6,0,200,7,1,6,2,0,27,0,139,4,8,8,200,8,1,4,0,0,128,64,139,6,3,3,200,8,1,6,132,0,20,240,6,6,0,200,8,1,5,0,0,192,0,171,5,3,4,88,128,4,1,132,0,8,226,1,1,134,76,64,4,1,132,0,32,226,1,1,5,76,136,5,3,0,0,192,0,225,3,4,4,200,4,1,4,0,16,48,32,139,5,11,11,200,8,1,5,132,0,20,240,6,3,0,200,8,1,6,0,0,192,192,171,6,11,4,77,136,4,5,132,0,20,225,4,5,6,200,7,1,5,0,27,0,0,171,3,2,5,200,8,1,5,132,0,20,225,4,5,0,200,7,1,3,0,27,0,0,171,5,10,5,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx64 = new byte[] {3,16,42,17,132,0,5,88,0,0,2,124,143,0,1,36,142,0,5,2,124,16,2,8,132,0,1,4,134,0,6,64,165,0,31,0,31,131,0,30,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,1,16,6,0,0,18,0,196,133,0,7,96,7,96,13,18,0,18,133,0,7,96,19,96,25,18,0,18,133,0,7,96,31,96,37,18,0,18,133,0,7,96,43,32,49,18,0,18,133,0,5,16,51,0,0,34,133,0,21,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,5,2,0,27,0,139,131,4,4,200,8,1,5,132,0,8,240,5,5,0,88,129,6,7,132,0,8,240,3,3,133,76,64,6,1,132,0,32,226,1,1,6,200,4,1,6,0,0,48,32,139,6,7,7,200,8,1,5,0,0,192,192,171,5,7,6,76,128,8,1,132,0,8,226,1,1,5,80,112,7,1,131,0,9,64,226,1,1,7,200,7,1,8,132,0,8,225,7,3,0,200,8,1,3,132,0,20,240,5,8,0,200,7,1,6,2,0,27,0,139,4,0,0,201,8,1,3,132,0,8,225,3,6,0,200,8,1,6,132,0,8,240,6,6,0,88,136,8,3,132,0,20,225,8,3,134,76,135,5,3,0,27,0,0,161,3,6,8,200,8,1,3,132,0,20,240,6,8,0,200,4,1,6,0,16,48,32,139,5,3,3,201,8,1,3,132,0,20,225,8,3,0,200,8,1,5,0,0,192,192,171,6,3,6,76,128,5,1,132,0,20,226,1,1,5,200,7,1,5,2,0,27,0,139,4,8,8,200,8,1,5,132,0,8,225,3,5,0,200,8,1,3,132,0,20,240,5,5,0,200,7,1,3,0,27,0,0,171,5,2,3,88,128,8,1,132,0,8,226,1,1,131,76,132,5,5,132,0,44,240,5,8,8,201,8,1,8,0,0,192,0,225,8,5,0,200,7,1,5,2,0,27,0,139,4,12,12,200,8,1,4,0,0,128,64,139,5,11,11,200,8,1,5,132,0,20,240,5,5,0,200,8,1,3,0,0,192,0,171,3,11,4,88,128,4,1,132,0,8,226,1,1,133,76,64,4,1,132,0,32,226,1,1,3,76,136,3,8,0,0,192,0,225,8,4,4,200,4,1,4,0,16,48,32,139,3,15,15,200,8,1,3,132,0,20,240,5,8,0,200,8,1,5,0,0,192,192,171,5,15,4,77,136,4,3,132,0,20,225,4,3,5,200,7,1,3,0,27,0,0,171,8,10,3,200,8,1,3,132,0,20,225,4,3,0,200,7,1,3,0,27,0,0,171,3,14,3,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx65 = new byte[] {3,16,42,17,132,0,5,136,0,0,1,144,139,0,1,36,131,0,1,76,136,0,1,128,146,0,5,20,1,0,0,16,147,0,8,64,0,0,1,80,16,2,7,132,0,1,4,134,0,6,88,231,0,127,0,127,131,0,29,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,144,0,1,191,176,0,0,1,5,1,32,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,2,6,96,3,12,18,0,1,18,133,0,2,96,18,3,32,24,18,2,0,18,133,0,2,16,26,3,0,0,34,133,0,1,144,2,16,112,3,65,31,255,4,254,136,0,0,5,64,0,144,0,32,6,65,31,255,246,136,0,7,0,64,0,200,7,1,7,8,0,0,44,0,160,7,1,0,9,200,7,1,3,2,0,27,0,139,10,3,0,0,200,7,1,5,0,49,0,9,0,225,7,5,0,200,8,1,5,132,0,10,240,3,3,0,200,7,1,5,0,44,10,0,0,235,7,6,5,88,128,7,1,132,0,10,226,1,1,133,200,7,1,5,0,6,10,0,0,235,7,4,5,76,129,3,4,132,0,10,240,5,5,7,80,123,4,6,0,16,10,16,64,226,5,5,4,200,7,1,7,132,0,10,225,5,4,0,200,4,1,6,0,16,3,48,32,139,131,3,4,200,8,1,3,132,0,10,240,3,7,0,200,4,1,3,0,16,10,0,0,171,6,3,6,201,8,1,3,132,0,8,225,7,3,0,76,64,3,1,131,0,9,192,226,1,1,3,8,128,3,1,131,0,10,2,226,1,1,3,200,7,1,3,0,11,27,0,0,171,3,2,0,20,128,3,1,131,0,8,27,226,1,1,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,7,225,0,1,0,200,0,1,1,1,132,0,3,226,1,1,140,0,0,1,0};
		
		public static byte[] _bx66 = new byte[] {3,16,42,17,132,0,5,136,0,0,1,240,139,0,1,36,131,0,1,76,136,0,1,128,146,0,5,20,1,0,0,16,147,0,8,64,0,0,1,176,16,2,7,132,0,1,4,134,0,6,88,231,0,127,0,127,131,0,29,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,144,0,1,191,176,0,0,1,5,1,32,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,2,6,96,3,12,18,0,1,18,133,0,2,96,18,3,96,24,18,2,0,18,133,0,2,64,30,3,16,34,18,2,0,34,131,0,4,144,16,112,65,5,31,255,254,136,0,6,0,64,0,144,0,32,7,65,31,255,246,136,0,0,8,64,0,200,7,1,7,0,0,9,44,0,160,7,1,0,200,7,1,10,5,0,49,0,0,225,7,5,0,200,11,7,1,5,0,44,0,0,235,7,6,5,12,200,7,1,4,0,6,0,0,235,7,4,5,13,200,7,1,5,2,0,27,0,139,3,4,4,200,3,1,1,6,132,0,8,240,4,4,0,80,120,6,5,131,0,9,64,240,5,5,6,200,7,1,4,132,0,8,225,4,6,0,200,2,1,5,132,0,8,240,4,5,0,88,64,5,1,132,0,10,226,1,1,133,77,136,4,6,0,177,3,198,192,225,131,5,11,200,7,1,5,2,0,27,0,139,3,0,12,0,200,8,1,4,0,0,128,64,139,4,7,5,7,200,4,1,6,132,0,12,240,5,5,0,200,8,1,5,0,0,192,0,8,171,5,7,4,88,128,4,1,131,0,9,192,226,1,1,134,76,32,6,1,132,0,12,226,1,1,5,76,136,5,6,0,27,177,0,13,225,6,6,4,200,2,1,6,0,8,0,12,139,7,5,3,3,200,8,1,3,132,0,8,240,4,5,0,200,4,1,3,131,0,9,48,171,6,3,6,201,8,1,3,132,0,12,225,4,3,0,76,135,4,3,0,27,0,192,8,161,6,6,3,200,8,1,3,132,0,12,225,4,3,0,200,7,1,3,0,27,0,0,8,171,3,2,3,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,0,1,0};
		
		public static byte[] _bx67 = new byte[] {3,16,42,17,132,0,5,136,0,0,2,104,139,0,1,36,131,0,1,76,136,0,1,128,146,0,5,20,1,0,0,16,147,0,8,64,0,0,2,40,16,2,9,132,0,1,4,134,0,6,88,231,0,127,0,127,131,0,29,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,144,0,1,191,176,0,0,1,5,1,32,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,2,7,96,3,13,18,0,1,18,133,0,2,96,19,3,96,25,18,2,0,18,133,0,2,96,31,3,96,37,18,2,0,18,133,0,2,16,43,3,16,44,18,2,0,34,131,0,4,144,16,112,65,5,31,255,254,136,0,6,0,64,0,144,0,32,7,65,31,255,246,136,0,0,8,64,0,200,7,1,8,2,0,9,27,0,139,3,4,4,200,8,1,1,8,132,0,9,240,8,8,0,88,135,9,7,0,10,0,44,0,160,7,1,136,200,7,1,11,9,0,49,0,0,225,7,5,0,76,128,2,7,1,132,0,11,226,1,1,9,200,7,1,9,0,44,0,12,0,235,7,6,9,200,8,1,7,0,0,128,2,64,139,131,7,13,200,7,1,7,0,6,0,0,235,7,4,9,200,14,8,1,7,0,0,192,0,171,8,7,7,76,129,8,1,4,132,0,1,240,131,7,4,80,112,4,1,131,0,9,64,226,1,1,4,200,7,1,9,132,0,8,225,7,4,0,200,8,1,4,132,0,8,240,9,8,0,201,8,1,4,132,0,11,225,9,4,0,200,7,1,4,2,0,27,12,0,139,3,0,0,200,2,1,5,0,8,8,9,0,225,8,4,0,200,8,1,4,132,0,8,240,4,4,0,88,132,5,5,132,0,11,240,9,4,132,76,135,6,4,0,49,0,12,0,161,5,6,5,200,7,1,6,2,0,27,13,0,139,3,8,8,10,135,9,3,0,64,64,195,14,226,6,6,5,200,8,1,5,0,0,128,64,139,6,6,3,3,200,8,1,3,132,0,14,240,6,6,0,200,8,1,4,0,0,192,0,171,4,6,3,5,88,128,5,1,132,0,8,226,1,1,131,76,64,5,1,132,0,13,226,1,1,4,76,136,4,9,0,0,192,0,225,14,9,5,5,200,4,1,5,0,16,48,32,139,4,11,5,11,200,8,1,4,132,0,14,240,3,9,0,200,8,1,3,0,0,192,192,171,3,6,11,5,77,136,3,4,132,0,14,225,5,4,3,200,7,1,4,0,27,0,0,171,9,6,2,4,200,8,1,4,132,0,14,225,3,4,0,200,7,1,3,0,27,0,0,171,4,6,10,4,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx68 = new byte[] {3,16,42,17,132,0,5,136,0,0,2,224,139,0,1,36,131,0,1,76,136,0,1,128,146,0,5,20,1,0,0,16,147,0,8,64,0,0,2,160,16,2,10,132,0,1,4,134,0,6,88,231,0,127,0,127,131,0,29,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,144,0,1,191,176,0,0,1,5,1,32,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,2,8,96,3,14,18,0,1,18,133,0,2,96,20,3,96,26,18,2,0,18,133,0,2,96,32,3,96,38,18,2,0,18,133,0,2,96,44,3,64,50,18,2,0,18,133,0,2,16,54,3,0,0,34,133,0,1,144,2,16,112,3,65,31,255,4,254,136,0,0,5,64,0,144,0,32,6,65,31,255,246,136,0,7,0,64,0,200,7,1,8,8,2,0,27,0,139,3,4,4,4,200,8,1,9,132,0,8,240,8,8,0,88,135,8,7,9,0,0,44,0,160,7,1,137,76,8,136,7,10,0,21,21,0,226,131,8,10,200,7,1,9,0,49,0,0,225,7,11,5,0,200,8,1,7,0,0,128,64,139,131,7,11,200,7,1,9,0,44,0,0,235,7,6,12,9,200,8,1,7,0,0,192,0,171,9,7,13,7,200,7,1,7,0,6,0,0,235,7,4,9,4,76,129,5,4,132,0,1,240,131,7,4,80,112,4,1,131,0,9,64,226,1,1,4,200,7,1,5,132,0,8,225,7,4,0,200,8,1,4,132,0,11,240,8,5,0,200,7,1,10,2,0,27,9,0,139,3,0,0,201,8,1,4,132,0,8,225,4,10,0,200,8,1,10,132,0,8,240,10,10,0,88,136,5,4,132,0,9,225,5,4,138,76,135,6,4,0,10,27,0,0,161,4,6,5,200,8,1,1,4,132,0,10,240,10,5,0,200,4,1,10,0,16,10,48,32,139,6,3,3,201,8,1,4,132,0,10,225,5,4,0,200,8,1,6,0,0,10,192,192,171,10,3,10,76,128,6,1,132,0,10,226,1,1,6,200,7,1,6,2,0,10,27,0,139,3,8,8,200,8,1,5,132,0,8,225,4,6,0,200,8,1,4,132,0,8,240,6,6,0,88,132,6,6,132,0,8,240,6,5,132,200,7,1,4,9,0,27,0,0,171,5,2,4,77,8,136,7,5,0,198,27,0,225,131,6,10,200,7,1,7,2,0,27,0,139,3,11,12,12,200,8,1,3,0,0,128,64,139,7,7,11,11,200,8,1,7,132,0,11,240,7,7,0,200,8,1,4,0,0,192,9,0,171,4,11,3,88,128,3,1,132,0,8,226,1,1,135,76,64,3,1,132,0,10,226,1,1,4,76,136,4,5,0,0,11,192,0,225,5,3,3,200,4,1,3,0,11,16,48,32,139,4,15,15,200,8,1,4,132,0,11,240,7,5,0,200,8,1,6,0,0,192,9,192,171,7,15,3,77,136,3,4,132,0,11,225,3,4,6,200,7,1,4,0,27,0,9,0,171,5,10,4,200,8,1,4,132,0,11,225,3,4,0,200,7,1,3,0,27,0,9,0,171,4,14,4,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,0,1,0};
		
		public static byte[] _bx69 = new byte[] {3,16,42,17,132,0,5,88,0,0,1,80,143,0,1,36,142,0,5,1,80,16,0,7,132,0,1,4,134,0,6,68,165,0,31,0,31,131,0,21,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,0,0,116,85,132,0,5,96,3,196,0,18,133,0,7,96,9,96,15,18,0,18,133,0,7,80,21,16,26,18,0,34,131,0,17,200,7,1,5,2,0,27,0,139,3,0,0,200,7,1,3,4,131,0,8,224,3,4,0,200,8,1,5,132,0,8,240,5,5,0,88,136,3,4,132,0,32,240,3,3,133,88,135,4,5,0,0,27,0,225,5,3,132,200,7,1,3,0,0,27,0,235,3,4,5,76,129,3,4,132,0,8,240,2,2,3,80,113,4,6,131,0,21,64,240,3,3,4,80,120,6,7,0,21,21,64,226,3,3,6,200,7,1,3,132,0,8,225,3,6,0,200,7,1,7,132,0,20,225,4,2,0,200,8,1,3,0,0,128,64,139,7,3,3,201,8,1,7,132,0,20,240,7,3,0,200,8,1,5,0,0,192,0,171,5,3,3,65,132,2,5,132,0,20,240,7,5,135,76,40,5,2,0,0,27,0,161,2,1,5,56,128,5,1,132,0,8,226,1,1,2,8,64,5,1,131,0,9,193,226,1,1,5,8,128,5,1,131,0,33,131,226,1,1,5,200,7,1,5,0,6,0,0,161,5,2,0,200,7,1,2,0,27,0,0,171,5,1,5,20,135,2,2,131,0,8,27,224,2,0,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx70 = new byte[] {3,16,42,17,132,0,5,88,0,0,2,76,143,0,1,36,142,0,5,2,76,16,0,9,132,0,1,4,134,0,6,68,165,0,31,0,31,131,0,21,1,0,0,240,80,0,0,241,81,0,0,114,83,0,0,115,84,0,0,116,85,132,0,5,96,5,196,0,18,133,0,7,96,11,96,17,18,0,18,133,0,7,96,23,96,29,18,0,18,133,0,7,96,35,96,41,18,0,18,133,0,5,16,47,0,0,34,133,0,16,200,7,1,5,2,0,27,0,139,3,0,0,200,8,1,6,132,0,8,240,5,5,0,88,135,5,6,132,0,9,226,3,3,134,76,135,7,6,4,131,0,20,224,6,4,5,200,8,1,4,0,0,128,64,139,7,3,3,200,1,1,7,132,0,8,240,6,6,0,80,113,7,8,131,0,9,64,240,2,2,7,80,119,8,7,131,0,33,64,225,6,7,8,200,8,1,4,0,0,192,0,171,6,3,4,200,7,1,6,0,0,27,0,235,5,5,7,200,1,1,9,132,0,8,240,6,6,0,80,119,9,2,131,0,9,64,225,8,2,9,200,7,1,4,132,0,20,225,6,9,0,76,135,2,5,0,0,27,0,225,5,5,4,201,8,1,4,132,0,8,240,4,2,0,64,128,4,1,132,0,20,226,1,1,132,200,8,1,4,0,0,27,0,161,4,1,0,56,128,5,1,132,0,8,226,1,1,4,200,8,1,4,132,0,20,225,2,5,0,200,7,1,4,2,0,27,0,139,3,4,4,201,4,1,3,132,0,8,240,2,5,0,200,8,1,3,132,0,51,240,4,4,0,200,4,1,3,0,16,0,0,225,2,3,0,88,135,2,3,0,6,0,0,161,3,2,131,200,7,1,5,0,0,27,0,235,4,2,7,76,135,2,4,0,0,27,0,225,4,2,5,2,200,1,1,6,132,0,8,240,5,5,0,80,112,6,1,131,0,9,64,226,1,1,6,200,7,1,5,132,0,20,225,5,6,0,200,8,1,5,0,0,128,64,139,2,7,7,201,8,1,2,132,0,20,240,2,5,0,200,8,1,3,0,0,192,0,171,3,7,5,65,132,2,4,132,0,48,240,4,2,130,76,40,4,2,0,0,27,0,161,2,5,3,56,132,3,4,0,198,177,0,225,4,4,2,200,8,1,3,0,0,128,0,225,3,4,0,200,7,1,4,0,6,0,0,32,161,4,6,0,200,7,1,3,0,27,0,0,171,4,1,3,200,7,1,2,0,27,0,0,171,3,5,4,200,7,1,2,132,0,8,224,3,2,0,20,135,2,2,131,0,8,27,224,2,0,0,200,15,128,133,0,8,225,2,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx71 = new byte[] {3,16,42,17,132,0,5,92,0,0,1,116,143,0,1,36,142,0,5,1,116,16,2,8,132,0,1,4,134,0,6,76,198,0,63,0,63,131,0,34,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,1,16,4,0,0,18,0,196,133,0,7,96,5,96,11,18,0,18,133,0,7,96,17,96,23,18,0,18,133,0,5,16,29,0,0,34,133,0,29,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,6,2,0,27,0,139,4,0,0,200,7,1,4,4,131,0,8,224,4,5,0,200,8,1,6,132,0,8,240,6,6,0,88,136,4,5,132,0,32,240,4,4,134,88,135,5,6,0,0,27,0,225,6,4,133,200,7,1,4,0,0,27,0,235,4,5,6,76,129,4,5,132,0,8,240,3,3,4,80,113,5,7,131,0,21,64,240,4,4,5,80,120,7,8,0,21,21,64,226,4,4,7,200,7,1,4,132,0,8,225,4,7,0,200,7,1,8,132,0,20,225,5,3,0,200,8,1,4,0,0,128,64,139,8,3,3,201,8,1,8,132,0,20,240,8,4,0,200,8,1,6,0,0,192,0,171,6,3,4,65,132,3,6,132,0,20,240,8,6,136,76,40,6,3,0,0,27,0,161,3,1,6,56,128,6,1,132,0,8,226,1,1,3,8,64,6,1,131,0,9,193,226,1,1,6,8,128,6,1,131,0,33,131,226,1,1,6,200,7,1,6,0,6,0,0,161,6,2,0,200,7,1,3,0,27,0,0,171,6,1,6,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx72 = new byte[] {3,16,42,17,132,0,5,92,0,0,2,112,143,0,1,36,142,0,5,2,112,16,2,10,132,0,1,4,134,0,6,76,198,0,63,0,63,131,0,34,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,1,16,6,0,0,18,0,196,133,0,7,96,7,96,13,18,0,18,133,0,7,96,19,96,25,18,0,18,133,0,7,96,31,96,37,18,0,18,133,0,7,96,43,16,49,18,0,18,133,0,5,16,50,0,0,34,133,0,28,144,0,32,65,31,255,246,136,0,0,64,0,200,7,1,6,2,0,27,0,139,4,0,0,200,8,1,7,132,0,8,240,6,6,0,88,135,6,7,132,0,9,226,4,4,135,76,135,8,7,4,131,0,20,224,7,5,6,200,8,1,5,0,0,128,64,139,8,3,3,200,1,1,8,132,0,8,240,7,7,0,80,113,8,9,131,0,9,64,240,3,3,8,80,119,9,8,131,0,33,64,225,7,8,9,200,8,1,5,0,0,192,0,171,7,3,5,200,7,1,7,0,0,27,0,235,6,6,8,200,1,1,10,132,0,8,240,7,7,0,80,119,10,3,131,0,9,64,225,9,3,10,200,7,1,5,132,0,20,225,7,10,0,76,135,3,6,0,0,27,0,225,6,6,5,201,8,1,5,132,0,8,240,5,3,0,64,128,5,1,132,0,20,226,1,1,133,200,8,1,5,0,0,27,0,161,5,1,0,56,128,6,1,132,0,8,226,1,1,5,200,8,1,5,132,0,13,225,3,6,0,200,7,1,5,2,0,27,0,139,131,4,4,201,4,1,4,132,0,8,240,3,6,0,200,8,1,4,132,0,50,240,5,5,0,200,4,1,4,0,16,0,0,225,3,4,0,88,135,3,4,0,6,0,0,161,4,2,132,200,7,1,6,0,0,27,0,235,5,3,8,76,135,3,5,0,0,27,0,225,5,6,3,3,200,1,1,7,132,0,8,240,6,6,0,80,112,7,1,131,0,9,64,226,1,1,7,200,7,1,6,132,0,20,225,6,7,0,200,8,1,6,0,0,128,64,139,3,7,7,201,8,1,3,132,0,20,240,3,6,0,200,8,1,4,0,0,192,0,171,4,7,6,65,132,3,5,132,0,47,240,5,3,131,76,40,5,3,0,0,27,0,161,3,5,4,56,132,4,5,0,198,177,0,225,5,5,3,200,8,1,4,0,0,128,0,225,4,5,0,200,7,1,5,0,6,0,33,0,161,5,6,0,200,7,1,4,0,27,0,0,171,5,1,4,200,7,1,3,0,27,0,0,171,4,5,5,200,7,1,3,132,0,8,224,4,3,0,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
		
		public static byte[] _bx73 = new byte[] {3,16,42,17,132,0,5,140,0,0,2,8,139,0,1,36,131,0,1,76,136,0,1,64,146,0,5,20,1,4,0,16,147,0,8,64,0,0,1,200,16,2,10,132,0,1,4,134,0,6,101,8,0,255,0,255,131,0,34,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,0,0,119,87,191,192,0,0,1,5,1,32,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,6,1,96,1,12,2,18,0,1,18,133,0,1,96,2,18,96,3,24,18,0,1,18,133,0,2,96,30,3,16,36,18,2,0,34,131,0,4,144,16,128,65,5,31,255,246,136,0,6,0,64,0,144,0,32,7,65,31,255,246,136,0,0,7,64,0,200,7,1,7,4,131,0,8,224,3,7,0,200,7,1,3,9,2,0,27,0,139,3,0,0,200,3,8,1,9,132,0,8,240,7,7,0,88,136,7,10,132,0,8,240,3,3,137,88,135,3,10,9,0,0,44,0,160,8,4,138,200,10,7,1,8,0,0,27,0,225,3,3,11,0,200,7,1,3,0,49,0,0,225,10,6,5,0,76,128,3,1,132,0,11,226,1,1,3,200,7,1,3,0,44,0,12,0,235,10,6,3,200,7,1,5,0,0,27,13,0,235,7,7,8,200,7,1,3,0,6,0,0,8,235,10,4,3,200,1,1,4,132,0,8,240,5,5,0,80,113,4,6,131,0,9,64,240,3,3,4,80,119,6,10,131,0,9,64,225,5,4,6,200,7,1,4,132,0,8,225,3,6,0,201,8,1,4,132,0,8,240,10,4,0,65,132,5,8,132,0,10,240,8,4,132,200,4,1,10,0,16,3,48,32,139,131,3,11,200,8,1,3,0,0,27,0,161,5,1,12,0,200,1,1,8,0,3,2,2,171,10,3,5,10,56,32,8,1,132,0,8,226,1,1,3,76,16,8,1,131,0,9,64,226,1,1,8,8,128,8,1,132,0,8,226,1,1,8,8,64,8,1,131,0,9,192,226,1,1,8,8,128,8,1,131,0,11,131,226,1,1,8,200,7,1,8,0,6,12,0,0,161,8,2,0,200,7,1,3,0,27,10,0,0,171,8,1,8,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,0,1,0};
		
		public static byte[] _bx74 = new byte[] {3,16,42,17,132,0,5,140,0,0,3,16,139,0,1,36,131,0,1,76,136,0,1,32,146,0,5,20,1,8,0,16,147,0,8,64,0,0,2,208,16,2,12,132,0,1,4,134,0,6,101,8,0,255,0,255,131,0,34,1,0,0,240,80,0,0,241,81,0,0,50,82,0,0,115,83,0,0,116,84,0,0,117,85,0,0,118,86,0,0,119,87,191,192,0,0,1,5,1,32,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,8,1,96,1,14,2,18,0,1,18,133,0,1,96,2,20,96,3,26,18,0,1,18,133,0,2,96,32,3,96,38,18,2,0,18,133,0,2,96,44,3,96,50,18,2,0,18,133,0,2,32,56,3,16,58,18,2,0,34,131,0,4,144,16,128,65,5,31,255,246,136,0,6,0,64,0,144,0,32,7,65,31,255,246,136,0,0,8,64,0,200,7,1,9,2,0,9,27,0,139,3,0,0,200,7,1,2,7,4,131,0,8,224,3,7,0,200,8,1,9,132,0,8,240,9,9,0,88,129,11,10,132,0,8,240,7,7,137,80,119,10,12,9,0,0,44,64,160,8,8,10,76,3,135,12,7,132,0,9,225,7,10,11,200,7,1,10,0,10,0,27,0,235,9,11,7,200,7,1,11,11,0,49,0,0,225,12,5,0,200,1,2,1,5,132,0,8,240,10,10,0,80,112,5,1,131,0,9,64,226,1,1,5,200,7,1,8,132,0,10,225,10,5,0,200,7,1,11,0,44,11,0,0,235,12,6,11,200,7,1,11,0,12,6,0,0,235,12,4,11,200,8,1,4,0,11,0,128,64,139,12,3,3,200,1,1,5,132,0,8,240,11,11,0,80,112,5,1,131,0,9,64,226,1,1,5,200,7,1,4,132,0,11,225,11,5,0,200,8,1,9,0,0,192,9,0,171,9,3,4,77,132,4,8,132,0,8,240,8,4,9,64,136,5,7,131,0,11,192,225,8,4,136,200,8,1,5,0,0,10,27,0,161,5,1,0,56,128,9,1,132,0,11,226,1,1,5,200,7,1,8,0,27,0,9,0,225,11,9,0,200,8,1,5,132,0,8,225,9,7,0,201,4,1,8,132,0,10,240,4,8,0,200,7,1,5,2,0,11,27,0,139,3,4,4,200,4,1,8,0,11,16,0,0,225,4,8,0,200,8,1,7,132,0,11,240,5,5,0,88,135,4,8,0,6,0,12,0,161,8,2,135,200,7,1,3,0,0,27,13,0,235,5,4,7,76,135,3,5,0,0,27,0,8,225,5,4,4,200,1,1,6,132,0,8,240,3,3,0,80,112,6,1,131,0,9,64,226,1,1,6,200,7,1,7,132,0,8,225,3,6,0,201,8,1,4,132,0,11,240,4,7,0,200,4,1,7,0,16,48,9,32,139,3,7,7,65,132,3,5,132,0,11,240,5,4,132,200,1,1,5,0,3,2,2,2,171,131,7,12,200,8,1,3,0,0,27,0,161,3,5,0,4,56,32,5,1,132,0,8,226,1,1,3,76,16,5,1,131,0,12,64,226,1,1,5,8,72,5,8,0,0,64,13,192,225,8,5,5,200,8,1,8,0,0,128,0,14,225,8,5,0,200,7,1,5,0,6,0,0,161,5,15,6,0,200,7,1,8,0,27,0,0,171,5,1,8,200,15,7,1,3,0,27,0,0,171,8,5,5,200,7,1,3,132,0,8,224,8,3,0,20,135,3,3,131,0,8,27,224,3,0,0,200,15,1,133,0,7,225,2,3,0,200,15,128,133,0,8,225,0,1,0,200,0,1,1,132,0,3,226,1,1,140,0,1,0};
	}
}

#endif